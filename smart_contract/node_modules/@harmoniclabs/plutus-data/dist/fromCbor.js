"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataFromCbor = exports.dataFromCborObj = void 0;
var cbor_1 = require("@harmoniclabs/cbor");
var DataB_1 = require("./DataB.js");
var DataConstr_1 = require("./DataConstr.js");
var DataI_1 = require("./DataI.js");
var DataList_1 = require("./DataList.js");
var DataMap_1 = require("./DataMap.js");
var DataPair_1 = require("./DataPair.js");
var assert_1 = require("./utils/assert.js");
function dataFromCborObj(cborObj) {
    (0, assert_1.assert)((0, cbor_1.isCborObj)(cborObj), "Invalid cborObj to convert to Data");
    if (cborObj instanceof cbor_1.CborUInt ||
        cborObj instanceof cbor_1.CborNegInt) {
        return new DataI_1.DataI(cborObj.num);
    }
    if (cborObj instanceof cbor_1.CborBytes) {
        // if indefinite length (> 64)
        // `bytes` property already concats the chunks for us 
        return new DataB_1.DataB(cborObj.bytes);
    }
    if (cborObj instanceof cbor_1.CborArray) {
        return new DataList_1.DataList(cborObj.array.map(function (cObj) { return dataFromCborObj(cObj); }));
    }
    if (cborObj instanceof cbor_1.CborMap) {
        return new DataMap_1.DataMap(cborObj.map.map(function (entry) {
            return new DataPair_1.DataPair(dataFromCborObj(entry.k), dataFromCborObj(entry.v));
        }));
    }
    if (cborObj instanceof cbor_1.CborTag) {
        var tag = (0, DataConstr_1.cborTagToConstrNumber)(cborObj.tag);
        var data = cborObj.data;
        if (
        // any unrecognized tag
        tag < BigInt(0)
            || !(data instanceof cbor_1.CborArray)) {
            // ignore the tag and and treats the object as if it were normal CBOR
            return dataFromCborObj(data);
        }
        if (tag === BigInt(102)
            // DO NOT REMOVE
            // THIS IS A FIX TO A EDGE CASE
            // `cborTagToConstrNumber` will return 102 for cbor tag 1375 ( which is a DataConstr tag 102 )
            && cborObj.tag !== BigInt(1375)) {
            var dataArr = data.array;
            if (!(dataArr.length === 2 &&
                dataArr[0] instanceof cbor_1.CborUInt &&
                dataArr[1] instanceof cbor_1.CborArray))
                throw new Error("invalid fileds for cbor tag 102 while constructing DataConstr");
            return new DataConstr_1.DataConstr(dataArr[0].num, dataArr[1].array.map(dataFromCborObj));
        }
        return new DataConstr_1.DataConstr(tag, data.array.map(dataFromCborObj));
    }
    // CborText and CborSimple not supported
    throw new Error("invalid CBOR major type for Data");
}
exports.dataFromCborObj = dataFromCborObj;
function dataFromCbor(cbor) {
    return dataFromCborObj(cbor_1.Cbor.parse((0, cbor_1.forceCborString)(cbor)));
}
exports.dataFromCbor = dataFromCbor;
