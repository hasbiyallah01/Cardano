{"version":3,"sources":["../src/index.ts","../src/core.ts","../src/lucid-evolution/utils.ts","../src/lucid-evolution/LucidEvolution.ts","../src/tx-builder/internal/Collect.ts","../src/Errors.ts","../src/tx-builder/internal/TxUtils.ts","../src/tx-builder/internal/Service.ts","../src/tx-builder/internal/Read.ts","../src/tx-builder/internal/Attach.ts","../src/tx-builder/internal/Pay.ts","../src/tx-builder/internal/Mint.ts","../src/tx-builder/internal/Interval.ts","../src/tx-builder/internal/Signer.ts","../src/tx-builder/internal/Stake.ts","../src/tx-builder/internal/Pool.ts","../src/tx-builder/internal/Governance.ts","../src/tx-builder/internal/Metadata.ts","../src/tx-builder/internal/CompleteTxBuilder.ts","../src/tx-sign-builder/TxSignBuilder.ts","../src/tx-sign-builder/internal/CompleteTxSigner.ts","../src/tx-submit/TxSubmit.ts","../src/tx-sign-builder/internal/Sign.ts","../src/tx-builder/TxBuilder.ts","../src/tx-builder/TxConfig.ts"],"sourcesContent":["export * from \"./lucid-evolution/index.js\";\nexport * from \"./tx-builder/index.js\";\nexport * from \"./tx-sign-builder/index.js\";\nexport * from \"./tx-submit/TxSubmit.js\";\nexport * from \"./Errors.js\";\nexport * from \"./core.js\";\nexport * from \"@lucid-evolution/core-types\";\nexport * from \"@lucid-evolution/core-utils\";\nexport * from \"@lucid-evolution/plutus\";\nexport * from \"@lucid-evolution/provider\";\nexport * from \"@lucid-evolution/sign_data\";\nexport * from \"@lucid-evolution/utils\";\nexport * from \"@lucid-evolution/wallet\";\n","import { Effect } from \"effect\";\n\nexport * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\n\nexport const makeReturn = <A, E>(program: Effect.Effect<A, E>) => {\n  return {\n    unsafeRun: () => Effect.runPromise(program),\n    safeRun: () => Effect.runPromise(Effect.either(program)),\n    program: () => program,\n  };\n};\n","import { Json, Provider, UTxO, Unit } from \"@lucid-evolution/core-types\";\nimport { fromUnit, toUnit } from \"@lucid-evolution/utils\";\nimport { Constr, Data } from \"@lucid-evolution/plutus\";\n\nexport const datumOf = async <T = Data>(\n  provider: Provider,\n  utxo: UTxO,\n  type?: T,\n): Promise<T> => {\n  if (!utxo.datum) {\n    if (!utxo.datumHash) {\n      throw new Error(\"This UTxO does not have a datum hash.\");\n    }\n    utxo.datum = await provider.getDatum(utxo.datumHash);\n  }\n  return Data.from<T>(utxo.datum, type);\n};\n\n/** Query CIP-0068 metadata for a specifc asset. */\nexport const metadataOf = async <T = Json>(\n  provider: Provider,\n  unit: Unit,\n): Promise<T> => {\n  const { policyId, name, label } = fromUnit(unit);\n  switch (label) {\n    case 222:\n    case 333:\n    case 444: {\n      const utxo = await provider.getUtxoByUnit(toUnit(policyId, name, 100));\n      const metadata = (await datumOf(provider, utxo)) as Constr<Data>;\n      return Data.toJson(metadata.fields[0]);\n    }\n    default:\n      throw new Error(\"No variant matched.\");\n  }\n};\n","import {\n  Credential,\n  Delegation,\n  Network,\n  OutRef,\n  PrivateKey,\n  ProtocolParameters,\n  Provider,\n  Transaction,\n  TxHash,\n  Unit,\n  UnixTime,\n  UTxO,\n  Wallet,\n  WalletApi,\n} from \"@lucid-evolution/core-types\";\nimport { CML } from \"../core.js\";\nimport { datumOf, metadataOf } from \"./utils.js\";\nimport {\n  createCostModels,\n  PROTOCOL_PARAMETERS_DEFAULT,\n  unixTimeToSlot,\n} from \"@lucid-evolution/utils\";\nimport * as TxBuilder from \"../tx-builder/TxBuilder.js\";\nimport * as TxConfig from \"../tx-builder/TxConfig.js\";\nimport * as TxSignBuilder from \"../tx-sign-builder/TxSignBuilder.js\";\nimport { Data, SLOT_CONFIG_NETWORK } from \"@lucid-evolution/plutus\";\nimport {\n  makeWalletFromAddress,\n  makeWalletFromAPI,\n  makeWalletFromPrivateKey,\n  makeWalletFromSeed,\n} from \"@lucid-evolution/wallet\";\nimport { Emulator } from \"@lucid-evolution/provider\";\nimport { Effect, pipe, Data as _Data } from \"effect\";\nimport { NullableError, UnauthorizedNetwork } from \"../Errors.js\";\nimport { TimeoutExceptionTypeId } from \"effect/Cause\";\n\nexport type LucidEvolution = {\n  config: () => Partial<LucidConfig>;\n  wallet: () => Wallet;\n  overrideUTxOs: (utxos: UTxO[]) => void;\n  switchProvider: (provider: Provider) => Promise<void>;\n  newTx: () => TxBuilder.TxBuilder;\n  fromTx: (tx: Transaction) => TxSignBuilder.TxSignBuilder;\n  selectWallet: {\n    fromSeed: (\n      seed: string,\n      options?: {\n        addressType?: \"Base\" | \"Enterprise\";\n        accountIndex?: number;\n        password?: string;\n      },\n    ) => void;\n    fromPrivateKey: (privateKey: PrivateKey) => void;\n    fromAPI: (walletAPI: WalletApi) => void;\n    fromAddress: (address: string, utxos: UTxO[]) => void;\n  };\n  currentSlot: () => number;\n  unixTimeToSlot: (unixTime: UnixTime) => number;\n  utxosAt: (addressOrCredential: string | Credential) => Promise<UTxO[]>;\n  utxosAtWithUnit: (\n    addressOrCredential: string | Credential,\n    unit: string,\n  ) => Promise<UTxO[]>;\n  utxoByUnit: (unit: string) => Promise<UTxO>;\n  utxosByOutRef: (outRefs: OutRef[]) => Promise<UTxO[]>;\n  delegationAt: (rewardAddress: string) => Promise<Delegation>;\n  awaitTx: (\n    txHash: string,\n    checkInterval?: number | undefined,\n  ) => Promise<boolean>;\n  datumOf: <T extends Data>(utxo: UTxO, type?: T | undefined) => Promise<T>;\n  metadataOf: <T = any>(unit: string) => Promise<T>;\n};\n\nexport type LucidConfig = {\n  provider: Provider;\n  network: Network;\n  wallet: Wallet | undefined;\n  txbuilderconfig: CML.TransactionBuilderConfig;\n  costModels: CML.CostModels;\n  protocolParameters: ProtocolParameters;\n};\n\ntype LucidOptions = {\n  /**\n   * Predefined protocol parameters to use instead of retrieving them from the provider.\n   * If not specified, it will fetch the latest protocol parameters from the provider.\n   */\n  presetProtocolParameters?: ProtocolParameters;\n};\n\n//TODO: turn this to Effect\nexport const Lucid = async (\n  provider?: Provider | undefined,\n  network?: Network,\n  options: LucidOptions = {},\n): Promise<LucidEvolution> => {\n  const protocolParameters: ProtocolParameters | undefined =\n    options.presetProtocolParameters ||\n    (await provider?.getProtocolParameters());\n\n  const costModels = protocolParameters\n    ? createCostModels(protocolParameters.costModels)\n    : undefined;\n  const config: Partial<LucidConfig> = {\n    provider: provider,\n    network: network,\n    wallet: undefined,\n    costModels: costModels,\n    txbuilderconfig:\n      protocolParameters && costModels\n        ? TxConfig.makeTxConfig(protocolParameters, costModels)\n        : undefined,\n    protocolParameters,\n  };\n  if (config.provider && \"slot\" in config.provider) {\n    const emulator: Emulator = config.provider as Emulator;\n    Effect.gen(function* () {\n      const custom = yield* pipe(\n        validateNotNullableNetwork(network),\n        // Effect.filterOrFail(\n        //   (network) => network === \"Custom\",\n        //   () =>\n        //     new UnauthorizedNetwork({\n        //       message: `Expected Custom, received ${String(network)}`,\n        //     }),\n        // ),\n      );\n      SLOT_CONFIG_NETWORK[custom] = {\n        zeroTime: emulator.now(),\n        zeroSlot: 0,\n        slotLength: 1000,\n      };\n    }).pipe(Effect.runSync);\n  }\n  return {\n    config: () => config,\n    wallet: () => config.wallet as Wallet,\n    overrideUTxOs: (utxos: UTxO[]) => config.wallet?.overrideUTxOs(utxos),\n    switchProvider: async (provider: Provider) => {\n      const protocolParam = await provider.getProtocolParameters();\n      const costModels = createCostModels(protocolParam.costModels);\n      config.provider = provider;\n      config.costModels = costModels;\n      config.txbuilderconfig = TxConfig.makeTxConfig(protocolParam, costModels);\n      config.protocolParameters = protocolParam;\n    },\n    newTx: (): TxBuilder.TxBuilder =>\n      Effect.gen(function* () {\n        const provider = yield* Effect.fromNullable(config.provider);\n        const network = yield* Effect.fromNullable(config.network);\n        const costModels = yield* validateNotNullable(\n          config.costModels,\n          \"CostModels are not set in Lucid instance\",\n        );\n        const txbuilderconfig = yield* validateNotNullable(\n          config.txbuilderconfig,\n          \"txbuilderconfig is not set in Lucid instance\",\n        );\n        const protocolParameters = yield* validateNotNullable(\n          config.protocolParameters,\n          \"protocolParameters are not set in Lucid instance\",\n        );\n        return TxBuilder.makeTxBuilder({\n          provider,\n          network,\n          wallet: config.wallet,\n          costModels,\n          txbuilderconfig,\n          protocolParameters,\n        });\n      }).pipe(Effect.runSync),\n    fromTx: (tx: Transaction) =>\n      TxSignBuilder.makeTxSignBuilder(\n        config.wallet,\n        CML.Transaction.from_cbor_hex(tx),\n      ),\n    selectWallet: {\n      fromSeed: (\n        seed: string,\n        options?: {\n          addressType?: \"Base\" | \"Enterprise\";\n          accountIndex?: number;\n          password?: string;\n        },\n      ) =>\n        Effect.gen(function* () {\n          config.wallet = makeWalletFromSeed(\n            yield* validateNotNullableProvider(config.provider),\n            yield* validateNotNullableNetwork(network),\n            seed,\n            options,\n          );\n        }).pipe(Effect.runSync),\n      fromPrivateKey: (privateKey: PrivateKey) =>\n        Effect.gen(function* () {\n          config.wallet = makeWalletFromPrivateKey(\n            yield* validateNotNullableProvider(config.provider),\n            yield* validateNotNullableNetwork(network),\n            privateKey,\n          );\n        }).pipe(Effect.runSync),\n      fromAPI: (walletAPI: WalletApi) =>\n        Effect.gen(function* () {\n          config.wallet = makeWalletFromAPI(\n            yield* validateNotNullableProvider(config.provider),\n            walletAPI,\n          );\n        }).pipe(Effect.runSync),\n      fromAddress: (address: string, utxos: UTxO[]) =>\n        Effect.gen(function* () {\n          config.wallet = makeWalletFromAddress(\n            yield* validateNotNullableProvider(config.provider),\n            yield* validateNotNullableNetwork(network),\n            address,\n            utxos,\n          );\n        }).pipe(Effect.runSync),\n    },\n    currentSlot: () =>\n      pipe(\n        validateNotNullableNetwork(config.network),\n        Effect.map((network) => unixTimeToSlot(network, Date.now())),\n        Effect.runSync,\n      ),\n    unixTimeToSlot: (unixTime: UnixTime) =>\n      pipe(\n        validateNotNullableNetwork(config.network),\n        Effect.map((network) => unixTimeToSlot(network, unixTime)),\n        Effect.runSync,\n      ),\n    utxosAt: (addressOrCredential: string | Credential) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() => provider.getUtxos(addressOrCredential)),\n        ),\n        Effect.runPromise,\n      ),\n    utxosAtWithUnit: (addressOrCredential: string | Credential, unit: Unit) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() =>\n            provider.getUtxosWithUnit(addressOrCredential, unit),\n          ),\n        ),\n        Effect.runPromise,\n      ),\n    utxoByUnit: (unit: Unit) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() => provider.getUtxoByUnit(unit)),\n        ),\n        Effect.runPromise,\n      ),\n    utxosByOutRef: (outRefs: OutRef[]) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() => provider.getUtxosByOutRef(outRefs)),\n        ),\n        Effect.runPromise,\n      ),\n    delegationAt: (rewardAddress: string) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() => provider.getDelegation(rewardAddress)),\n        ),\n        Effect.runPromise,\n      ),\n    awaitTx: (txHash: TxHash, checkInterval?: number) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() => provider.awaitTx(txHash, checkInterval)),\n        ),\n        Effect.runPromise,\n      ),\n    datumOf: <T extends Data>(utxo: UTxO, type?: T | undefined) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() => datumOf(provider, utxo, type)),\n        ),\n        Effect.runPromise,\n      ),\n    metadataOf: (unit: string) =>\n      pipe(\n        validateNotNullableProvider(config.provider),\n        Effect.flatMap((provider) =>\n          Effect.promise(() => metadataOf(provider, unit)),\n        ),\n        Effect.runPromise,\n      ),\n  };\n};\n\nconst validateNotNullable = <T>(value: T | undefined, message: string) =>\n  pipe(\n    Effect.fromNullable(value),\n    Effect.orElseFail(() => new NullableError({ message })),\n  );\n\nconst validateNotNullableNetwork = (network: Network | undefined) =>\n  validateNotNullable(network, \"Network is not set in Lucid instance\");\nconst validateNotNullableProvider = (provider: Provider | undefined) =>\n  validateNotNullable(provider, \"Provider is not set in Lucid instance\");\n","import { Effect, pipe } from \"effect\";\nimport { Data } from \"@lucid-evolution/plutus\";\nimport { utxoToCore } from \"@lucid-evolution/utils\";\nimport { Redeemer, RedeemerBuilder, UTxO } from \"@lucid-evolution/core-types\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\nimport { resolveDatum, toPartial, toV1, toV2, toV3 } from \"./TxUtils.js\";\nimport { paymentCredentialOf } from \"@lucid-evolution/utils\";\nimport { datumOf } from \"../../lucid-evolution/utils.js\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const collectError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Collect: ${cause} }` });\n\nexport const collectFromUTxO =\n  (utxos: UTxO[], collectInputs: Boolean = true) =>\n  (redeemer?: Redeemer) =>\n    Effect.gen(function* () {\n      const { config } = yield* TxConfig;\n      if (utxos.length === 0) yield* collectError(ERROR_MESSAGE.EMPTY_UTXO);\n      for (const utxo of utxos) {\n        // fetch the datum when the datumHash is present\n        const resolvedDatum = yield* resolveDatum(\n          utxo.datumHash,\n          utxo.datum,\n          config.lucidConfig.provider,\n        );\n        // Skip adding UTxO to collectedInputs when building redeemers to prevent duplicate inputs\n        // Store inputs for later use in the txBuilder\n        if (collectInputs) config.collectedInputs.push(utxo);\n        //TODO: Add config.collectedAssets\n        const input = CML.SingleInputBuilder.from_transaction_unspent_output(\n          utxoToCore({ ...utxo, datum: resolvedDatum }),\n        );\n        const credential = paymentCredentialOf(utxo.address);\n\n        if (credential.type == \"Script\") {\n          const script = yield* pipe(\n            Effect.fromNullable(config.scripts.get(credential.hash)),\n            Effect.orElseFail(() =>\n              collectError(\n                collectError(ERROR_MESSAGE.MISSING_SCRIPT(credential.hash)),\n              ),\n            ),\n          );\n          switch (script.type) {\n            case \"Native\":\n              config.txBuilder.add_input(\n                input.native_script(\n                  CML.NativeScript.from_cbor_hex(script.script),\n                  CML.NativeScriptWitnessInfo.assume_signature_count(),\n                ),\n              );\n              break;\n            case \"PlutusV1\": {\n              const red = yield* pipe(\n                Effect.fromNullable(redeemer),\n                Effect.orElseFail(() =>\n                  collectError(ERROR_MESSAGE.MISSING_REDEEMER),\n                ),\n              );\n              config.txBuilder.add_input(\n                input.plutus_script(\n                  toPartial(toV1(script.script), red),\n                  CML.Ed25519KeyHashList.new(),\n                  CML.PlutusData.from_cbor_hex(utxo.datum!),\n                ),\n              );\n              break;\n            }\n            case \"PlutusV2\": {\n              const v2 = toV2(script.script);\n              const red = yield* pipe(\n                Effect.fromNullable(redeemer),\n                Effect.orElseFail(() =>\n                  collectError(ERROR_MESSAGE.MISSING_REDEEMER),\n                ),\n              );\n              const partial = toPartial(v2, red);\n              config.txBuilder.add_input(\n                utxo.datum && utxo.datumHash\n                  ? input.plutus_script(\n                      partial,\n                      CML.Ed25519KeyHashList.new(),\n                      CML.PlutusData.from_cbor_hex(utxo.datum),\n                    )\n                  : input.plutus_script_inline_datum(\n                      partial,\n                      CML.Ed25519KeyHashList.new(),\n                    ),\n              );\n              break;\n            }\n            case \"PlutusV3\": {\n              const v3 = toV3(script.script);\n              const red = yield* pipe(\n                Effect.fromNullable(redeemer),\n                Effect.orElseFail(() =>\n                  collectError(ERROR_MESSAGE.MISSING_REDEEMER),\n                ),\n              );\n              const partial = toPartial(v3, red);\n              config.txBuilder.add_input(\n                utxo.datum && utxo.datumHash\n                  ? input.plutus_script(\n                      partial,\n                      CML.Ed25519KeyHashList.new(),\n                      CML.PlutusData.from_cbor_hex(utxo.datum),\n                    )\n                  : input.plutus_script_inline_datum(\n                      partial,\n                      CML.Ed25519KeyHashList.new(),\n                    ),\n              );\n              break;\n            }\n          }\n        } else {\n          config.txBuilder.add_input(input.payment_key());\n        }\n      }\n    });\n\n/* \"collectFrom\" for RedeemerBuilder needs similar utxo validations as done for Redeemer.\n  These should happen before coin selection; so the effect this function returns is added\n  to the \"programs\".\n*/\nexport const collectFromUTxOPartial = (\n  utxos: UTxO[],\n  redeemerBuilder: RedeemerBuilder,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    if (utxos.length === 0) yield* collectError(ERROR_MESSAGE.EMPTY_UTXO);\n    if (redeemerBuilder.kind === \"self\") redeemerBuilder.inputs = utxos;\n    for (const utxo of utxos) {\n      if (utxo.datumHash && !utxo.datum) {\n        const data = yield* Effect.tryPromise({\n          try: () => datumOf(config.lucidConfig.provider, utxo),\n          catch: (cause) => collectError({ cause }),\n        });\n        utxo.datum = Data.to(data);\n      }\n      // An array of unspent transaction outputs to be used as inputs when running uplc eval.\n      config.collectedInputs.push(utxo);\n      //TODO: Add config.collectedAssets\n    }\n    // NOTE: If RedeemerBuilder is of kind \"self\" the partial program will be incorrect\n    // however it won't matter as it won't be used if that's the case. But we still need\n    // that RedeemerBuilder in partialPrograms to construct it later during \"complete\"\n    const partialProgram = collectFromUTxO(utxos, false);\n    config.partialPrograms.set(redeemerBuilder, partialProgram);\n  });\n","import { Network } from \"@lucid-evolution/core-types\";\nimport { Data } from \"effect\";\n\nexport const ERROR_MESSAGE = {\n  MULTIPLE_POLICIES:\n    \"MULTIPLE_POLICIES: Only one policy id allowed. You can chain multiple mintAssets functions together if you need to mint assets with different policy ids. \",\n  EMPTY_UTXO:\n    \"EMPTY_UTXO: UTxO array is empty. If a Tx has been recently submitted, consider waiting for chain sync\",\n  MISSING_WALLET:\n    \"MISSING_WALLET: please ensure that your wallet has been properly configured and initialized\",\n  MISSING_REDEEMER: \"MISSING_REDEEMER: redeemer can not be undefined\",\n  DATUM_NOT_SET:\n    \"DATUM_NOT_SET: Script inputs becomes unspendable without datum.\",\n  EMPTY_ASSETS:\n    \"EMPTY_ASSETS: Attempting to pay to an address with an empty assets object\",\n  MISSING_REWARD_TYPE: \"MISSING_REWARD_TYPE: Address type must be Reward type.\",\n  MISSING_STAKE_CREDENTIAL:\n    \"MISSING_STAKE_CREDENTIAL: Address does not contain stake credential\",\n  MISSING_PAYMENT_CREDENTIAL:\n    \"MISSING_PAYMENT_CREDENTIAL: Address does not contain payment credential\",\n  INVALID_METADATA: \"INVALID_METADATA: metadata is invalid\",\n  SCRIPT_CREDENTIAL_NOT_ALLOWED:\n    \"SCRIPT_CREDENTIAL_NOT_ALLOWED: Only verification key credential is allowed\",\n  INVALID_SCRIPT: \"INVALID_SCRIPT: Script is invalid\",\n  EXPECTED_KEY_HASH: \"EXPECTED_KEY_HASH\",\n  INVALID_NETWORK: (\n    address: string,\n    actualNetworkId: number,\n    network: Network,\n  ) =>\n    `Invalid address: ${address}, Expected address with network id ${actualNetworkId}, current network ${network}`,\n  MISSING_SCRIPT: (hash: string) =>\n    `MISSING_SCRIPT: Script not found when building transaction, consider using attach modules. script_hash: ${hash}`,\n  MISSING_POLICY: (policyId: string) =>\n    `MISSING_POLICY: No policy found, policy_id: ${policyId}`,\n} as const;\n\nexport class NullableError extends Data.TaggedError(\"NullableError\")<{\n  readonly message: string;\n}> {}\n\nexport class UnauthorizedNetwork extends Data.TaggedError(\n  \"UnauthorizedNetwork\",\n)<{\n  readonly message: string;\n}> {}\n\nexport class TxBuilderError extends Data.TaggedError(\"TxBuilderError\")<{\n  readonly cause: unknown;\n}> {\n  get message() {\n    return `${this.cause}`;\n  }\n}\nexport type TransactionError = RunTimeError | TxBuilderError;\n\nexport class TxSignerError extends Data.TaggedError(\"TxSignerError\")<{\n  readonly cause: unknown;\n}> {\n  get message() {\n    return `${this.cause}`;\n  }\n}\n\nexport type TransactionSignError = RunTimeError | TxSignerError;\n\nexport class TxSubmitError extends Data.TaggedError(\"TxSubmitError\")<{\n  readonly cause: unknown;\n}> {\n  get message() {\n    return `${this.cause}`;\n  }\n}\n\n//NOTE: RunTimeError is used to catch all unexpected errors primarly from CML library\nexport class RunTimeError extends Data.TaggedError(\"RunTimeError\")<{\n  cause: unknown;\n}> {\n  get message() {\n    return `${this.cause}`;\n  }\n}\n","import * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\nimport { CBORHex } from \"../types.js\";\nimport { Effect, pipe } from \"effect\";\nimport { networkToId, getAddressDetails } from \"@lucid-evolution/utils\";\nimport {\n  Address,\n  AddressDetails,\n  Redeemer,\n  RedeemerBuilder,\n  RewardAddress,\n  Credential,\n  UTxO,\n  Provider,\n} from \"@lucid-evolution/core-types\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport { LucidConfig } from \"../../lucid-evolution/LucidEvolution.js\";\nimport { TxBuilderConfig } from \"../TxBuilder.js\";\n\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { TxConfig } from \"./Service.js\";\nimport { Data } from \"@lucid-evolution/plutus\";\n\nexport const txBuilderError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ TxBuilderError : ${cause} }` });\n\n//TODO: improve error message, utils is used in different modules\nexport const toCMLAddress = (\n  address: Address | RewardAddress,\n  lucidConfig: LucidConfig,\n): Effect.Effect<CML.Address, TxBuilderError, never> =>\n  Effect.gen(function* ($) {\n    const { type } = yield* validateAddressDetails(address, lucidConfig);\n    return type === \"Byron\"\n      ? CML.ByronAddress.from_base58(address).to_address()\n      : CML.Address.from_bech32(address);\n  });\n\nexport const toV1 = (script: string) =>\n  CML.PlutusScript.from_v1(CML.PlutusV1Script.from_cbor_hex(script));\n\nexport const toV2 = (script: string) =>\n  CML.PlutusScript.from_v2(CML.PlutusV2Script.from_cbor_hex(script));\n\nexport const toV3 = (script: string) =>\n  CML.PlutusScript.from_v3(CML.PlutusV3Script.from_cbor_hex(script));\n\nexport const toPartial = (script: CML.PlutusScript, redeemer: CBORHex) =>\n  CML.PartialPlutusWitness.new(\n    CML.PlutusScriptWitness.new_script(script),\n    CML.PlutusData.from_cbor_hex(redeemer),\n  );\n\nexport const handleRedeemerBuilder = (\n  config: TxBuilderConfig,\n  partialProgram: (\n    redeemer?: string | undefined,\n  ) => Effect.Effect<void, TxBuilderError, TxConfig>,\n  redeemer?: string | RedeemerBuilder,\n) => {\n  if (typeof redeemer === \"object\") {\n    config.partialPrograms.set(redeemer, partialProgram);\n  } else {\n    const program = partialProgram(redeemer);\n    config.programs.push(program);\n  }\n};\n\n//NOTE: deprecated\n// export function toCMLTransactionHash(body: CML.TransactionBody) {\n//   const TransactionHash = C.hash_transaction(\n//     C.TransactionBody.from_bytes(fromHex(body.to_cbor_hex())),\n//   );\n//   return CML.TransactionHash.from_hex(TransactionHash.to_hex());\n// }\n\nexport function isEqual(arr1: Uint8Array, arr2: Uint8Array): boolean {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  return arr1.every((value, index) => value === arr2[index]);\n}\n\nexport const validateAddressDetails = (\n  address: Address | RewardAddress,\n  lucidConfig: LucidConfig,\n): Effect.Effect<AddressDetails, TxBuilderError, never> =>\n  Effect.gen(function* ($) {\n    const addressDetails = yield* $(\n      Effect.try({\n        try: () => getAddressDetails(address),\n        catch: (cause) =>\n          new TxBuilderError({\n            cause,\n          }),\n      }),\n    );\n    const actualNetworkId = networkToId(lucidConfig.network);\n    if (addressDetails.networkId !== actualNetworkId)\n      yield* new TxBuilderError({\n        cause: ERROR_MESSAGE.INVALID_NETWORK(\n          address,\n          actualNetworkId,\n          lucidConfig.network,\n        ),\n      });\n\n    return addressDetails;\n  });\n\nexport const processCertificate = (\n  stakeCredential: Credential,\n  config: TxBuilder.TxBuilderConfig,\n  buildCert: (credential: CML.Credential) => CML.SingleCertificateBuilder,\n  redeemer?: Redeemer,\n): Effect.Effect<void, TxBuilderError> =>\n  Effect.gen(function* () {\n    switch (stakeCredential.type) {\n      case \"Key\": {\n        const credential = CML.Credential.new_pub_key(\n          CML.Ed25519KeyHash.from_hex(stakeCredential.hash),\n        );\n        const certBuilder = buildCert(credential);\n        config.txBuilder.add_cert(certBuilder.payment_key());\n        break;\n      }\n\n      case \"Script\": {\n        const credential = CML.Credential.new_script(\n          CML.ScriptHash.from_hex(stakeCredential.hash),\n        );\n        const certBuilder = buildCert(credential);\n\n        const script = yield* pipe(\n          Effect.fromNullable(config.scripts.get(stakeCredential.hash)),\n          Effect.orElseFail(() =>\n            txBuilderError(ERROR_MESSAGE.MISSING_SCRIPT(stakeCredential.hash)),\n          ),\n        );\n\n        const addPlutusCertificate = (\n          scriptVersion: CML.PlutusScript,\n        ): Effect.Effect<void, TxBuilderError> => {\n          return Effect.gen(function* () {\n            const red = yield* pipe(\n              Effect.fromNullable(redeemer),\n              Effect.orElseFail(() =>\n                txBuilderError(ERROR_MESSAGE.MISSING_REDEEMER),\n              ),\n            );\n            config.txBuilder.add_cert(\n              certBuilder.plutus_script(\n                toPartial(scriptVersion, red),\n                CML.Ed25519KeyHashList.new(),\n              ),\n            );\n          });\n        };\n\n        switch (script.type) {\n          case \"PlutusV1\":\n            yield* addPlutusCertificate(toV1(script.script));\n            break;\n\n          case \"PlutusV2\":\n            yield* addPlutusCertificate(toV2(script.script));\n            break;\n          case \"PlutusV3\":\n            yield* addPlutusCertificate(toV3(script.script));\n            break;\n\n          case \"Native\":\n            config.txBuilder.add_cert(\n              certBuilder.native_script(\n                CML.NativeScript.from_cbor_hex(script.script),\n                CML.NativeScriptWitnessInfo.assume_signature_count(),\n              ),\n            );\n            break;\n        }\n        break;\n      }\n    }\n  });\n\nexport const validateAndGetStakeCredential = (\n  rewardAddress: RewardAddress,\n  config: TxBuilder.TxBuilderConfig,\n): Effect.Effect<Credential, TxBuilderError> =>\n  Effect.gen(function* () {\n    const addressDetails = yield* pipe(\n      validateAddressDetails(rewardAddress, config.lucidConfig),\n      Effect.andThen((address) =>\n        address.type !== \"Reward\"\n          ? txBuilderError(ERROR_MESSAGE.MISSING_REWARD_TYPE)\n          : Effect.succeed(address),\n      ),\n    );\n\n    const stakeCredential = yield* pipe(\n      Effect.fromNullable(addressDetails.stakeCredential),\n      Effect.orElseFail(() =>\n        txBuilderError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n      ),\n    );\n\n    return stakeCredential;\n  });\n\nexport const resolveDatum = (\n  datumHash: UTxO[\"datumHash\"],\n  datum: UTxO[\"datum\"],\n  provider: Provider,\n) =>\n  Effect.gen(function* () {\n    // Only fetch the datum if the datumHash is present and the datum is not present.\n    if (!datumHash || datum) return datum;\n    return yield* pipe(\n      Effect.tryPromise({\n        try: () => provider.getDatum(datumHash),\n        catch: txBuilderError,\n      }),\n      Effect.map(Data.to),\n    );\n  });\n","import { Context, Effect } from \"effect\";\nimport { TxBuilderConfig } from \"../TxBuilder.js\";\n\nexport class TxConfig extends Context.Tag(\"TxConfig\")<\n  TxConfig,\n  {\n    readonly config: TxBuilderConfig;\n  }\n>() {}\n","import { Effect } from \"effect\";\nimport { utxoToCore } from \"@lucid-evolution/utils\";\nimport { UTxO } from \"@lucid-evolution/core-types\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport { resolveDatum } from \"./TxUtils.js\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const readError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Read : ${cause} }` });\n\nexport const readFrom = (utxos: UTxO[]) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    if (utxos.length === 0) yield* readError(ERROR_MESSAGE.EMPTY_UTXO);\n    for (const utxo of utxos) {\n      // fetch the datum when the datumHash is present\n      const resolvedDatum = yield* resolveDatum(\n        utxo.datumHash,\n        utxo.datum,\n        config.lucidConfig.provider,\n      );\n\n      const coreUtxo = utxoToCore({ ...utxo, datum: resolvedDatum });\n      const exists = config.readInputs.some(\n        (input) =>\n          input.txHash === utxo.txHash &&\n          input.outputIndex === utxo.outputIndex,\n      );\n\n      if (!exists) {\n        config.txBuilder.add_reference_input(coreUtxo);\n        // Store inputs for later use in the txBuilder\n        config.readInputs.push(utxo);\n      }\n    }\n  });\n","import { applyDoubleCborEncoding } from \"@lucid-evolution/utils\";\nimport {\n  CertificateValidator,\n  MintingPolicy,\n  ProposeValidator,\n  SpendingValidator,\n  Validator,\n  VoteValidator,\n  WithdrawalValidator,\n} from \"@lucid-evolution/core-types\";\nimport { CML } from \"../../core.js\";\n\nexport const attachScript = ({ type, script }: Validator) => {\n  //TODO: script should be a branded type\n  switch (type) {\n    case \"Native\":\n      return {\n        key: CML.NativeScript.from_cbor_hex(script).hash().to_hex(),\n        value: { type, script },\n      };\n    case \"PlutusV1\":\n      return {\n        key: CML.PlutusV1Script.from_cbor_hex(applyDoubleCborEncoding(script))\n          .hash()\n          .to_hex(),\n        value: { type, script: applyDoubleCborEncoding(script) },\n      };\n    case \"PlutusV2\":\n      return {\n        key: CML.PlutusV2Script.from_cbor_hex(applyDoubleCborEncoding(script))\n          .hash()\n          .to_hex(),\n        value: { type, script: applyDoubleCborEncoding(script) },\n      };\n    case \"PlutusV3\":\n      return {\n        key: CML.PlutusV3Script.from_cbor_hex(applyDoubleCborEncoding(script))\n          .hash()\n          .to_hex(),\n        value: { type, script: applyDoubleCborEncoding(script) },\n      };\n    default:\n      throw new Error(`Exhaustive check failed: Unhandled case ${type}`);\n  }\n};\nexport const attachSpendingValidator = (spendingValidator: SpendingValidator) =>\n  attachScript(spendingValidator);\n\nexport const attachMintingPolicy = (mintingPolicy: MintingPolicy) =>\n  attachScript(mintingPolicy);\n\nexport const attachCertificateValidator = (\n  certValidator: CertificateValidator,\n) => attachScript(certValidator);\n\nexport const attachWithdrawalValidator = (\n  withdrawalValidator: WithdrawalValidator,\n) => attachScript(withdrawalValidator);\n\nexport const attachVoteValidator = (voteValidator: VoteValidator) =>\n  attachScript(voteValidator);\n\nexport const attachProposeValidator = (proposeValidator: ProposeValidator) =>\n  attachScript(proposeValidator);\n","import { Effect, Scope } from \"effect\";\nimport {\n  addAssets,\n  assetsToValue,\n  coreToTxOutput,\n  toScriptRef,\n  valueToAssets,\n} from \"@lucid-evolution/utils\";\nimport { Address, Assets, Script } from \"@lucid-evolution/core-types\";\nimport { OutputDatum } from \"../types.js\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { CML } from \"../../core.js\";\nimport { toCMLAddress } from \"./TxUtils.js\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const payError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Pay: ${cause} }` });\n\n/** Pay to a public key or native script address. */\nexport const payToAddress = (\n  // config: TxBuilder.TxBuilderConfig,\n  address: Address,\n  assets: Assets,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const outputBuilder = CML.TransactionOutputBuilder.new()\n      .with_address(yield* toCMLAddress(address, config.lucidConfig))\n      .next();\n\n    if (Object.keys(assets).length == 0)\n      yield* payError(ERROR_MESSAGE.EMPTY_ASSETS);\n\n    const value = assetsToValue(assets);\n    let outputResult = outputBuilder\n      .with_asset_and_min_required_coin(\n        value.multi_asset(),\n        config.lucidConfig.protocolParameters.coinsPerUtxoByte,\n      )\n      .build();\n\n    const setLovelaces = assets[\"lovelace\"];\n    if (setLovelaces) {\n      const minLovelace = outputResult.output().amount().coin();\n      if (setLovelaces > minLovelace) {\n        outputResult = outputBuilder.with_value(value).build();\n      }\n    }\n    // Keep track of actual total output value\n    config.totalOutputAssets = addAssets(\n      config.totalOutputAssets,\n      valueToAssets(outputResult.output().amount()),\n    );\n    config.payToOutputs = [\n      ...config.payToOutputs,\n      coreToTxOutput(outputResult.output()),\n    ];\n    config.txBuilder.add_output(outputResult);\n  });\n\n/** Pay to a public key or native script address with datum or scriptRef. */\nexport const ToAddressWithData = (\n  address: Address,\n  outputDatum?: OutputDatum,\n  assets?: Assets,\n  scriptRef?: Script,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    //TODO: Test with datumhash\n    const outputBuilder = buildBaseOutput(address, outputDatum, scriptRef);\n\n    assets ??= {};\n    const value = assetsToValue(assets);\n    let outputResult = outputBuilder\n      .with_asset_and_min_required_coin(\n        value.multi_asset(),\n        config.lucidConfig.protocolParameters.coinsPerUtxoByte,\n      )\n      .build();\n\n    const setLovelaces = assets[\"lovelace\"];\n    if (setLovelaces) {\n      const minLovelace = outputResult.output().amount().coin();\n      if (setLovelaces > minLovelace) {\n        outputResult = outputBuilder.with_value(value).build();\n      }\n    }\n    // Keep track of actual total output value\n    config.totalOutputAssets = addAssets(\n      config.totalOutputAssets,\n      valueToAssets(outputResult.output().amount()),\n    );\n    config.payToOutputs = [\n      ...config.payToOutputs,\n      coreToTxOutput(outputResult.output()),\n    ];\n    config.txBuilder.add_output(outputResult);\n  });\n\n/** Pay to a plutus script address with datum or scriptRef. */\nexport const ToContract = (\n  address: Address,\n  outputDatum?: OutputDatum,\n  assets?: Assets,\n  scriptRef?: Script,\n) => ToAddressWithData(address, outputDatum, assets, scriptRef);\n\nexport const buildBaseOutput = (\n  address: Address,\n  outputDatum?: OutputDatum,\n  scriptRef?: Script,\n) => {\n  let baseBuilder: CML.TransactionOutputBuilder;\n  const addressBuilder = CML.TransactionOutputBuilder.new().with_address(\n    CML.Address.from_bech32(address),\n  );\n  if (outputDatum) {\n    if (outputDatum.value.trim() === \"\") {\n      throw new Error(\n        \"datum value is missing. Please provide a non-empty cbor hex data.\",\n      );\n    }\n    switch (outputDatum.kind) {\n      case \"hash\": {\n        const datumOption = CML.DatumOption.new_hash(\n          CML.DatumHash.from_hex(outputDatum.value),\n        );\n        baseBuilder = addressBuilder.with_data(datumOption);\n        break;\n      }\n      case \"asHash\": {\n        const plutusData = CML.PlutusData.from_cbor_hex(outputDatum.value);\n        baseBuilder = addressBuilder.with_communication_data(plutusData);\n        break;\n      }\n      case \"inline\": {\n        const plutusData = CML.PlutusData.from_cbor_hex(outputDatum.value);\n        const datumOption = CML.DatumOption.new_datum(plutusData);\n        baseBuilder = addressBuilder.with_data(datumOption);\n        break;\n      }\n      default:\n        throw new Error(`Unknown outputDatum: ${outputDatum}`);\n    }\n  } else {\n    baseBuilder = addressBuilder;\n  }\n\n  return scriptRef\n    ? baseBuilder.with_reference_script(toScriptRef(scriptRef)).next()\n    : baseBuilder.next();\n};\n","import { Effect, pipe } from \"effect\";\nimport { fromHex } from \"@lucid-evolution/core-utils\";\nimport { Assets, Redeemer } from \"@lucid-evolution/core-types\";\nimport * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\nimport { toPartial, toV1, toV2, toV3 } from \"./TxUtils.js\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { addAssets } from \"@lucid-evolution/utils\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const mintError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Mint: ${cause} }` });\n\n/**\n * All assets should be of the same policy id.\n * You can chain mintAssets functions together if you need to mint assets with different policy ids.\n * If the plutus script doesn't need a redeemer, you still need to specifiy the void redeemer.\n */\nexport const mintAssets = (assets: Assets) => (redeemer?: Redeemer) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const units = Object.keys(assets);\n    const policyId = units[0].slice(0, 56);\n    const mintAssets = CML.MapAssetNameToNonZeroInt64.new();\n    for (const unit of units) {\n      if (unit.slice(0, 56) !== policyId) {\n        yield* mintError(ERROR_MESSAGE.MULTIPLE_POLICIES);\n      }\n      mintAssets.insert(CML.AssetName.from_hex(unit.slice(56)), assets[unit]);\n    }\n    const mintBuilder = CML.SingleMintBuilder.new(mintAssets);\n    const policy = yield* pipe(\n      Effect.fromNullable(config.scripts.get(policyId)),\n      Effect.orElseFail(() =>\n        mintError(ERROR_MESSAGE.MISSING_POLICY(policyId)),\n      ),\n    );\n    switch (policy.type) {\n      case \"Native\":\n        config.txBuilder.add_mint(\n          mintBuilder.native_script(\n            CML.NativeScript.from_cbor_hex(policy.script),\n            CML.NativeScriptWitnessInfo.assume_signature_count(),\n          ),\n        );\n        break;\n\n      case \"PlutusV1\": {\n        const red = yield* pipe(\n          Effect.fromNullable(redeemer),\n          Effect.orElseFail(() => mintError(ERROR_MESSAGE.MISSING_REDEEMER)),\n        );\n        config.txBuilder.add_mint(\n          mintBuilder.plutus_script(\n            toPartial(toV1(policy.script), red),\n            CML.Ed25519KeyHashList.new(),\n          ),\n        );\n        break;\n      }\n      case \"PlutusV2\": {\n        const red = yield* pipe(\n          Effect.fromNullable(redeemer),\n          Effect.orElseFail(() => mintError(ERROR_MESSAGE.MISSING_REDEEMER)),\n        );\n        config.txBuilder.add_mint(\n          mintBuilder.plutus_script(\n            toPartial(toV2(policy.script), red),\n            CML.Ed25519KeyHashList.new(),\n          ),\n        );\n        break;\n      }\n      case \"PlutusV3\": {\n        const red = yield* pipe(\n          Effect.fromNullable(redeemer),\n          Effect.orElseFail(() => mintError(ERROR_MESSAGE.MISSING_REDEEMER)),\n        );\n        config.txBuilder.add_mint(\n          mintBuilder.plutus_script(\n            toPartial(toV3(policy.script), red),\n            CML.Ed25519KeyHashList.new(),\n          ),\n        );\n        break;\n      }\n    }\n  });\n","import { Effect } from \"effect\";\nimport { UnixTime } from \"@lucid-evolution/core-types\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { unixTimeToSlot } from \"@lucid-evolution/utils\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const validFrom = (unixTime: UnixTime) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const slot = unixTimeToSlot(config.lucidConfig.network, unixTime);\n    config.txBuilder.set_validity_start_interval(BigInt(slot));\n  });\nexport const validTo = (unixTime: UnixTime) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const slot = unixTimeToSlot(config.lucidConfig.network, unixTime);\n    config.txBuilder.set_ttl(BigInt(slot));\n  });\n","import {\n  Address,\n  PaymentKeyHash,\n  RewardAddress,\n  StakeKeyHash,\n} from \"@lucid-evolution/core-types\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { Effect, pipe } from \"effect\";\nimport * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport { validateAddressDetails } from \"./TxUtils.js\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const addSignerError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Signer: ${cause} }` });\n\nexport const addSigner = (address: Address | RewardAddress) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const addressDetails = yield* validateAddressDetails(\n      address,\n      config.lucidConfig,\n    );\n\n    const credential =\n      addressDetails.type === \"Reward\"\n        ? yield* pipe(\n            Effect.fromNullable(addressDetails.stakeCredential),\n            Effect.orElseFail(() =>\n              addSignerError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n            ),\n          )\n        : yield* pipe(\n            Effect.fromNullable(addressDetails.paymentCredential),\n            Effect.orElseFail(() =>\n              addSignerError(ERROR_MESSAGE.MISSING_PAYMENT_CREDENTIAL),\n            ),\n          );\n\n    if (credential.type === \"Script\")\n      yield* addSignerError(ERROR_MESSAGE.SCRIPT_CREDENTIAL_NOT_ALLOWED);\n\n    return credential.hash;\n  }).pipe(Effect.flatMap((keyHash) => addSignerKey(keyHash)));\n\n/** Add a payment or stake key hash as a required signer of the transaction. */\nexport const addSignerKey = (keyHash: PaymentKeyHash | StakeKeyHash) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    config.txBuilder.add_required_signer(CML.Ed25519KeyHash.from_hex(keyHash));\n  });\n","import { Lovelace, Redeemer, RewardAddress } from \"@lucid-evolution/core-types\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { Effect, pipe } from \"effect\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\nimport {\n  toPartial,\n  toV1,\n  toV2,\n  toV3,\n  validateAddressDetails,\n} from \"./TxUtils.js\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const stakeError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Stake: ${cause} }` });\n\nexport const registerStake = (rewardAddress: RewardAddress) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const addressDetails = yield* pipe(\n      validateAddressDetails(rewardAddress, config.lucidConfig),\n      Effect.andThen((address) =>\n        address.type !== \"Reward\"\n          ? stakeError(ERROR_MESSAGE.MISSING_REWARD_TYPE)\n          : Effect.succeed(address),\n      ),\n    );\n\n    const stakeCredential = yield* pipe(\n      Effect.fromNullable(addressDetails.stakeCredential),\n      Effect.orElseFail(() =>\n        stakeError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n      ),\n    );\n\n    const credential =\n      stakeCredential.type === \"Key\"\n        ? CML.Credential.new_pub_key(\n            CML.Ed25519KeyHash.from_hex(stakeCredential.hash),\n          )\n        : CML.Credential.new_script(\n            CML.ScriptHash.from_hex(stakeCredential.hash),\n          );\n    const certBuilder = CML.SingleCertificateBuilder.new(\n      CML.Certificate.new_stake_registration(credential),\n    );\n    config.txBuilder.add_cert(certBuilder.skip_witness());\n  });\n\nexport const deRegisterStake = (\n  rewardAddress: RewardAddress,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const addressDetails = yield* pipe(\n      validateAddressDetails(rewardAddress, config.lucidConfig),\n      Effect.andThen((address) =>\n        address.type !== \"Reward\"\n          ? stakeError(ERROR_MESSAGE.MISSING_REWARD_TYPE)\n          : Effect.succeed(address),\n      ),\n    );\n\n    const stakeCredential = yield* pipe(\n      Effect.fromNullable(addressDetails.stakeCredential),\n      Effect.orElseFail(() =>\n        stakeError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n      ),\n    );\n\n    const createCertBuilder = (\n      credential: CML.Credential,\n      config: TxBuilder.TxBuilderConfig,\n    ): CML.SingleCertificateBuilder => {\n      return CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_unreg_cert(\n          credential,\n          config.lucidConfig.protocolParameters.keyDeposit,\n        ),\n      );\n    };\n\n    switch (stakeCredential.type) {\n      case \"Key\": {\n        const credential = CML.Credential.new_pub_key(\n          CML.Ed25519KeyHash.from_hex(stakeCredential.hash),\n        );\n        const certBuilder = createCertBuilder(credential, config);\n        config.txBuilder.add_cert(certBuilder.payment_key());\n        break;\n      }\n\n      case \"Script\": {\n        const credential = CML.Credential.new_script(\n          CML.ScriptHash.from_hex(stakeCredential.hash),\n        );\n        const certBuilder = createCertBuilder(credential, config);\n        const script = yield* pipe(\n          Effect.fromNullable(config.scripts.get(stakeCredential.hash)),\n          Effect.orElseFail(() =>\n            stakeError(ERROR_MESSAGE.MISSING_SCRIPT(stakeCredential.hash)),\n          ),\n        );\n        const handleRedeemer = () =>\n          pipe(\n            Effect.fromNullable(redeemer),\n            Effect.orElseFail(() => stakeError(ERROR_MESSAGE.MISSING_REDEEMER)),\n          );\n        switch (script.type) {\n          case \"PlutusV1\": {\n            const red = yield* handleRedeemer();\n            config.txBuilder.add_cert(\n              certBuilder.plutus_script(\n                toPartial(toV1(script.script), red),\n                CML.Ed25519KeyHashList.new(),\n              ),\n            );\n            break;\n          }\n\n          case \"PlutusV2\": {\n            const red = yield* handleRedeemer();\n            config.txBuilder.add_cert(\n              certBuilder.plutus_script(\n                toPartial(toV2(script.script), red),\n                CML.Ed25519KeyHashList.new(),\n              ),\n            );\n            break;\n          }\n          case \"PlutusV3\": {\n            const red = yield* handleRedeemer();\n            config.txBuilder.add_cert(\n              certBuilder.plutus_script(\n                toPartial(toV3(script.script), red),\n                CML.Ed25519KeyHashList.new(),\n              ),\n            );\n            break;\n          }\n          case \"Native\": {\n            config.txBuilder.add_cert(\n              certBuilder.native_script(\n                CML.NativeScript.from_cbor_hex(script.script),\n                CML.NativeScriptWitnessInfo.assume_signature_count(),\n              ),\n            );\n            break;\n          }\n        }\n      }\n    }\n  });\n\nexport const withdraw =\n  (rewardAddress: RewardAddress, amount: Lovelace) => (redeemer?: Redeemer) =>\n    Effect.gen(function* () {\n      const { config } = yield* TxConfig;\n      const addressDetails = yield* pipe(\n        validateAddressDetails(rewardAddress, config.lucidConfig),\n        Effect.andThen((address) =>\n          address.type !== \"Reward\"\n            ? stakeError(ERROR_MESSAGE.MISSING_REWARD_TYPE)\n            : Effect.succeed(address),\n        ),\n      );\n\n      const withdrawBuilder = yield* pipe(\n        Effect.fromNullable(\n          CML.RewardAddress.from_address(\n            CML.Address.from_bech32(rewardAddress),\n          ),\n        ),\n        Effect.orElseFail(() =>\n          stakeError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n        ),\n        Effect.andThen((address) =>\n          CML.SingleWithdrawalBuilder.new(address, amount),\n        ),\n      );\n\n      const stakeCredential = yield* pipe(\n        Effect.fromNullable(addressDetails.stakeCredential),\n        Effect.orElseFail(() =>\n          stakeError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n        ),\n      );\n\n      const handleRedeemer = () =>\n        pipe(\n          Effect.fromNullable(redeemer),\n          Effect.orElseFail(() => stakeError(ERROR_MESSAGE.MISSING_REDEEMER)),\n        );\n\n      switch (stakeCredential.type) {\n        case \"Key\": {\n          config.txBuilder.add_withdrawal(withdrawBuilder.payment_key());\n          break;\n        }\n\n        case \"Script\": {\n          const script = yield* pipe(\n            Effect.fromNullable(config.scripts.get(stakeCredential.hash)),\n            Effect.orElseFail(() =>\n              stakeError(ERROR_MESSAGE.MISSING_SCRIPT(stakeCredential.hash)),\n            ),\n          );\n\n          switch (script.type) {\n            case \"PlutusV1\": {\n              const red = yield* handleRedeemer();\n              config.txBuilder.add_withdrawal(\n                withdrawBuilder.plutus_script(\n                  toPartial(toV1(script.script), red),\n                  CML.Ed25519KeyHashList.new(),\n                ),\n              );\n              break;\n            }\n\n            case \"PlutusV2\": {\n              const red = yield* handleRedeemer();\n              config.txBuilder.add_withdrawal(\n                withdrawBuilder.plutus_script(\n                  toPartial(toV2(script.script), red),\n                  CML.Ed25519KeyHashList.new(),\n                ),\n              );\n              break;\n            }\n\n            case \"PlutusV3\": {\n              const red = yield* handleRedeemer();\n              config.txBuilder.add_withdrawal(\n                withdrawBuilder.plutus_script(\n                  toPartial(toV3(script.script), red),\n                  CML.Ed25519KeyHashList.new(),\n                ),\n              );\n              break;\n            }\n            case \"Native\": {\n              config.txBuilder.add_withdrawal(\n                withdrawBuilder.native_script(\n                  CML.NativeScript.from_cbor_hex(script.script),\n                  CML.NativeScriptWitnessInfo.assume_signature_count(),\n                ),\n              );\n              break;\n            }\n          }\n        }\n      }\n    });\n","import {\n  PoolId,\n  PoolParams,\n  Redeemer,\n  RewardAddress,\n} from \"@lucid-evolution/core-types\";\nimport { ERROR_MESSAGE, TxBuilderError } from \"../../Errors.js\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { Effect, pipe } from \"effect\";\nimport {\n  toCMLAddress,\n  toPartial,\n  toV1,\n  toV2,\n  toV3,\n  validateAddressDetails,\n} from \"./TxUtils.js\";\nimport * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\nimport { LucidConfig } from \"../../lucid-evolution/LucidEvolution.js\";\nimport { fromText } from \"@lucid-evolution/core-utils\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const poolError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Pool : ${cause} }` });\n\nexport const delegateTo = (\n  rewardAddress: RewardAddress,\n  poolId: PoolId,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const addressDetails = yield* pipe(\n      validateAddressDetails(rewardAddress, config.lucidConfig),\n      Effect.andThen((address) =>\n        address.type !== \"Reward\"\n          ? poolError(ERROR_MESSAGE.MISSING_REWARD_TYPE)\n          : Effect.succeed(address),\n      ),\n    );\n\n    const stakeCredential = yield* pipe(\n      Effect.fromNullable(addressDetails.stakeCredential),\n      Effect.orElseFail(() =>\n        poolError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n      ),\n    );\n\n    switch (stakeCredential.type) {\n      case \"Key\": {\n        const credential = CML.Credential.new_pub_key(\n          CML.Ed25519KeyHash.from_hex(stakeCredential.hash),\n        );\n        const certBuilder = CML.SingleCertificateBuilder.new(\n          CML.Certificate.new_stake_delegation(\n            credential,\n            CML.Ed25519KeyHash.from_bech32(poolId),\n          ),\n        );\n        config.txBuilder.add_cert(certBuilder.payment_key());\n        break;\n      }\n\n      case \"Script\": {\n        const credential = CML.Credential.new_script(\n          CML.ScriptHash.from_hex(stakeCredential.hash),\n        );\n        const certBuilder = CML.SingleCertificateBuilder.new(\n          CML.Certificate.new_stake_delegation(\n            credential,\n            CML.Ed25519KeyHash.from_bech32(poolId),\n          ),\n        );\n        const script = yield* pipe(\n          Effect.fromNullable(config.scripts.get(stakeCredential.hash)),\n          Effect.orElseFail(() =>\n            poolError(ERROR_MESSAGE.MISSING_SCRIPT(stakeCredential.hash)),\n          ),\n        );\n        const handleRedeemer = () =>\n          pipe(\n            Effect.fromNullable(redeemer),\n            Effect.orElseFail(() => poolError(ERROR_MESSAGE.MISSING_REDEEMER)),\n          );\n        switch (script.type) {\n          case \"PlutusV1\": {\n            const red = yield* handleRedeemer();\n            config.txBuilder.add_cert(\n              certBuilder.plutus_script(\n                toPartial(toV1(script.script), red),\n                CML.Ed25519KeyHashList.new(),\n              ),\n            );\n            break;\n          }\n\n          case \"PlutusV2\": {\n            const red = yield* handleRedeemer();\n            config.txBuilder.add_cert(\n              certBuilder.plutus_script(\n                toPartial(toV2(script.script), red),\n                CML.Ed25519KeyHashList.new(),\n              ),\n            );\n            break;\n          }\n\n          case \"PlutusV3\": {\n            const red = yield* handleRedeemer();\n            config.txBuilder.add_cert(\n              certBuilder.plutus_script(\n                toPartial(toV3(script.script), red),\n                CML.Ed25519KeyHashList.new(),\n              ),\n            );\n            break;\n          }\n          case \"Native\": {\n            config.txBuilder.add_cert(\n              certBuilder.native_script(\n                CML.NativeScript.from_cbor_hex(script.script),\n                CML.NativeScriptWitnessInfo.assume_signature_count(),\n              ),\n            );\n            break;\n          }\n        }\n      }\n    }\n  });\n\n/** Register a stake pool. A pool deposit is required. The metadataUrl needs to be hosted already before making the registration. */\nexport const registerPool = (poolParams: PoolParams) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const poolRegistration = yield* createPoolRegistration(\n      poolParams,\n      config.lucidConfig,\n    );\n    const certBuilder = CML.SingleCertificateBuilder.new(\n      CML.Certificate.new_pool_registration(poolRegistration.pool_params()),\n    );\n\n    config.txBuilder.add_cert(certBuilder.skip_witness());\n  });\n\nconst createPoolRegistration = (poolParams: PoolParams, lucid: LucidConfig) =>\n  Effect.gen(function* () {\n    const poolOwners = CML.Ed25519KeyHashList.new();\n    for (const owner of poolParams.owners) {\n      const addressDetails = yield* validateAddressDetails(owner, lucid);\n      const stakeCredential = yield* pipe(\n        Effect.fromNullable(addressDetails.stakeCredential),\n        Effect.orElseFail(() =>\n          poolError(ERROR_MESSAGE.MISSING_STAKE_CREDENTIAL),\n        ),\n      );\n      stakeCredential.type === \"Key\"\n        ? poolOwners.add(CML.Ed25519KeyHash.from_hex(stakeCredential.hash))\n        : poolError(ERROR_MESSAGE.SCRIPT_CREDENTIAL_NOT_ALLOWED);\n    }\n    const metadataHash = yield* getMetadataHash(poolParams.metadataUrl);\n    const relays = CML.RelayList.new();\n    for (const relay of poolParams.relays) {\n      switch (relay.type) {\n        case \"SingleHostIp\": {\n          //TODO: missing test\n          const ipV4 = relay.ipV4\n            ? CML.Ipv4.from_cbor_bytes(\n                new Uint8Array(relay.ipV4.split(\".\").map((b) => parseInt(b))),\n              )\n            : undefined;\n          //TODO: missing test\n          const ipV6 = relay.ipV6\n            ? CML.Ipv6.from_cbor_hex(relay.ipV6.replaceAll(\":\", \"\"))\n            : undefined;\n          relays.add(CML.Relay.new_single_host_addr(relay.port, ipV4, ipV6));\n          break;\n        }\n        //TODO: missing test\n        case \"SingleHostDomainName\": {\n          relays.add(\n            CML.Relay.new_single_host_name(\n              relay.port,\n              CML.DNSName.from_cbor_hex(fromText(relay.domainName!)),\n            ),\n          );\n          break;\n        }\n        case \"MultiHost\": {\n          relays.add(\n            CML.Relay.new_multi_host_name(\n              CML.DNSName.from_cbor_hex(fromText(relay.domainName!)),\n            ),\n          );\n          break;\n        }\n      }\n    }\n    return CML.PoolRegistration.new(\n      CML.PoolParams.new(\n        CML.Ed25519KeyHash.from_bech32(poolParams.poolId),\n        CML.VRFKeyHash.from_hex(poolParams.vrfKeyHash),\n        poolParams.pledge,\n        poolParams.cost,\n        CML.UnitInterval.new(\n          BigInt(poolParams.margin),\n          BigInt(poolParams.margin),\n        ),\n        CML.RewardAddress.from_address(\n          yield* toCMLAddress(poolParams.rewardAddress, lucid),\n        )!,\n        poolOwners,\n        relays,\n        metadataHash\n          ? CML.PoolMetadata.new(\n              CML.Url.from_cbor_hex(fromText(poolParams.metadataUrl!)),\n              metadataHash,\n            )\n          : undefined,\n      ),\n    );\n  });\n\nconst getMetadataHash = (metadataUrl?: string) =>\n  Effect.gen(function* () {\n    if (metadataUrl) {\n      const metadata = yield* pipe(\n        Effect.tryPromise({\n          try: () => fetch(metadataUrl),\n          catch: (cause) => poolError(cause),\n        }),\n        Effect.andThen((resp) => Effect.promise(() => resp.arrayBuffer())),\n      );\n      const metadataHash = CML.PoolMetadataHash.from_raw_bytes(\n        new Uint8Array(metadata),\n      );\n      return metadataHash;\n    } else {\n      return null;\n    }\n  });\n","import {\n  Anchor,\n  DRep,\n  PoolId,\n  Redeemer,\n  RewardAddress,\n  Credential,\n  AlwaysAbstain,\n  AlwaysNoConfidence,\n} from \"@lucid-evolution/core-types\";\nimport * as CML from \"@anastasia-labs/cardano-multiplatform-lib-nodejs\";\nimport { TxBuilderError } from \"../../Errors.js\";\nimport { Effect } from \"effect\";\nimport {\n  processCertificate,\n  validateAndGetStakeCredential,\n} from \"./TxUtils.js\";\nimport { TxConfig } from \"./Service.js\";\n\nexport const isDRepCredential = (deleg: DRep): deleg is Credential =>\n  !(\"__typename\" in deleg);\n\nexport const isDRepAlwaysAbstain = (deleg: DRep): deleg is AlwaysAbstain =>\n  !isDRepCredential(deleg) && deleg.__typename === \"AlwaysAbstain\";\n\nexport const isDRepAlwaysNoConfidence = (\n  deleg: DRep,\n): deleg is AlwaysNoConfidence =>\n  !isDRepCredential(deleg) && deleg.__typename === \"AlwaysNoConfidence\";\n\nexport const toCMLDRep = (drep: DRep): CML.DRep => {\n  if (isDRepAlwaysAbstain(drep)) {\n    return CML.DRep.new_always_abstain();\n  } else if (isDRepAlwaysNoConfidence(drep)) {\n    return CML.DRep.new_always_no_confidence();\n  } else if (isDRepCredential(drep)) {\n    switch (drep.type) {\n      case \"Key\":\n        return CML.DRep.new_key(CML.Ed25519KeyHash.from_hex(drep.hash));\n      case \"Script\":\n        return CML.DRep.new_script(CML.ScriptHash.from_hex(drep.hash));\n      default:\n        throw new Error(`Unsupported DRep type: ${drep.type}`);\n    }\n  }\n  throw new Error(`Unexpected DRep type: ${drep}`);\n};\n\nexport const governanceError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Governance: ${cause} }` });\n\nexport const delegateVoteToDRep = (\n  rewardAddress: RewardAddress,\n  drep: DRep,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n    const cmlDRep: CML.DRep = toCMLDRep(drep);\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_vote_deleg_cert(credential, cmlDRep),\n      );\n\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const delegateVoteToPoolAndDRep = (\n  rewardAddress: RewardAddress,\n  poolId: PoolId,\n  drep: DRep,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n    const cmlDRep = toCMLDRep(drep);\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_stake_vote_deleg_cert(\n          credential,\n          CML.Ed25519KeyHash.from_bech32(poolId),\n          cmlDRep,\n        ),\n      );\n\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const registerAndDelegateToPool = (\n  rewardAddress: RewardAddress,\n  poolId: PoolId,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_stake_reg_deleg_cert(\n          credential,\n          CML.Ed25519KeyHash.from_bech32(poolId),\n          config.lucidConfig.protocolParameters.keyDeposit,\n        ),\n      );\n\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const registerAndDelegateToDRep = (\n  rewardAddress: RewardAddress,\n  drep: DRep,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n    const cmlDRep = toCMLDRep(drep);\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_vote_reg_deleg_cert(\n          credential,\n          cmlDRep,\n          config.lucidConfig.protocolParameters.keyDeposit,\n        ),\n      );\n\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const registerAndDelegateToPoolAndDRep = (\n  rewardAddress: RewardAddress,\n  poolId: PoolId,\n  drep: DRep,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n    const cmlDRep = toCMLDRep(drep);\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_stake_vote_reg_deleg_cert(\n          credential,\n          CML.Ed25519KeyHash.from_bech32(poolId),\n          cmlDRep,\n          config.lucidConfig.protocolParameters.keyDeposit,\n        ),\n      );\n\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const registerDRep = (\n  rewardAddress: RewardAddress,\n  anchor?: Anchor,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n    const cmlAnchor = anchor\n      ? CML.Anchor.new(\n          CML.Url.from_json(anchor.url),\n          CML.AnchorDocHash.from_hex(anchor.dataHash),\n        )\n      : undefined;\n\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_reg_drep_cert(\n          credential,\n          config.lucidConfig.protocolParameters.drepDeposit,\n          cmlAnchor,\n        ),\n      );\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const deregisterDRep = (\n  rewardAddress: RewardAddress,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_unreg_drep_cert(\n          credential,\n          config.lucidConfig.protocolParameters.drepDeposit,\n        ),\n      );\n\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const updateDRep = (\n  rewardAddress: RewardAddress,\n  anchor?: Anchor,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const stakeCredential = yield* validateAndGetStakeCredential(\n      rewardAddress,\n      config,\n    );\n    const cmlAnchor = anchor\n      ? CML.Anchor.new(\n          CML.Url.from_json(anchor.url),\n          CML.AnchorDocHash.from_hex(anchor.dataHash),\n        )\n      : undefined;\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_update_drep_cert(credential, cmlAnchor),\n      );\n    yield* processCertificate(stakeCredential, config, buildCert, redeemer);\n  });\n\nexport const authCommitteeHot = (\n  coldAddress: RewardAddress,\n  hotAddress: RewardAddress,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const coldCred = yield* validateAndGetStakeCredential(coldAddress, config);\n    const hotCred = yield* validateAndGetStakeCredential(hotAddress, config);\n    const hotCredential: CML.Credential =\n      hotCred.type === \"Key\"\n        ? CML.Credential.new_pub_key(CML.Ed25519KeyHash.from_hex(hotCred.hash))\n        : CML.Credential.new_script(CML.ScriptHash.from_hex(hotCred.hash));\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_auth_committee_hot_cert(credential, hotCredential),\n      );\n\n    yield* processCertificate(coldCred, config, buildCert, redeemer);\n  });\n\nexport const resignCommitteeHot = (\n  coldAddress: RewardAddress,\n  anchor?: Anchor,\n  redeemer?: Redeemer,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const coldCred = yield* validateAndGetStakeCredential(coldAddress, config);\n    const cmlAnchor = anchor\n      ? CML.Anchor.new(\n          CML.Url.from_json(anchor.url),\n          CML.AnchorDocHash.from_hex(anchor.dataHash),\n        )\n      : undefined;\n\n    const buildCert = (credential: CML.Credential) =>\n      CML.SingleCertificateBuilder.new(\n        CML.Certificate.new_resign_committee_cold_cert(credential, cmlAnchor),\n      );\n\n    yield* processCertificate(coldCred, config, buildCert, redeemer);\n  });\n","import { Label } from \"@lucid-evolution/core-types\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport { Effect } from \"effect\";\nimport { CML } from \"../../core.js\";\nimport * as S from \"@effect/schema/Schema\";\nimport { toHex } from \"@lucid-evolution/core-utils\";\n\nexport const attachMetadata = (\n  config: TxBuilder.TxBuilderConfig,\n  label: Label,\n  metadata: TransactionMetadata,\n) =>\n  Effect.gen(function* () {\n    const auxiliaryData = CML.AuxiliaryData.new();\n    const meta = CML.Metadata.new();\n    meta.set(\n      BigInt(label),\n      CML.TransactionMetadatum.from_json(\n        JSON.stringify(toCardanoMetadata(metadata)),\n      ),\n    );\n    auxiliaryData.add_metadata(meta);\n    config.txBuilder.add_auxiliary_data(auxiliaryData);\n    auxiliaryData.free();\n    meta.free();\n  });\n\n//CDDL conformance\n//   transaction_metadatum =\n//   { * transaction_metadatum => transaction_metadatum }\n// / [ * transaction_metadatum ]\n// / int\n// / bytes .size (0..64)\n// / text .size (0..64)\n\nexport type CardanoMetadata =\n  | {\n      string: string;\n    }\n  | {\n      int: number;\n    }\n  | {\n      bytes: string;\n    }\n  | {\n      list: ReadonlyArray<CardanoMetadata>;\n    }\n  | {\n      map: ReadonlyArray<{\n        k: CardanoMetadata;\n        v: CardanoMetadata;\n      }>;\n    };\n\nexport type TransactionMetadata =\n  | string\n  | number\n  | Uint8Array\n  | ReadonlyArray<TransactionMetadata>\n  | { [key: string]: TransactionMetadata };\n\nconst TextSchema = S.String.pipe(S.maxLength(64));\n\nconst TransactionMetadataSchema: S.Schema<TransactionMetadata> = S.Union(\n  TextSchema,\n  S.Number,\n  S.Uint8ArrayFromSelf,\n  S.Array(S.suspend(() => TransactionMetadataSchema)),\n  S.Record(\n    S.String,\n    S.suspend(() => TransactionMetadataSchema),\n  ),\n);\n\nexport const toCardanoMetadata = (\n  json: TransactionMetadata,\n): CardanoMetadata => {\n  const d = S.asserts(TransactionMetadataSchema)(json);\n  if (S.is(TextSchema)(json)) {\n    return { string: json };\n  }\n  if (typeof json === \"number\") {\n    return { int: json };\n  }\n  if (json instanceof Uint8Array) {\n    return { bytes: toHex(json) };\n  }\n  if (Array.isArray(json)) {\n    return { list: json.map((value) => toCardanoMetadata(value)) };\n  }\n  if (typeof json === \"object\" && json !== null) {\n    const mapEntries = Object.entries(json).map(([k, v]) => ({\n      k: toCardanoMetadata(k),\n      v: toCardanoMetadata(v),\n    }));\n    return { map: mapEntries };\n  }\n  throw new Error(\"Unsupported type\");\n};\n","import {\n  Effect,\n  pipe,\n  Record,\n  Array as _Array,\n  BigInt as _BigInt,\n  Tuple,\n  Option,\n} from \"effect\";\nimport {\n  Address,\n  Assets,\n  EvalRedeemer,\n  UTxO,\n  Wallet,\n} from \"@lucid-evolution/core-types\";\nimport {\n  ERROR_MESSAGE,\n  RunTimeError,\n  TransactionError,\n  TxBuilderError,\n} from \"../../Errors.js\";\nimport { CML } from \"../../core.js\";\nimport * as UPLC from \"@lucid-evolution/uplc\";\nimport * as TxBuilder from \"../TxBuilder.js\";\nimport * as TxSignBuilder from \"../../tx-sign-builder/TxSignBuilder.js\";\nimport {\n  assetsToValue,\n  coreToTxOutput,\n  isEqualUTxO,\n  selectUTxOs,\n  sortUTxOs,\n  stringify,\n  utxoToCore,\n  utxoToTransactionInput,\n  utxoToTransactionOutput,\n  toCMLRedeemerTag,\n} from \"@lucid-evolution/utils\";\nimport { SLOT_CONFIG_NETWORK } from \"@lucid-evolution/plutus\";\nimport { collectFromUTxO } from \"./Collect.js\";\nimport { TxConfig } from \"./Service.js\";\nimport { isError } from \"effect/Predicate\";\n\nexport type CompleteOptions = {\n  /**\n   * Enable coin selection algorithm\n   * @default true\n   */\n  coinSelection?: boolean;\n\n  /**\n   * Address to send change to\n   * @default wallet.address()\n   */\n  changeAddress?: Address;\n\n  /**\n   * Enable local UPLC evaluation\n   * @default true\n   */\n  localUPLCEval?: boolean;\n\n  /**\n   * Amount to set as collateral\n   * @default 5_000_000n\n   */\n  setCollateral?: bigint;\n\n  /**\n   * Use canonical ordering\n   * @default false\n   */\n  canonical?: boolean;\n\n  /**\n   * Include leftover lovelace in the transaction fee if there are no additional inputs available to cover the change output address.\n   * @default false\n   */\n  includeLeftoverLovelaceAsFee?: boolean;\n\n  /**\n   * Preset UTXOs from the wallet to include in coin selection.\n   * If not provided, wallet UTXOs will be fetched by the provider.\n   *\n   * Note:\n   * UTXOs already specified in `collectFrom` will not cause duplication\n   * @default []\n   */\n  presetWalletInputs?: UTxO[];\n};\n\ntype CoinSelectionResult = {\n  selected: UTxO[];\n  burnable: Assets;\n};\n\nexport const completeTxError = (cause: unknown) =>\n  new TxBuilderError({ cause: `{ Complete: ${cause} }` });\n\nexport const complete = (options: CompleteOptions = {}) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const wallet: Wallet = yield* pipe(\n      Effect.fromNullable(config.lucidConfig.wallet),\n      Effect.orElseFail(() => completeTxError(ERROR_MESSAGE.MISSING_WALLET)),\n    );\n    const walletAddress: string = yield* Effect.promise(() => wallet.address());\n\n    // Extract and set default options for the transaction configuration\n    const {\n      coinSelection = true,\n      changeAddress = walletAddress,\n      localUPLCEval = true,\n      setCollateral = 5_000_000n,\n      canonical = false,\n      includeLeftoverLovelaceAsFee = false,\n      presetWalletInputs = [],\n    } = options;\n\n    const walletInputs: UTxO[] =\n      presetWalletInputs.length === 0\n        ? yield* Effect.tryPromise({\n            try: () => wallet.getUtxos(),\n            catch: (error) => completeTxError(error),\n          })\n        : presetWalletInputs;\n\n    // Execute programs sequentially\n    yield* Effect.all(config.programs);\n    const hasPlutusScriptExecutions: boolean = Array.from(\n      config.scripts.values(),\n    ).some((value) => value.type !== \"Native\");\n\n    // First round of coin selection and UPLC evaluation. The fee estimation is lacking\n    // the script execution costs as they aren't available yet.\n    yield* selectionAndEvaluation(\n      walletInputs,\n      changeAddress,\n      coinSelection,\n      localUPLCEval,\n      includeLeftoverLovelaceAsFee,\n      false,\n    );\n    // Second round of coin selection by including script execution costs in fee estimation.\n    // UPLC evaluation need to be performed again if new inputs are selected during coin selection.\n    // Because increasing the inputs can increase the script execution budgets.\n    // Set collateral input if there are script executions\n    if (hasPlutusScriptExecutions) {\n      const minFee = config.txBuilder.min_fee(true);\n      const refScriptFee = yield* calculateMinRefScriptFee(config);\n      let estimatedFee = minFee + refScriptFee;\n\n      const totalCollateral = BigInt(\n        Math.ceil(\n          Math.max(\n            (config.lucidConfig.protocolParameters.collateralPercentage *\n              Number(estimatedFee)) /\n              100,\n            Number(setCollateral),\n          ),\n        ),\n      );\n      const collateralInput = yield* findCollateral(\n        config.lucidConfig.protocolParameters.coinsPerUtxoByte,\n        totalCollateral,\n        walletInputs,\n      );\n      yield* applyCollateral(totalCollateral, collateralInput, changeAddress);\n      yield* selectionAndEvaluation(\n        walletInputs,\n        changeAddress,\n        coinSelection,\n        localUPLCEval,\n        includeLeftoverLovelaceAsFee,\n        true,\n      );\n    }\n    config.txBuilder.add_change_if_needed(\n      CML.Address.from_bech32(changeAddress),\n      true,\n    );\n    const transaction = yield* Effect.try({\n      try: () =>\n        config.txBuilder\n          .build(\n            CML.ChangeSelectionAlgo.Default,\n            CML.Address.from_bech32(changeAddress),\n          )\n          .build_unchecked(),\n      catch: (error) => completeTxError(error),\n    });\n\n    const derivedInputs = deriveInputsFromTransaction(transaction);\n\n    const derivedWalletInputs = derivedInputs.filter(\n      (utxo) => utxo.address === walletAddress,\n    );\n    const updatedWalletInputs = pipe(\n      _Array.differenceWith(isEqualUTxO)(walletInputs, config.consumedInputs),\n      (availableWalletInputs) => [\n        ...derivedWalletInputs,\n        ...availableWalletInputs,\n      ],\n    );\n    return Tuple.make(\n      updatedWalletInputs,\n      derivedInputs,\n      TxSignBuilder.makeTxSignBuilder(\n        config.lucidConfig.wallet,\n        canonical\n          ? CML.Transaction.from_cbor_bytes(\n              transaction.to_canonical_cbor_bytes(),\n            )\n          : transaction,\n      ),\n    );\n  }).pipe(Effect.catchAllDefect((cause) => new RunTimeError({ cause })));\n\nexport const selectionAndEvaluation = (\n  walletInputs: UTxO[],\n  changeAddress: string,\n  coinSelection: boolean,\n  localUPLCEval: boolean,\n  includeLeftoverLovelaceAsFee: boolean,\n  script_calculation: boolean,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const refScriptInputs = config.readInputs.filter(\n      (input) => input.scriptRef,\n    );\n    const availableInputs = _Array.differenceWith(isEqualUTxO)(walletInputs, [\n      ...config.collectedInputs,\n      ...refScriptInputs,\n    ]);\n\n    const { selected: inputsToAdd, burnable } =\n      coinSelection !== false\n        ? yield* doCoinSelection(\n            config,\n            availableInputs,\n            script_calculation,\n            includeLeftoverLovelaceAsFee,\n          )\n        : { selected: [], burnable: { lovelace: 0n } };\n\n    // Skip UPLC evaluation for the second time if no new inputs are added\n    let estimatedFee = 0n;\n    if (_Array.isEmptyArray(inputsToAdd)) {\n      if (script_calculation) return;\n      estimatedFee += burnable.lovelace;\n    }\n    if (_Array.isNonEmptyArray(inputsToAdd)) {\n      for (const utxo of inputsToAdd) {\n        const input = CML.SingleInputBuilder.from_transaction_unspent_output(\n          utxoToCore(utxo),\n        ).payment_key();\n        config.txBuilder.add_input(input);\n      }\n      config.collectedInputs = [...config.collectedInputs, ...inputsToAdd];\n      estimatedFee = yield* estimateFee(config, script_calculation);\n    }\n\n    //NOTE: We need to keep track of all consumed inputs\n    //this is just a patch, and we should find a better way to do this\n    config.consumedInputs = [...config.collectedInputs];\n\n    // Complete partial programs if present by building their redeemers and running them\n    if (config.partialPrograms.size > 0) {\n      // NOTE: Cannot build the redeemers twice as it would lead to duplicate addition of\n      // inputs for \"SPEND\" redeemers. As CML currently does not allow updating redeemer of\n      // an existing input.\n      if (script_calculation) {\n        yield* completeTxError(\n          `RedeemerBuilder: Coin selection had to be updated after building redeemers, possibly leading to incorrect indices. Try setting a minimum fee of ${estimatedFee} lovelaces.`,\n        );\n      } else yield* completePartialPrograms();\n    }\n\n    // Build transaction to begin with UPLC evaluation\n    const txRedeemerBuilder = yield* Effect.try({\n      try: () =>\n        config.txBuilder.build_for_evaluation(\n          0,\n          CML.Address.from_bech32(changeAddress),\n        ),\n      catch: (error) => completeTxError(error),\n    });\n\n    if (txRedeemerBuilder.draft_tx().witness_set().redeemers()) {\n      if (localUPLCEval !== false) {\n        applyUPLCEval(\n          yield* evalTransaction(config, txRedeemerBuilder, walletInputs),\n          config.txBuilder,\n        );\n      } else {\n        applyUPLCEvalProvider(\n          yield* evalTransactionProvider(\n            config,\n            txRedeemerBuilder,\n            walletInputs,\n          ),\n          config.txBuilder,\n        );\n      }\n    }\n  }).pipe(Effect.catchAllDefect((cause) => new RunTimeError({ cause })));\n\n//TODO: This should\nexport const completePartialPrograms = () =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    const sortedInputs = sortUTxOs(config.collectedInputs, \"Canonical\");\n    const indicesMap: Map<string, bigint> = new Map();\n    sortedInputs.forEach((value, index) => {\n      indicesMap.set(value.txHash + value.outputIndex, BigInt(index));\n    });\n    const newPrograms = [];\n\n    // Iterate over all the RedeemerBuilders to construct redeemers\n    // and collect obtained programs\n    for (const [\n      redeemerBuilder,\n      partialProgram,\n    ] of config.partialPrograms.entries()) {\n      if (redeemerBuilder.kind === \"selected\") {\n        const inputIndices = redeemerBuilder.inputs.flatMap((value) => {\n          const index = indicesMap.get(value.txHash + value.outputIndex);\n          if (index !== undefined) return index;\n          else return [];\n        });\n\n        if (\n          _Array.isEmptyArray(inputIndices) ||\n          inputIndices.length !== redeemerBuilder.inputs.length\n        )\n          yield* completeTxError(\n            `RedeemerBuilder: Missing indices for inputs: ${stringify(redeemerBuilder.inputs)}`,\n          );\n\n        const redeemer = redeemerBuilder.makeRedeemer(inputIndices);\n        const program = partialProgram(redeemer);\n        newPrograms.push(program);\n      } else {\n        // For RedeemerBuilder of kind \"self\", construct a unique redeemer\n        // for every UTxO and collect it's program\n        const inputs: UTxO[] = yield* pipe(\n          Effect.fromNullable(redeemerBuilder.inputs),\n          Effect.orElseFail(() =>\n            completeTxError(\n              `RedeemerBuilder: Inputs for redeemer builder not founds: ${stringify(redeemerBuilder)}`,\n            ),\n          ),\n        );\n\n        for (const input of inputs) {\n          const index = yield* pipe(\n            Effect.fromNullable(\n              indicesMap.get(input.txHash + input.outputIndex),\n            ),\n            Effect.orElseFail(() =>\n              completeTxError(`Index not found for input: ${input}`),\n            ),\n          );\n\n          const redeemer = redeemerBuilder.makeRedeemer(index);\n          const program = collectFromUTxO([input], false)(redeemer);\n          newPrograms.push(program);\n        }\n      }\n    }\n    yield* Effect.all(newPrograms);\n  });\n\nexport const applyUPLCEval = (\n  uplcEval: Uint8Array[],\n  txbuilder: CML.TransactionBuilder,\n): void => {\n  for (const bytes of uplcEval) {\n    const redeemer = CML.LegacyRedeemer.from_cbor_bytes(bytes);\n    const exUnits = CML.ExUnits.new(\n      redeemer.ex_units().mem(),\n      redeemer.ex_units().steps(),\n    );\n    txbuilder.set_exunits(\n      CML.RedeemerWitnessKey.new(redeemer.tag(), redeemer.index()),\n      exUnits,\n    );\n  }\n};\n\nexport const applyUPLCEvalProvider = (\n  evalRedeemerList: EvalRedeemer[],\n  txbuilder: CML.TransactionBuilder,\n): void => {\n  for (const evalRedeemer of evalRedeemerList) {\n    const exUnits = CML.ExUnits.new(\n      BigInt(evalRedeemer.ex_units.mem),\n      BigInt(evalRedeemer.ex_units.steps),\n    );\n    txbuilder.set_exunits(\n      CML.RedeemerWitnessKey.new(\n        toCMLRedeemerTag(evalRedeemer.redeemer_tag),\n        BigInt(evalRedeemer.redeemer_index),\n      ),\n      exUnits,\n    );\n  }\n};\n\nexport const setRedeemerstoZero = (tx: CML.Transaction): CML.Transaction => {\n  const redeemers = tx.witness_set().redeemers();\n  if (!redeemers) return tx;\n  const arrLegacyRedeemer = redeemers.as_arr_legacy_redeemer();\n  if (arrLegacyRedeemer) {\n    const redeemerList = CML.LegacyRedeemerList.new();\n    for (let i = 0; i < arrLegacyRedeemer.len(); i++) {\n      const redeemer = arrLegacyRedeemer.get(i);\n      const dummyRedeemer = CML.LegacyRedeemer.new(\n        redeemer.tag(),\n        redeemer.index(),\n        redeemer.data(),\n        CML.ExUnits.new(0n, 0n),\n      );\n      redeemerList.add(dummyRedeemer);\n    }\n\n    const dummyWitnessSet = tx.witness_set();\n    dummyWitnessSet.set_redeemers(\n      CML.Redeemers.new_arr_legacy_redeemer(redeemerList),\n    );\n    return CML.Transaction.new(\n      tx.body(),\n      dummyWitnessSet,\n      true,\n      tx.auxiliary_data(),\n    );\n  }\n  const mapRedeemerKeyToRedeemerVal =\n    redeemers.as_map_redeemer_key_to_redeemer_val();\n  if (mapRedeemerKeyToRedeemerVal) {\n    const dummyWitnessSet = tx.witness_set();\n    dummyWitnessSet.set_redeemers(\n      CML.Redeemers.new_map_redeemer_key_to_redeemer_val(\n        mapRedeemerKeyToRedeemerVal,\n      ),\n    );\n    return CML.Transaction.new(\n      tx.body(),\n      dummyWitnessSet,\n      true,\n      tx.auxiliary_data(),\n    );\n  }\n  return tx;\n};\n\nconst applyCollateral = (\n  setCollateral: bigint,\n  collateralInputs: UTxO[],\n  changeAddress: string,\n) =>\n  Effect.gen(function* () {\n    const { config } = yield* TxConfig;\n    for (const utxo of collateralInputs) {\n      const collateralInput =\n        CML.SingleInputBuilder.from_transaction_unspent_output(\n          utxoToCore(utxo),\n        ).payment_key();\n      config.txBuilder.add_collateral(collateralInput);\n    }\n    const returnassets = pipe(\n      sumAssetsFromInputs(collateralInputs),\n      Record.union({ lovelace: -setCollateral }, _BigInt.sum),\n    );\n\n    const collateralOutputBuilder =\n      CML.TransactionOutputBuilder.new().with_address(\n        CML.Address.from_bech32(changeAddress),\n      );\n    config.txBuilder.set_collateral_return(\n      collateralOutputBuilder\n        .next()\n        .with_value(assetsToValue(returnassets))\n        .build()\n        .output(),\n    );\n  });\n\nconst findCollateral = (\n  coinsPerUtxoByte: bigint,\n  setCollateral: bigint,\n  inputs: UTxO[],\n): Effect.Effect<UTxO[], TxBuilderError, never> =>\n  Effect.gen(function* () {\n    // NOTE: While the required collateral is 5 ADA, there may be instances where the UTXOs encountered do not contain enough ADA to be returned to the collateral return address.\n    // For example:\n    // A UTXO with 5.5 ADA will result in an error message such as `BabbageOutputTooSmallUTxO`, since only 0.5 ADA would be returned to the collateral return address.\n    const collateralLovelace: Assets = { lovelace: setCollateral };\n    const error = completeTxError(\n      `Your wallet does not have enough funds to cover the required ${setCollateral} Lovelace collateral. Or it contains UTxOs with reference scripts; which\n      are excluded from collateral selection.`,\n    );\n    const { selected } = yield* recursive(\n      sortUTxOs(inputs),\n      collateralLovelace,\n      coinsPerUtxoByte,\n      undefined,\n      false,\n      error,\n    );\n    if (selected.length > 3)\n      yield* completeTxError(\n        `Selected ${selected.length} inputs as collateral, but max collateral inputs is 3 to cover the ${setCollateral} Lovelace collateral ${stringify(selected)}`,\n      );\n    return selected;\n  });\n\nconst doCoinSelection = (\n  config: TxBuilder.TxBuilderConfig,\n  availableInputs: UTxO[],\n  script_calculation: boolean,\n  includeLeftoverLovelaceAsFee: boolean,\n): Effect.Effect<{ selected: UTxO[]; burnable: Assets }, TxBuilderError> =>\n  Effect.gen(function* () {\n    // NOTE: This is a fee estimation. If the amount is not enough, it may require increasing the fee.\n    const estimatedFee: Assets = {\n      lovelace: yield* estimateFee(config, script_calculation),\n    };\n\n    const negatedMintedAssets = negateAssets(config.mintedAssets);\n    const negatedCollectedAssets = negateAssets(\n      sumAssetsFromInputs(config.collectedInputs),\n    );\n\n    // Calculate the net change in assets (delta)\n    const assetsDelta: Assets = pipe(\n      config.totalOutputAssets,\n      Record.union(estimatedFee, _BigInt.sum),\n      Record.union(negatedCollectedAssets, _BigInt.sum),\n      Record.union(negatedMintedAssets, _BigInt.sum),\n    );\n    // Filter and obtain only the required assets (those with a positive amount)\n    let requiredAssets = pipe(\n      assetsDelta,\n      Record.filter((amount) => amount > 0n),\n    );\n    // Filter and obtain assets that are present in the inputs and mints but are not required by the outputs\n    // Negate these assets to get their positive amounts\n    const notRequiredAssets = pipe(\n      assetsDelta,\n      Record.filter((amount) => amount < 0n),\n      negateAssets,\n    );\n\n    // Note: We are not done with coin selection even if \"requiredAssets\" is empty.\n    // Because \"notRequiredAssets\" may not contain enough ADA to cover for minimum Ada requirement\n    // when they need to be sent as change output. Hence, we allow for \"recursive\" to be invoked.\n    return yield* recursive(\n      sortUTxOs(availableInputs),\n      requiredAssets,\n      config.lucidConfig.protocolParameters.coinsPerUtxoByte,\n      notRequiredAssets,\n      includeLeftoverLovelaceAsFee,\n    );\n  });\n\n/**\n * Estimate total transaction fee and set it in CML.TransactionBuilder if required\n * @param config\n * @param script_calculation\n * @returns estimated fee\n */\nconst estimateFee = (\n  config: TxBuilder.TxBuilderConfig,\n  script_calculation: boolean,\n): Effect.Effect<bigint, TxBuilderError, never> =>\n  Effect.gen(function* () {\n    const minFee = config.txBuilder.min_fee(script_calculation);\n    const refScriptFee = yield* calculateMinRefScriptFee(config);\n    let estimatedFee = minFee + refScriptFee;\n    const customMinFee = config.minFee;\n\n    if (\n      (customMinFee !== undefined && customMinFee > minFee) ||\n      refScriptFee > 0n\n    ) {\n      estimatedFee = customMinFee\n        ? customMinFee > estimatedFee\n          ? customMinFee\n          : estimatedFee\n        : estimatedFee;\n\n      config.txBuilder.set_fee(estimatedFee);\n    }\n    return estimatedFee;\n  });\n\nconst evalTransactionProvider = (\n  config: TxBuilder.TxBuilderConfig,\n  txRedeemerBuilder: CML.TxRedeemerBuilder,\n  walletInputs: UTxO[],\n): Effect.Effect<EvalRedeemer[], TxBuilderError> =>\n  Effect.gen(function* () {\n    const txEvaluation = setRedeemerstoZero(txRedeemerBuilder.draft_tx())!;\n    // Normalize UTXOs that include both a datum and a datumHash.\n    // If a datumHash is present, the datum field is removed.\n    // This ensures consistency when preparing UTXOs for evaluation.\n    const txUtxos = [...config.collectedInputs, ...config.readInputs].map(\n      ({ datumHash, datum, ...rest }) => ({\n        ...rest,\n        datumHash,\n        datum: datumHash ? undefined : datum,\n      }),\n    );\n    const uplc_eval = yield* Effect.tryPromise({\n      try: () =>\n        config.lucidConfig.provider.evaluateTx(\n          txEvaluation.to_cbor_hex(),\n          txUtxos,\n        ),\n      catch: (error) => completeTxError(error),\n    });\n    return uplc_eval;\n  });\n\nconst evalTransaction = (\n  config: TxBuilder.TxBuilderConfig,\n  txRedeemerBuilder: CML.TxRedeemerBuilder,\n  walletInputs: UTxO[],\n): Effect.Effect<Uint8Array[], TxBuilderError> =>\n  Effect.gen(function* () {\n    const txEvaluation = setRedeemerstoZero(txRedeemerBuilder.draft_tx())!;\n    // Normalize UTXOs that include both a datum and a datumHash.\n    // If a datumHash is present, the datum field is removed.\n    // This ensures consistency when preparing UTXOs for evaluation.\n    const txUtxos = [\n      ...walletInputs,\n      ...config.collectedInputs,\n      ...config.readInputs,\n    ].map(({ datumHash, datum, ...rest }) => ({\n      ...rest,\n      datumHash,\n      datum: datumHash ? undefined : datum,\n    }));\n    const ins = txUtxos.map((utxo) => utxoToTransactionInput(utxo));\n    const outs = txUtxos.map((utxo) => utxoToTransactionOutput(utxo));\n    const slotConfig = SLOT_CONFIG_NETWORK[config.lucidConfig.network];\n    const uplc_eval: Uint8Array[] = yield* Effect.try({\n      try: () =>\n        UPLC.eval_phase_two_raw(\n          txEvaluation.to_cbor_bytes(),\n          ins.map((value) => value.to_cbor_bytes()),\n          outs.map((value) => value.to_cbor_bytes()),\n          config.lucidConfig.costModels.to_cbor_bytes(),\n          config.lucidConfig.protocolParameters.maxTxExSteps,\n          config.lucidConfig.protocolParameters.maxTxExMem,\n          BigInt(slotConfig.zeroTime),\n          BigInt(slotConfig.zeroSlot),\n          slotConfig.slotLength,\n        ),\n      catch: (error) =>\n        completeTxError(\n          `${\n            isError(error)\n              ? error\n              : JSON.stringify(error)\n                  .replace(/\\\\n\\s*/g, \" \")\n                  .trim()\n          }`,\n        ),\n    });\n    return uplc_eval;\n  });\n\nconst calculateMinLovelace = (\n  coinsPerUtxoByte: bigint,\n  multiAssets?: Assets,\n  changeAddress?: string,\n): bigint => {\n  const dummyAddress =\n    \"addr_test1qrngfyc452vy4twdrepdjc50d4kvqutgt0hs9w6j2qhcdjfx0gpv7rsrjtxv97rplyz3ymyaqdwqa635zrcdena94ljs0xy950\";\n  return CML.TransactionOutputBuilder.new()\n    .with_address(\n      CML.Address.from_bech32(changeAddress ? changeAddress : dummyAddress),\n    )\n    .next()\n    .with_asset_and_min_required_coin(\n      multiAssets\n        ? assetsToValue(multiAssets).multi_asset()\n        : CML.MultiAsset.new(),\n      coinsPerUtxoByte,\n    )\n    .build()\n    .output()\n    .amount()\n    .coin();\n};\n\nconst calculateMinRefScriptFee = (\n  config: TxBuilder.TxBuilderConfig,\n): Effect.Effect<bigint, TxBuilderError, never> =>\n  Effect.gen(function* () {\n    let fee = 0n;\n    let totalScriptSize = 0;\n\n    for (const utxo of config.readInputs) {\n      if (utxo.scriptRef) {\n        totalScriptSize = totalScriptSize + utxo.scriptRef.script.length / 2;\n      }\n    }\n    for (const utxo of config.collectedInputs) {\n      if (utxo.scriptRef) {\n        totalScriptSize = totalScriptSize + utxo.scriptRef.script.length / 2;\n      }\n    }\n    if (totalScriptSize === 0) return fee;\n\n    const fees = [15.0, 18.0, 21.6, 25.92, 31.1, 37.32, 44.79, 53.75];\n\n    let counter = 0;\n    while (totalScriptSize > 0) {\n      if (counter > fees.length - 1) {\n        yield* completeTxError(\n          \"Total reference script size in a transaction cannot exceed 200,000 bytes.\",\n        );\n      }\n\n      if (totalScriptSize > 25000)\n        fee = fee + BigInt(Math.ceil(25000 * fees[counter]));\n      else fee = fee + BigInt(Math.ceil(totalScriptSize * fees[counter]));\n      totalScriptSize = totalScriptSize - 25000;\n      counter++;\n    }\n    return fee;\n  });\n\nconst deriveInputsFromTransaction = (tx: CML.Transaction): UTxO[] => {\n  const outputs = tx.body().outputs();\n  const txHash = CML.hash_transaction(tx.body()).to_hex();\n  const utxos: UTxO[] = [];\n  for (let index = 0; index < outputs.len(); index++) {\n    const output = outputs.get(index);\n    const utxo: UTxO = {\n      txHash: txHash,\n      outputIndex: index,\n      ...coreToTxOutput(output),\n    };\n    utxos.push(utxo);\n  }\n  return utxos;\n};\n\n/**\n * Returns a new `Assets`\n *\n * Negates the amounts of all assets in the given record.\n */\nconst negateAssets = (assets: Assets): Assets =>\n  Record.map(assets, (amount) => -amount);\n\n/**\n * Returns a new Assets\n *\n * Sums the assets from an array of UTxO inputs.\n */\nconst sumAssetsFromInputs = (inputs: UTxO[]) =>\n  _Array.isEmptyArray(inputs)\n    ? {}\n    : inputs\n        .map((utxo) => utxo.assets)\n        .reduce((acc, cur) => Record.union(acc, cur, _BigInt.sum));\n\nconst calculateExtraLovelace = (\n  leftoverAssets: Assets,\n  coinsPerUtxoByte: bigint,\n): Option.Option<Assets> => {\n  return pipe(leftoverAssets, (assets) => {\n    const minLovelace = calculateMinLovelace(coinsPerUtxoByte, assets);\n    const currentLovelace = assets[\"lovelace\"] || 0n;\n    return currentLovelace >= minLovelace\n      ? Option.none()\n      : Option.some({ lovelace: minLovelace - currentLovelace });\n  });\n};\n\n/**\n * Performs coin selection to obtain the \"requiredAssets\" and then carries out\n * recursive coin selection to ensure that leftover assets (selectedAssets + externalAssets - requiredAssets)\n * have enough ADA to satisfy minimum ADA requirement for them to be sent as change output.\n * If \"requiredAssets\" is empty, it still checks for minimum ADA requirement of \"externalAssets\"\n * and does coin selection if required.\n * @param inputs\n * @param requiredAssets\n * @param coinsPerUtxoByte\n * @param externalAssets\n * @param error\n * @returns\n */\nexport const recursive = (\n  inputs: UTxO[],\n  requiredAssets: Assets,\n  coinsPerUtxoByte: bigint,\n  externalAssets: Assets = {},\n  includeLeftoverLovelaceAsFee?: boolean,\n  error?: TxBuilderError,\n): Effect.Effect<CoinSelectionResult, TxBuilderError> =>\n  Effect.gen(function* () {\n    let selected: UTxO[] = [];\n    error ??= completeTxError(\n      `Your wallet does not have enough funds to cover the required assets: ${stringify(requiredAssets)}\n      Or it contains UTxOs with reference scripts; which are excluded from coin selection.`,\n    );\n    if (!Record.isEmptyRecord(requiredAssets)) {\n      selected = selectUTxOs(inputs, requiredAssets, true);\n      if (_Array.isEmptyArray(selected)) yield* error;\n    }\n\n    const selectedAssets: Assets = sumAssetsFromInputs(selected);\n    let availableAssets: Assets = pipe(\n      selectedAssets,\n      Record.union(requiredAssets, (self, that) => self - that),\n      Record.union(externalAssets, _BigInt.sum),\n    );\n\n    let extraLovelace: Assets | undefined = pipe(\n      calculateExtraLovelace(availableAssets, coinsPerUtxoByte),\n      Option.getOrUndefined,\n    );\n    let remainingInputs = inputs;\n\n    while (extraLovelace) {\n      remainingInputs = _Array.differenceWith(isEqualUTxO)(\n        remainingInputs,\n        selected,\n      );\n\n      const extraSelected = selectUTxOs(remainingInputs, extraLovelace, true);\n      if (_Array.isEmptyArray(extraSelected)) {\n        if (includeLeftoverLovelaceAsFee)\n          return { selected: [...selected], burnable: extraLovelace };\n        yield* completeTxError(\n          `Your wallet does not have enough funds to cover required minimum ADA for change output: ${stringify(extraLovelace)}\n          Or it contains UTxOs with reference scripts; which are excluded from coin selection.`,\n        );\n      }\n      const extraSelectedAssets: Assets = sumAssetsFromInputs(extraSelected);\n      selected = [...selected, ...extraSelected];\n      availableAssets = Record.union(\n        availableAssets,\n        extraSelectedAssets,\n        _BigInt.sum,\n      );\n\n      extraLovelace = pipe(\n        calculateExtraLovelace(availableAssets, coinsPerUtxoByte),\n        Option.getOrUndefined,\n      );\n    }\n    return { selected, burnable: { lovelace: 0n } };\n  });\n","import { CML, makeReturn } from \"../core.js\";\nimport { LucidConfig } from \"../lucid-evolution/LucidEvolution.js\";\nimport { Effect } from \"effect\";\nimport * as S from \"@effect/schema/Schema\";\n//TODO: move to commont utils\nimport {\n  PrivateKey,\n  TransactionWitnesses,\n  Wallet,\n} from \"@lucid-evolution/core-types\";\nimport { TransactionSignError } from \"../Errors.js\";\nimport { TxSigned } from \"../tx-submit/TxSubmit.js\";\nimport * as CompleteTxSigner from \"./internal/CompleteTxSigner.js\";\nimport { Either } from \"effect/Either\";\nimport * as Sign from \"./internal/Sign.js\";\nimport { CBORHex, Hash } from \"../tx-builder/types.js\";\n\nexport interface TxSignBuilderConfig {\n  txComplete: CML.Transaction;\n  witnessSetBuilder: CML.TransactionWitnessSetBuilder;\n  programs: Effect.Effect<void, TransactionSignError, never>[];\n  wallet: Wallet | undefined;\n  fee: number;\n  exUnits: { cpu: number; mem: number } | null;\n}\n\nexport interface TxSignBuilder {\n  sign: {\n    /** Signs the transaction with a wallet. */\n    withWallet: () => TxSignBuilder;\n    /** Signs the transaction with a private key. */\n    withPrivateKey: (privateKey: PrivateKey) => TxSignBuilder;\n  };\n  partialSign: {\n    /** Partially signs the transaction with a wallet. */\n    withWallet: () => Promise<TransactionWitnesses>;\n    /** Partially signs the transaction with a wallet and returns an effect. */\n    withWalletEffect: () => Effect.Effect<\n      TransactionWitnesses,\n      TransactionSignError\n    >;\n    /** Safely partially signs the transaction with a wallet. */\n    withWalletSafe: () => Promise<\n      Either<TransactionWitnesses, TransactionSignError>\n    >;\n    /** Partially signs the transaction with a private key. */\n    withPrivateKey: (privateKey: PrivateKey) => Promise<TransactionWitnesses>;\n    /** Partially signs the transaction with a private key and returns an effect. */\n    withPrivateKeyEffect: (\n      privateKey: PrivateKey,\n    ) => Effect.Effect<TransactionWitnesses, TransactionSignError>;\n    /** Safely partially signs the transaction with a private key. */\n    withPrivateKeySafe: (\n      privateKey: PrivateKey,\n    ) => Promise<Either<TransactionWitnesses, TransactionSignError>>;\n  };\n  /** Assembles the transaction with the given witnesses.  */\n  assemble: (witnesses: TransactionWitnesses[]) => TxSignBuilder;\n  /**\n   * Converts the transaction to CBOR (Concise Binary Object Representation) format.\n   *\n   * Supports both canonical and non-canonical formats.\n   *\n   * Canonical format follows [RFC 7049 Section 3.9](https://datatracker.ietf.org/doc/html/rfc7049#section-3.9) rules\n   *\n   * Non-canonical format example:\n   * ```typescript\n   * .toCBOR();\n   * ```\n   * Canonical format example:\n   * ```typescript\n   * .toCBOR({ canonical: true });\n   * ```\n   */\n  toCBOR: (options?: { canonical: boolean }) => CBORHex;\n  toTransaction: () => CML.Transaction;\n  /** Converts the transaction body to JSON format. */\n  toJSON: () => object;\n  /** Computes the hash of the transaction body. */\n  toHash: () => Hash;\n  complete: () => Promise<TxSigned>;\n  /** Completes the transaction and returns an effect. */\n  completeProgram: () => Effect.Effect<TxSigned, TransactionSignError, never>;\n  /** Safely completes the transaction. */\n  completeSafe: () => Promise<Either<TxSigned, TransactionSignError>>;\n}\n\nexport const makeTxSignBuilder = (\n  wallet: Wallet | undefined,\n  tx: CML.Transaction,\n): TxSignBuilder => {\n  const redeemers = tx.witness_set().redeemers();\n  const exUnits = { cpu: 0, mem: 0 };\n  if (redeemers) {\n    const arrLegacyRedeemer = redeemers?.as_arr_legacy_redeemer();\n    if (arrLegacyRedeemer) {\n      for (let i = 0; i < arrLegacyRedeemer.len(); i++) {\n        const redeemer = arrLegacyRedeemer.get(i);\n        exUnits.cpu += parseInt(redeemer.ex_units().steps().toString());\n        exUnits.mem += parseInt(redeemer.ex_units().mem().toString());\n      }\n    }\n    const mapRedeemerKeyToRedeemerVal =\n      redeemers?.as_map_redeemer_key_to_redeemer_val();\n    if (mapRedeemerKeyToRedeemerVal) {\n      const keys = mapRedeemerKeyToRedeemerVal.keys();\n      for (let i = 0; i < (keys.len() || 0); i++) {\n        const key = keys.get(i);\n        const value = mapRedeemerKeyToRedeemerVal.get(key);\n        exUnits.cpu += parseInt(value!.ex_units().steps().toString());\n        exUnits.mem += parseInt(value!.ex_units().mem().toString());\n      }\n    }\n  }\n  const config: TxSignBuilderConfig = {\n    txComplete: tx,\n    witnessSetBuilder: CML.TransactionWitnessSetBuilder.new(),\n    programs: [],\n    wallet: wallet,\n    fee: parseInt(tx.body().fee().toString()),\n    exUnits: exUnits,\n  };\n\n  const txSignBuilder: TxSignBuilder = {\n    sign: {\n      withWallet: () => {\n        const program = Sign.withWallet(config);\n        config.programs.push(program);\n        return txSignBuilder;\n      },\n      withPrivateKey: (privateKey: PrivateKey) => {\n        const program = Sign.withPrivateKey(config, privateKey);\n        config.programs.push(program);\n        return txSignBuilder;\n      },\n    },\n    partialSign: {\n      withWallet: () => makeReturn(Sign.partialWithWallet(config)).unsafeRun(),\n      withWalletEffect: () => Sign.partialWithWallet(config),\n      withWalletSafe: () =>\n        makeReturn(Sign.partialWithWallet(config)).safeRun(),\n      withPrivateKey: (privateKey: PrivateKey) =>\n        makeReturn(Sign.partialWithPrivateKey(config, privateKey)).unsafeRun(),\n      withPrivateKeyEffect: (privateKey: PrivateKey) =>\n        Sign.partialWithPrivateKey(config, privateKey),\n      withPrivateKeySafe: (privateKey: PrivateKey) =>\n        makeReturn(Sign.partialWithPrivateKey(config, privateKey)).safeRun(),\n    },\n    assemble: (witnesses: TransactionWitnesses[]) => {\n      const program = Sign.assemble(config, witnesses);\n      config.programs.push(program);\n      return txSignBuilder;\n    },\n    toCBOR: (options = { canonical: false }) =>\n      options.canonical\n        ? config.txComplete.to_canonical_cbor_hex()\n        : config.txComplete.to_cbor_hex(),\n    toTransaction: () => config.txComplete,\n    toJSON: () =>\n      S.decodeUnknownSync(S.parseJson(S.Object))(config.txComplete.to_json()),\n    toHash: () => CML.hash_transaction(config.txComplete.body()).to_hex(),\n    complete: () =>\n      makeReturn(CompleteTxSigner.completeTxSigner(config)).unsafeRun(),\n    completeProgram: () => CompleteTxSigner.completeTxSigner(config),\n    completeSafe: () =>\n      makeReturn(CompleteTxSigner.completeTxSigner(config)).safeRun(),\n  };\n  return txSignBuilder;\n};\n","import { Effect, pipe } from \"effect\";\nimport { CML } from \"../../core.js\";\nimport {\n  ERROR_MESSAGE,\n  RunTimeError,\n  TransactionSignError,\n} from \"../../Errors.js\";\nimport * as TxSignBuilder from \"../TxSignBuilder.js\";\nimport * as TxSubmitBuilder from \"../../tx-submit/TxSubmit.js\";\nimport { signError } from \"./Sign.js\";\n\nexport const completeTxSigner = (\n  config: TxSignBuilder.TxSignBuilderConfig,\n): Effect.Effect<TxSubmitBuilder.TxSigned, TransactionSignError> =>\n  Effect.gen(function* () {\n    yield* Effect.all(config.programs, { concurrency: \"unbounded\" });\n    const plutus_datums = config.txComplete.witness_set().plutus_datums();\n    // TODO: currently add_existing does not support add_plutus_datums\n    // https://github.com/dcSpark/cardano-multiplatform-lib/pull/350/files\n    config.witnessSetBuilder.add_existing(config.txComplete.witness_set());\n    if (plutus_datums) {\n      for (let i = 0; i < plutus_datums.len(); i++) {\n        config.witnessSetBuilder.add_plutus_datum(plutus_datums.get(i));\n      }\n    }\n    const txWitnessSet = config.witnessSetBuilder.build();\n    const signedTx = CML.Transaction.new(\n      config.txComplete.body(),\n      txWitnessSet,\n      true,\n      config.txComplete.auxiliary_data(),\n    );\n    const wallet = yield* pipe(\n      Effect.fromNullable(config.wallet),\n      Effect.orElseFail(() => signError(ERROR_MESSAGE.MISSING_WALLET)),\n    );\n    return TxSubmitBuilder.makeSubmit(wallet, signedTx);\n  }).pipe(Effect.catchAllDefect((cause) => new RunTimeError({ cause })));\n","import { Effect } from \"effect\";\nimport * as S from \"@effect/schema/Schema\";\nimport { CML, makeReturn } from \"../core.js\";\nimport { Wallet } from \"@lucid-evolution/core-types\";\nimport { Either } from \"effect/Either\";\nimport { TxSubmitError } from \"../Errors.js\";\nimport { CBORHex, Hash } from \"../tx-builder/types.js\";\n\nexport interface TxSigned {\n  /** Submits the transaction and returns the transaction hash.\n   *\n   * Supports both canonical and non-canonical formats.\n   *\n   * Canonical format follows [RFC 7049 Section 3.9](https://datatracker.ietf.org/doc/html/rfc7049#section-3.9) rules\n   *\n   * Non-canonical format example:\n   * ```typescript\n   * .submit();\n   * ```\n   * Canonical format example:\n   * ```typescript\n   * .submit({ canonical: true });\n   * ```\n   */\n  submit: (options?: { canonical: boolean }) => Promise<string>;\n\n  /** Submits the transaction and returns the transaction hash or error as an effect.\n   *\n   * Supports both canonical and non-canonical formats.\n   *\n   * Canonical format follows [RFC 7049 Section 3.9](https://datatracker.ietf.org/doc/html/rfc7049#section-3.9) rules\n   *\n   * Non-canonical format example:\n   * ```typescript\n   * .submitProgram();\n   * ```\n   * Canonical format example:\n   * ```typescript\n   * .submitProgram({ canonical: true });\n   * ```\n   */\n  submitProgram: (options?: {\n    canonical: boolean;\n  }) => Effect.Effect<string, TxSubmitError, never>;\n\n  /** Safely submits the transaction, returning the transaction hash or an error as promise either type.\n   *\n   * Supports both canonical and non-canonical formats.\n   *\n   * Canonical format follows [RFC 7049 Section 3.9](https://datatracker.ietf.org/doc/html/rfc7049#section-3.9) rules\n   *\n   * Non-canonical format example:\n   * ```typescript\n   * .submitSafe();\n   * ```\n   * Canonical format example:\n   * ```typescript\n   * .submitSafe({ canonical: true });\n   * ```\n   */\n  submitSafe: (options?: {\n    canonical: boolean;\n  }) => Promise<Either<string, TxSubmitError>>;\n\n  /**\n   * Converts the transaction to CBOR (Concise Binary Object Representation) format.\n   *\n   * Supports both canonical and non-canonical formats.\n   *\n   * Canonical format follows [RFC 7049 Section 3.9](https://datatracker.ietf.org/doc/html/rfc7049#section-3.9) rules\n   *\n   * Non-canonical format example:\n   * ```typescript\n   * .toCBOR();\n   * ```\n   * Canonical format example:\n   * ```typescript\n   * .toCBOR({ canonical: true });\n   * ```\n   */\n  toCBOR: (options?: { canonical: boolean }) => CBORHex;\n  toTransaction: () => CML.Transaction;\n  /** Converts the transaction (transaction body and witnesses) to JSON format. */\n  toJSON: () => object;\n  /** Computes the hash of the transaction. */\n  toHash: () => Hash;\n}\nexport const makeSubmit = (\n  wallet: Wallet,\n  txSigned: CML.Transaction,\n): TxSigned => {\n  const submit = (options: { canonical: boolean }) =>\n    Effect.tryPromise({\n      try: () =>\n        wallet.submitTx(\n          options.canonical\n            ? txSigned.to_canonical_cbor_hex()\n            : txSigned.to_cbor_hex(),\n        ),\n      catch: (cause) => new TxSubmitError({ cause }),\n    });\n  return {\n    submit: (options = { canonical: false }) =>\n      makeReturn(submit(options)).unsafeRun(),\n    submitProgram: (options = { canonical: false }) => submit(options),\n    submitSafe: (options = { canonical: false }) =>\n      makeReturn(submit(options)).safeRun(),\n    toCBOR: (options = { canonical: false }) =>\n      options.canonical\n        ? txSigned.to_canonical_cbor_hex()\n        : txSigned.to_cbor_hex(),\n    toTransaction: () => txSigned,\n    toJSON: () =>\n      S.decodeUnknownSync(S.parseJson(S.Object))(txSigned.to_json()),\n    toHash: () => CML.hash_transaction(txSigned.body()).to_hex(),\n  };\n};\n","import { Effect, pipe } from \"effect\";\nimport { ERROR_MESSAGE, TxSignerError } from \"../../Errors.js\";\nimport * as TxSignBuilder from \"../TxSignBuilder.js\";\nimport {\n  PrivateKey,\n  TransactionWitnesses,\n  Wallet,\n} from \"@lucid-evolution/core-types\";\nimport { CML } from \"../../core.js\";\n\nexport const signError = (cause: unknown) => new TxSignerError({ cause });\n\nconst mkWitnessFromWallet = (\n  wallet: Wallet | undefined,\n  txComplete: CML.Transaction,\n): Effect.Effect<CML.TransactionWitnessSet, TxSignerError, never> =>\n  pipe(\n    Effect.fromNullable(wallet),\n    Effect.catchAll(() => signError(ERROR_MESSAGE.MISSING_WALLET)),\n    Effect.tryMapPromise({\n      try: (wallet) => wallet.signTx(txComplete),\n      catch: (cause) => signError(cause),\n    }),\n  );\n\nexport const withWallet = (\n  config: TxSignBuilder.TxSignBuilderConfig,\n): Effect.Effect<void, TxSignerError, never> =>\n  pipe(\n    mkWitnessFromWallet(config.wallet, config.txComplete),\n    Effect.map((witness) => config.witnessSetBuilder.add_existing(witness)),\n  );\n\nexport const partialWithWallet = (\n  config: TxSignBuilder.TxSignBuilderConfig,\n): Effect.Effect<TransactionWitnesses, TxSignerError> =>\n  pipe(\n    mkWitnessFromWallet(config.wallet, config.txComplete),\n    Effect.map((witness) => witness.to_cbor_hex()),\n  );\n\nconst mkWitnessFromPrivateKey = (\n  privateKey: PrivateKey,\n  txComplete: CML.Transaction,\n) =>\n  pipe(\n    Effect.try({\n      try: () => CML.PrivateKey.from_bech32(privateKey),\n      catch: signError,\n    }),\n    Effect.map((privateKey) =>\n      CML.make_vkey_witness(\n        CML.hash_transaction(txComplete.body()),\n        privateKey,\n      ),\n    ),\n  );\n\nexport const withPrivateKey = (\n  config: TxSignBuilder.TxSignBuilderConfig,\n  privateKey: PrivateKey,\n) =>\n  pipe(\n    mkWitnessFromPrivateKey(privateKey, config.txComplete),\n    Effect.map((witness) => config.witnessSetBuilder.add_vkey(witness)),\n  );\n\nexport const partialWithPrivateKey = (\n  config: TxSignBuilder.TxSignBuilderConfig,\n  privateKey: PrivateKey,\n) =>\n  pipe(\n    mkWitnessFromPrivateKey(privateKey, config.txComplete),\n    Effect.map((witness) => {\n      const witnessBuilder = CML.TransactionWitnessSetBuilder.new();\n      witnessBuilder.add_vkey(witness);\n      return witnessBuilder.build().to_cbor_hex();\n    }),\n  );\n\nexport const assemble = (\n  config: TxSignBuilder.TxSignBuilderConfig,\n  witnesses: TransactionWitnesses[],\n) =>\n  Effect.forEach(witnesses, (witness) =>\n    pipe(\n      Effect.try({\n        try: () => CML.TransactionWitnessSet.from_cbor_hex(witness),\n        catch: signError,\n      }),\n      Effect.map((witness) => config.witnessSetBuilder.add_existing(witness)),\n    ),\n  );\n","import { CML, makeReturn } from \"../core.js\";\nimport { LucidConfig } from \"../lucid-evolution/LucidEvolution.js\";\nimport { OutputDatum } from \"./types.js\";\nimport {\n  Address,\n  Anchor,\n  Assets,\n  DRep,\n  Label,\n  Lovelace,\n  PaymentKeyHash,\n  PoolId,\n  Redeemer,\n  RedeemerBuilder,\n  RewardAddress,\n  Script,\n  ScriptType,\n  StakeKeyHash,\n  TxOutput,\n  Unit,\n  UTxO,\n} from \"@lucid-evolution/core-types\";\nimport * as Collect from \"./internal/Collect.js\";\nimport * as Read from \"./internal/Read.js\";\nimport * as Attach from \"./internal/Attach.js\";\nimport * as Pay from \"./internal/Pay.js\";\nimport * as Mint from \"./internal/Mint.js\";\nimport * as Interval from \"./internal/Interval.js\";\nimport * as Signer from \"./internal/Signer.js\";\nimport * as Stake from \"./internal/Stake.js\";\nimport * as Pool from \"./internal/Pool.js\";\nimport * as Governance from \"./internal/Governance.js\";\nimport * as Metadata from \"./internal/Metadata.js\";\nimport * as CompleteTxBuilder from \"./internal/CompleteTxBuilder.js\";\nimport * as TxSignBuilder from \"../tx-sign-builder/TxSignBuilder.js\";\nimport { TransactionError } from \"../Errors.js\";\nimport { Either } from \"effect/Either\";\nimport { Effect, Layer, pipe } from \"effect\";\nimport { handleRedeemerBuilder } from \"./internal/TxUtils.js\";\nimport { addAssets } from \"@lucid-evolution/utils\";\nimport { TxConfig } from \"./internal/Service.js\";\n\nexport type TxBuilderConfig = {\n  readonly lucidConfig: LucidConfig;\n  readonly txBuilder: CML.TransactionBuilder;\n  walletInputs: UTxO[];\n  collectedInputs: UTxO[];\n  readInputs: UTxO[];\n  consumedInputs: UTxO[];\n  totalOutputAssets: Assets;\n  payToOutputs: TxOutput[];\n  mintedAssets: Assets;\n  scripts: Map<string, { type: ScriptType; script: string }>;\n  programs: Effect.Effect<void, TransactionError, TxConfig>[];\n  partialPrograms: Map<\n    RedeemerBuilder,\n    (redeemer?: string) => Effect.Effect<void, TransactionError, TxConfig>\n  >;\n  minFee: bigint | undefined;\n};\n\nexport type TxBuilder = {\n  readFrom: (utxos: UTxO[]) => TxBuilder;\n  collectFrom: (\n    utxos: UTxO[],\n    redeemer?: string | RedeemerBuilder,\n  ) => TxBuilder;\n  pay: {\n    ToAddress: (address: string, assets: Assets) => TxBuilder;\n    /**\n     * Creates an output that lock funds to a target address, with optional parameters for attaching a datum, assets, and a reference script.\n     *\n     * **Warning:** When working with Plutus V1 or V2 contracts, omitting the `outputDatum` can result in a permanently locked UTXO.\n     *\n     * @example\n     * ```ts\n     * const refScript: Script = {\n     *   type: \"PlutusV3\",\n     *   script: \"450100002499\",\n     *  };\n     *\n     * const signBuilder = await user\n     *   .newTx()\n     *   .pay.ToAddressWithData(\n     *     \"addr1q98wl3hnya9l94rt58ky533deyqe9t8zz5n9su26k8e5g23yar4q0adtaax9q9g0kphpv2ws7vxqwu6ln6pqx7j29nfqsfy9mg\",\n     *     {\n     *       kind: \"inline\",\n     *       value: \"d8799f44deadbeefff\",\n     *     },\n     *     { lovelace: 10_000_000n },\n     *     refScript\n     *   )\n     *   .complete();\n     * ```\n     */\n    ToAddressWithData: (\n      address: string,\n      outputDatum?: OutputDatum,\n      assets?: Assets | undefined,\n      scriptRef?: Script | undefined,\n    ) => TxBuilder;\n    /**\n     * Creates an output that lock funds to a target address, with optional parameters for attaching a datum, assets, and a reference script.\n     *\n     * **Warning:** When working with Plutus V1 or V2 contracts, omitting the `outputDatum` can result in a permanently locked UTXO.\n     *\n     * @example\n     * ```ts\n     * const refScript: Script = {\n     *   type: \"PlutusV3\",\n     *   script: \"450100002499\",\n     *  };\n     *\n     * const signBuilder = await user\n     *   .newTx()\n     *   .pay.ToContract(\n     *     \"addr1q98wl3hnya9l94rt58ky533deyqe9t8zz5n9su26k8e5g23yar4q0adtaax9q9g0kphpv2ws7vxqwu6ln6pqx7j29nfqsfy9mg\",\n     *     {\n     *       kind: \"inline\",\n     *       value: \"d8799f44deadbeefff\",\n     *     },\n     *     { lovelace: 10_000_000n },\n     *     refScript\n     *   )\n     *   .complete();\n     * ```\n     */\n    ToContract: (\n      address: string,\n      outputDatum?: OutputDatum,\n      assets?: Assets | undefined,\n      scriptRef?: Script | undefined,\n    ) => TxBuilder;\n  };\n  addSigner: (address: Address | RewardAddress) => TxBuilder;\n  addSignerKey: (keyHash: PaymentKeyHash | StakeKeyHash) => TxBuilder;\n  /**\n   * NOTE: Deprecate in future version\n   */\n  registerStake: (rewardAddress: RewardAddress) => TxBuilder;\n  /**\n   * NOTE: Deprecate in future version\n   */\n  deRegisterStake: (\n    rewardAddress: RewardAddress,\n    redeemer?: string,\n  ) => TxBuilder;\n  withdraw: (\n    rewardAddress: RewardAddress,\n    amount: Lovelace,\n    redeemer?: string | RedeemerBuilder,\n  ) => TxBuilder;\n  register: {\n    Stake: (rewardAddress: RewardAddress) => TxBuilder;\n    DRep: (\n      rewardAddress: RewardAddress,\n      anchor?: Anchor,\n      redeemer?: string,\n    ) => TxBuilder;\n  };\n  deregister: {\n    Stake: (rewardAddress: RewardAddress, redeemer?: string) => TxBuilder;\n    DRep: (rewardAddress: RewardAddress, redeemer?: string) => TxBuilder;\n  };\n  mintAssets: (\n    assets: Assets,\n    redeemer?: string | RedeemerBuilder,\n  ) => TxBuilder;\n  validFrom: (unixTime: number) => TxBuilder;\n  validTo: (unixTime: number) => TxBuilder;\n  /**\n   * NOTE: Deprecate in future version\n   */\n  delegateTo: (\n    rewardAddress: RewardAddress,\n    poolId: PoolId,\n    redeemer?: Redeemer,\n  ) => TxBuilder;\n  delegate: {\n    ToPool: (\n      rewardAddress: RewardAddress,\n      poolId: PoolId,\n      redeemer?: Redeemer,\n    ) => TxBuilder;\n    VoteToDRep: (\n      rewardAddress: RewardAddress,\n      drep: DRep,\n      redeemer?: Redeemer,\n    ) => TxBuilder;\n    VoteToPoolAndDRep: (\n      rewardAddress: RewardAddress,\n      poolId: PoolId,\n      drep: DRep,\n      redeemer?: Redeemer,\n    ) => TxBuilder;\n  };\n  registerAndDelegate: {\n    ToPool: (\n      rewardAddress: RewardAddress,\n      poolId: PoolId,\n      redeemer?: Redeemer,\n    ) => TxBuilder;\n    ToDRep: (\n      rewardAddress: RewardAddress,\n      drep: DRep,\n      redeemer?: Redeemer,\n    ) => TxBuilder;\n    ToPoolAndDRep: (\n      rewardAddress: RewardAddress,\n      poolId: PoolId,\n      drep: DRep,\n      redeemer?: Redeemer,\n    ) => TxBuilder;\n  };\n  updateDRep: (\n    rewardAddress: RewardAddress,\n    anchor?: Anchor,\n    redeemer?: Redeemer,\n  ) => TxBuilder;\n  authCommitteeHot: (\n    coldAddress: RewardAddress,\n    hotAddress: RewardAddress,\n  ) => TxBuilder;\n  resignCommitteeHot: (\n    coldAddress: RewardAddress,\n    anchor?: Anchor,\n  ) => TxBuilder;\n  attachMetadata: (\n    label: Label,\n    metadata: Metadata.TransactionMetadata,\n  ) => TxBuilder;\n  attach: {\n    Script: (script: Script) => TxBuilder;\n    SpendingValidator: (spendingValidator: Script) => TxBuilder;\n    MintingPolicy: (mintingPolicy: Script) => TxBuilder;\n    CertificateValidator: (certValidator: Script) => TxBuilder;\n    WithdrawalValidator: (withdrawalValidator: Script) => TxBuilder;\n    VoteValidator: (voteValidator: Script) => TxBuilder;\n    ProposeValidator: (proposeValidator: Script) => TxBuilder;\n  };\n  compose: (tx: TxBuilder | null) => TxBuilder;\n  setMinFee: (fee: bigint) => TxBuilder;\n  complete: (\n    options?: CompleteTxBuilder.CompleteOptions,\n  ) => Promise<TxSignBuilder.TxSignBuilder>;\n  completeProgram: (\n    options?: CompleteTxBuilder.CompleteOptions,\n  ) => Effect.Effect<TxSignBuilder.TxSignBuilder, TransactionError>;\n  completeSafe: (\n    options?: CompleteTxBuilder.CompleteOptions,\n  ) => Promise<Either<TxSignBuilder.TxSignBuilder, TransactionError>>;\n  chainProgram: (\n    options?: CompleteTxBuilder.CompleteOptions,\n  ) => Effect.Effect<\n    [UTxO[], UTxO[], TxSignBuilder.TxSignBuilder],\n    TransactionError,\n    never\n  >;\n  chain: (\n    options?: CompleteTxBuilder.CompleteOptions,\n  ) => Promise<[UTxO[], UTxO[], TxSignBuilder.TxSignBuilder]>;\n  chainSafe: (\n    options?: CompleteTxBuilder.CompleteOptions,\n  ) => Promise<\n    Either<[UTxO[], UTxO[], TxSignBuilder.TxSignBuilder], TransactionError>\n  >;\n  /**\n   * **Warning:** This method executes all programs and mutates the TxBuilder state.\n   *\n   * Calling `.complete()` after executing this function will lead to unexpected behavior.\n   *\n   * It is recommended to call `.config()` only for debugging purposes\n   */\n  config: () => Promise<TxBuilderConfig>;\n  /**\n   * Returns the raw TxBuilderConfig\n   */\n  rawConfig: () => TxBuilderConfig;\n  /**\n   * Returns the current lucid instance configuration\n   */\n  lucidConfig: () => LucidConfig;\n  /**\n   * Returns the current txbuilder programs\n   */\n  getPrograms: () => Effect.Effect<void, TransactionError, TxConfig>[];\n};\n\nexport function makeTxBuilder(lucidConfig: LucidConfig): TxBuilder {\n  const config: TxBuilderConfig = {\n    lucidConfig: lucidConfig,\n    txBuilder: CML.TransactionBuilder.new(lucidConfig.txbuilderconfig),\n    walletInputs: [],\n    collectedInputs: [],\n    readInputs: [],\n    consumedInputs: [],\n    totalOutputAssets: {},\n    payToOutputs: [],\n    mintedAssets: {},\n    scripts: new Map(),\n    programs: [],\n    partialPrograms: new Map(),\n    minFee: undefined,\n  };\n  const configLayer = Layer.succeed(TxConfig, { config });\n  const txBuilder: TxBuilder = {\n    readFrom: (utxos: UTxO[]) => {\n      utxos.map((utxo) => {\n        if (utxo.scriptRef) {\n          const scriptKeyValue = Attach.attachScript(utxo.scriptRef);\n          config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        }\n      });\n      const program = Read.readFrom(utxos);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    collectFrom: (utxos: UTxO[], redeemer?: string | RedeemerBuilder) => {\n      const program =\n        typeof redeemer === \"object\"\n          ? Collect.collectFromUTxOPartial(utxos, redeemer)\n          : Collect.collectFromUTxO(utxos)(redeemer);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    pay: {\n      ToAddress: (address: string, assets: Assets) => {\n        const program = Pay.payToAddress(address, assets);\n        config.programs.push(program);\n        return txBuilder;\n      },\n      ToAddressWithData: (\n        address: string,\n        outputDatum?: OutputDatum,\n        assets?: Assets,\n        scriptRef?: Script | undefined,\n      ) => {\n        const program = Pay.ToAddressWithData(\n          address,\n          outputDatum,\n          assets,\n          scriptRef,\n        );\n        config.programs.push(program);\n        return txBuilder;\n      },\n      ToContract: (\n        address: string,\n        outputDatum?: OutputDatum,\n        assets?: Assets,\n        scriptRef?: Script | undefined,\n      ) => {\n        const program = Pay.ToContract(address, outputDatum, assets, scriptRef);\n        config.programs.push(program);\n        return txBuilder;\n      },\n    },\n    addSigner: (address: Address | RewardAddress) => {\n      const program = Signer.addSigner(address);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    addSignerKey: (keyHash: PaymentKeyHash | StakeKeyHash) => {\n      const program = Signer.addSignerKey(keyHash);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    registerStake: (rewardAddress: RewardAddress) => {\n      const program = Stake.registerStake(rewardAddress);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    register: {\n      Stake: (rewardAddress: RewardAddress) => {\n        const program = Stake.registerStake(rewardAddress);\n        config.programs.push(program);\n        return txBuilder;\n      },\n      DRep: (\n        rewardAddress: RewardAddress,\n        anchor?: Anchor,\n        redeemer?: string,\n      ) => {\n        const program = Governance.registerDRep(\n          rewardAddress,\n          anchor,\n          redeemer,\n        );\n        config.programs.push(program);\n        return txBuilder;\n      },\n    },\n    deRegisterStake: (rewardAddress: RewardAddress, redeemer?: string) => {\n      const program = Stake.deRegisterStake(rewardAddress, redeemer);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    deregister: {\n      Stake: (rewardAddress: RewardAddress, redeemer?: string) => {\n        const program = Stake.deRegisterStake(rewardAddress, redeemer);\n        config.programs.push(program);\n        return txBuilder;\n      },\n      DRep: (rewardAddress: RewardAddress, redeemer?: string) => {\n        const program = Governance.deregisterDRep(rewardAddress, redeemer);\n        config.programs.push(program);\n        return txBuilder;\n      },\n    },\n    withdraw: (\n      rewardAddress: RewardAddress,\n      amount: Lovelace,\n      redeemer?: string | RedeemerBuilder,\n    ) => {\n      const partialProgram = Stake.withdraw(rewardAddress, amount);\n      //TODO: improve function workflow\n      handleRedeemerBuilder(config, partialProgram, redeemer);\n      return txBuilder;\n    },\n    mintAssets: (assets: Assets, redeemer?: string | RedeemerBuilder) => {\n      config.mintedAssets = addAssets(config.mintedAssets, assets);\n      const partialProgram = Mint.mintAssets(assets);\n      //TODO: improve function workflow\n      handleRedeemerBuilder(config, partialProgram, redeemer);\n      return txBuilder;\n    },\n    validFrom: (unixTime: number) => {\n      const program = Interval.validFrom(unixTime);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    validTo: (unixTime: number) => {\n      const program = Interval.validTo(unixTime);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    delegateTo: (\n      rewardAddress: RewardAddress,\n      poolId: PoolId,\n      redeemer?: Redeemer,\n    ) => {\n      const program = Pool.delegateTo(rewardAddress, poolId, redeemer);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    delegate: {\n      ToPool: (\n        rewardAddress: RewardAddress,\n        poolId: PoolId,\n        redeemer?: Redeemer,\n      ) => {\n        const program = Pool.delegateTo(rewardAddress, poolId, redeemer);\n        config.programs.push(program);\n        return txBuilder;\n      },\n\n      VoteToDRep: (\n        rewardAddress: RewardAddress,\n        drep: DRep,\n        redeemer?: Redeemer,\n      ) => {\n        const program = Governance.delegateVoteToDRep(\n          rewardAddress,\n          drep,\n          redeemer,\n        );\n        config.programs.push(program);\n        return txBuilder;\n      },\n\n      VoteToPoolAndDRep: (\n        rewardAddress: RewardAddress,\n        poolId: PoolId,\n        drep: DRep,\n        redeemer?: Redeemer,\n      ) => {\n        const program = Governance.delegateVoteToPoolAndDRep(\n          rewardAddress,\n          poolId,\n          drep,\n          redeemer,\n        );\n        config.programs.push(program);\n        return txBuilder;\n      },\n    },\n    registerAndDelegate: {\n      ToPool: (\n        rewardAddress: RewardAddress,\n        poolId: PoolId,\n        redeemer?: Redeemer,\n      ) => {\n        const program = Governance.registerAndDelegateToPool(\n          rewardAddress,\n          poolId,\n          redeemer,\n        );\n        config.programs.push(program);\n        return txBuilder;\n      },\n      ToDRep: (\n        rewardAddress: RewardAddress,\n        drep: DRep,\n        redeemer?: Redeemer,\n      ) => {\n        const program = Governance.registerAndDelegateToDRep(\n          rewardAddress,\n          drep,\n          redeemer,\n        );\n        config.programs.push(program);\n        return txBuilder;\n      },\n      ToPoolAndDRep: (\n        rewardAddress: RewardAddress,\n        poolId: PoolId,\n        drep: DRep,\n        redeemer?: Redeemer,\n      ) => {\n        const program = Governance.registerAndDelegateToPoolAndDRep(\n          rewardAddress,\n          poolId,\n          drep,\n          redeemer,\n        );\n        config.programs.push(program);\n        return txBuilder;\n      },\n    },\n    updateDRep: (\n      rewardAddress: RewardAddress,\n      anchor?: Anchor,\n      redeemer?: Redeemer,\n    ) => {\n      const program = Governance.updateDRep(rewardAddress, anchor, redeemer);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    authCommitteeHot: (\n      coldAddress: RewardAddress,\n      hotAddress: RewardAddress,\n      redeemer?: Redeemer,\n    ) => {\n      const program = Governance.authCommitteeHot(\n        coldAddress,\n        hotAddress,\n        redeemer,\n      );\n      config.programs.push(program);\n      return txBuilder;\n    },\n    resignCommitteeHot: (\n      coldAddress: RewardAddress,\n      anchor?: Anchor,\n      redeemer?: Redeemer,\n    ) => {\n      const program = Governance.resignCommitteeHot(\n        coldAddress,\n        anchor,\n        redeemer,\n      );\n      config.programs.push(program);\n      return txBuilder;\n    },\n    attachMetadata: (label: Label, metadata: Metadata.TransactionMetadata) => {\n      const program = Metadata.attachMetadata(config, label, metadata);\n      config.programs.push(program);\n      return txBuilder;\n    },\n    attach: {\n      Script: (script: Script) => {\n        const scriptKeyValue = Attach.attachScript(script);\n        config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        return txBuilder;\n      },\n      SpendingValidator: (spendingValidator: Script) => {\n        const scriptKeyValue =\n          Attach.attachSpendingValidator(spendingValidator);\n        config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        return txBuilder;\n      },\n      MintingPolicy: (mintingPolicy: Script) => {\n        const scriptKeyValue = Attach.attachMintingPolicy(mintingPolicy);\n        config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        return txBuilder;\n      },\n      CertificateValidator: (certValidator: Script) => {\n        const scriptKeyValue = Attach.attachCertificateValidator(certValidator);\n        config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        return txBuilder;\n      },\n      WithdrawalValidator: (withdrawalValidator: Script) => {\n        const scriptKeyValue =\n          Attach.attachWithdrawalValidator(withdrawalValidator);\n        config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        return txBuilder;\n      },\n      VoteValidator: (voteValidator: Script) => {\n        const scriptKeyValue = Attach.attachVoteValidator(voteValidator);\n        config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        return txBuilder;\n      },\n      ProposeValidator: (proposeValidator: Script) => {\n        const scriptKeyValue = Attach.attachProposeValidator(proposeValidator);\n        config.scripts.set(scriptKeyValue.key, scriptKeyValue.value);\n        return txBuilder;\n      },\n    },\n    compose: (tx: TxBuilder | null) => {\n      if (tx) {\n        const rawConfig = tx.rawConfig();\n        config.programs = [...config.programs, ...tx.getPrograms()];\n        config.scripts = new Map([...config.scripts, ...rawConfig.scripts]);\n        config.mintedAssets = Object.entries({\n          ...config.mintedAssets,\n          ...rawConfig.mintedAssets,\n        }).reduce<Assets>((acc, [key, value]) => {\n          acc[key as Unit | \"lovelace\"] =\n            (config.mintedAssets[key as Unit | \"lovelace\"] || 0n) +\n            BigInt(value);\n          return acc;\n        }, {});\n      }\n      return txBuilder;\n    },\n    setMinFee: (fee: bigint) => {\n      config.minFee = fee;\n      return txBuilder;\n    },\n    complete: (options?: CompleteTxBuilder.CompleteOptions) =>\n      makeReturn(\n        pipe(\n          CompleteTxBuilder.complete(options),\n          Effect.provide(configLayer),\n          Effect.map((result) => result[2]),\n        ),\n      ).unsafeRun(),\n    completeProgram: (options?: CompleteTxBuilder.CompleteOptions) =>\n      pipe(\n        CompleteTxBuilder.complete(options),\n        Effect.provide(configLayer),\n        Effect.map((result) => result[2]),\n      ),\n    completeSafe: (options?: CompleteTxBuilder.CompleteOptions) =>\n      makeReturn(\n        pipe(\n          CompleteTxBuilder.complete(options),\n          Effect.provide(configLayer),\n          Effect.map((result) => result[2]),\n        ),\n      ).safeRun(),\n    chainProgram: (options?: CompleteTxBuilder.CompleteOptions) =>\n      pipe(CompleteTxBuilder.complete(options), Effect.provide(configLayer)),\n    chain: (options?: CompleteTxBuilder.CompleteOptions) =>\n      makeReturn(\n        pipe(CompleteTxBuilder.complete(options), Effect.provide(configLayer)),\n      ).unsafeRun(),\n    chainSafe: (options?: CompleteTxBuilder.CompleteOptions) =>\n      makeReturn(\n        pipe(CompleteTxBuilder.complete(options), Effect.provide(configLayer)),\n      ).safeRun(),\n    rawConfig: () => config,\n    config: () =>\n      pipe(\n        Effect.gen(function* () {\n          yield* Effect.all(config.programs);\n          return config;\n        }),\n        Effect.provide(configLayer),\n        Effect.runPromise,\n      ),\n    lucidConfig: () => config.lucidConfig,\n    getPrograms: () => config.programs,\n  };\n  return txBuilder;\n}\n","import { ProtocolParameters } from \"@lucid-evolution/core-types\";\nimport { CML } from \"../core.js\";\n\nexport const makeTxConfig = (\n  protocolParameters: ProtocolParameters,\n  costModels: CML.CostModels,\n): CML.TransactionBuilderConfig => {\n  const exUnitsPrices = CML.ExUnitPrices.new(\n    CML.Rational.new(\n      BigInt(protocolParameters.priceMem * 100_000_000),\n      100_000_000n,\n    ),\n    CML.Rational.new(\n      BigInt(protocolParameters.priceStep * 100_000_000),\n      100_000_000n,\n    ),\n  );\n  const txBuilderConfig = CML.TransactionBuilderConfigBuilder.new()\n    .fee_algo(\n      CML.LinearFee.new(\n        BigInt(protocolParameters.minFeeA),\n        BigInt(protocolParameters.minFeeB),\n        BigInt(protocolParameters.minFeeRefScriptCostPerByte),\n      ),\n    )\n    .coins_per_utxo_byte(protocolParameters.coinsPerUtxoByte)\n    .pool_deposit(protocolParameters.poolDeposit)\n    .key_deposit(protocolParameters.keyDeposit)\n    .max_value_size(protocolParameters.maxValSize)\n    .max_tx_size(protocolParameters.maxTxSize)\n    .ex_unit_prices(exUnitsPrices)\n    .collateral_percentage(protocolParameters.collateralPercentage)\n    .max_collateral_inputs(protocolParameters.maxCollateralInputs)\n    .cost_models(costModels)\n    .collateral_percentage(protocolParameters.collateralPercentage)\n    .max_collateral_inputs(protocolParameters.maxCollateralInputs)\n    .build();\n\n  return txBuilderConfig;\n};\n"],"mappings":"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","names":["import_utils","import_effect","import_plutus","import_utils","import_effect","CML","CML","import_effect","import_utils","import_plutus","import_utils","import_effect","import_effect","import_utils","import_utils","import_effect","import_utils","import_effect","CML","mintAssets","import_effect","import_utils","import_effect","CML","import_effect","CML","config","import_effect","CML","CML","import_effect","import_effect","import_core_utils","import_effect","S","import_effect","import_effect","S","import_effect","wallet","privateKey","witness","import_utils","import_plutus","_Array","_BigInt","import_effect","import_utils","import_plutus","import_effect","provider","costModels","network","protocolParameters","options"]}