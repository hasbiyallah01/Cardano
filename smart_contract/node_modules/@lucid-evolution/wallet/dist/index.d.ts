import { Address, RewardAddress, PrivateKey, Network, KeyHash, UTxO, Provider, Wallet, WalletApi } from '@lucid-evolution/core-types';
import * as CML from '@anastasia-labs/cardano-multiplatform-lib-nodejs';

type FromSeed = {
    address: Address;
    rewardAddress: RewardAddress | null;
    paymentKey: PrivateKey;
    stakeKey: PrivateKey | null;
};
declare function walletFromSeed(seed: string, options?: {
    password?: string;
    addressType?: "Base" | "Enterprise";
    accountIndex?: number;
    network?: Network;
}): FromSeed;
declare function discoverOwnUsedTxKeyHashes(tx: CML.Transaction, ownKeyHashes: Array<KeyHash>, ownUtxos: Array<UTxO>): Array<KeyHash>;

declare const makeWalletFromSeed: (provider: Provider, network: Network, seed: string, options?: {
    addressType?: "Base" | "Enterprise";
    accountIndex?: number;
    password?: string;
}) => Wallet;
/**
 * Cardano Private key in bech32; not the BIP32 private key or any key that is not fully derived.
 * Only an Enteprise address (without stake credential) is derived.
 */
declare const makeWalletFromPrivateKey: (provider: Provider, network: Network, privateKey: PrivateKey) => Wallet;
declare const makeWalletFromAPI: (provider: Provider, api: WalletApi) => Wallet;
declare const makeWalletFromAddress: (provider: Provider, network: Network, address: string, utxos: UTxO[]) => Wallet;

export { type FromSeed, discoverOwnUsedTxKeyHashes, makeWalletFromAPI, makeWalletFromAddress, makeWalletFromPrivateKey, makeWalletFromSeed, walletFromSeed };
