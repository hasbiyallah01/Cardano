"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  Blockfrost: () => Blockfrost,
  Emulator: () => Emulator,
  Koios: () => Koios,
  KoiosError: () => KoiosError,
  Kupmios: () => Kupmios,
  KupmiosError: () => KupmiosError,
  Maestro: () => Maestro,
  generateEmulatorAccount: () => generateEmulatorAccount,
  generateEmulatorAccountFromPrivateKey: () => generateEmulatorAccountFromPrivateKey
});
module.exports = __toCommonJS(index_exports);

// src/core.ts
var CML = __toESM(require("@anastasia-labs/cardano-multiplatform-lib-nodejs"), 1);

// src/blockfrost.ts
var import_core_utils = require("@lucid-evolution/core-utils");
var import_utils2 = require("@lucid-evolution/utils");

// package.json
var package_default = {
  name: "@lucid-evolution/provider",
  version: "0.1.89",
  description: "",
  main: "./dist/index.js",
  types: "./dist/index.d.ts",
  type: "module",
  exports: {
    ".": {
      require: "./dist/index.cjs",
      import: "./dist/index.js",
      types: "./dist/index.d.ts"
    }
  },
  files: [
    "dist"
  ],
  publishConfig: {
    access: "public"
  },
  scripts: {
    build: "tsup src/index.ts --format esm,cjs --dts --clean",
    clean: "rm -rf .turbo && rm -rf node_modules && rm -rf dist",
    test: "vitest run"
  },
  keywords: [],
  author: "",
  license: "MIT",
  browser: {
    "@anastasia-labs/cardano-multiplatform-lib-nodejs": "@anastasia-labs/cardano-multiplatform-lib-browser"
  },
  dependencies: {
    "@anastasia-labs/cardano-multiplatform-lib-browser": "6.0.2-3",
    "@anastasia-labs/cardano-multiplatform-lib-nodejs": "6.0.2-3",
    "@effect/platform": "^0.71.3",
    "@effect/schema": "^0.68.26",
    "@lucid-evolution/core-types": "workspace:*",
    "@lucid-evolution/core-utils": "workspace:*",
    "@lucid-evolution/utils": "workspace:*",
    "@lucid-evolution/wallet": "workspace:*",
    effect: "^3.11.7"
  },
  devDependencies: {
    "@types/node": "^20.12.8",
    tsup: "^8.0.2",
    typescript: "^5.4.5",
    vitest: "^2.0.4"
  }
};

// src/internal/blockfrost.ts
var import_effect = require("effect");
var import_utils = require("@lucid-evolution/utils");
var toAditionalUTXOs = (utxos) => (utxos || []).map((utxo) => [
  {
    txId: utxo.txHash,
    index: utxo.outputIndex
  },
  {
    address: utxo.address,
    value: {
      coins: Number(utxo.assets["lovelace"]),
      assets: fromAssets(utxo.assets)
    },
    datumHash: utxo.datumHash,
    datum: utxo.datum,
    script: toTxOutScript(utxo.scriptRef)
  }
]);
var toTxOutScript = (scriptRef) => {
  if (scriptRef) {
    switch (scriptRef.type) {
      case "PlutusV1":
        return { "plutus:v1": (0, import_utils.applySingleCborEncoding)(scriptRef.script) };
      case "PlutusV2":
        return { "plutus:v2": (0, import_utils.applySingleCborEncoding)(scriptRef.script) };
      case "PlutusV3":
        return { "plutus:v3": (0, import_utils.applySingleCborEncoding)(scriptRef.script) };
      default:
        return void 0;
    }
  }
};
var fromAssets = (assets) => (0, import_effect.pipe)(
  import_effect.Record.remove(assets, "lovelace"),
  import_effect.Record.mapEntries((amount, unit) => [
    unit.length === 56 ? unit.slice(0, 56) : unit.slice(0, 56) + "." + unit.slice(56),
    Number(amount)
  ]),
  (r) => import_effect.Record.isEmptyRecord(r) ? void 0 : r
);
var fromLegacyRedeemerTag = (redeemerTag) => {
  switch (redeemerTag) {
    case "certificate":
      return "publish";
    case "withdrawal":
      return "withdraw";
    default:
      return redeemerTag;
  }
};

// src/blockfrost.ts
var Blockfrost = class {
  url;
  projectId;
  constructor(url, projectId) {
    this.url = url;
    this.projectId = projectId || "";
  }
  async getProtocolParameters() {
    const result = await fetch(`${this.url}/epochs/latest/parameters`, {
      headers: { project_id: this.projectId, lucid }
    }).then((res) => res.json());
    return {
      minFeeA: parseInt(result.min_fee_a),
      minFeeB: parseInt(result.min_fee_b),
      maxTxSize: parseInt(result.max_tx_size),
      maxValSize: parseInt(result.max_val_size),
      keyDeposit: BigInt(result.key_deposit),
      poolDeposit: BigInt(result.pool_deposit),
      drepDeposit: BigInt(result.drep_deposit),
      govActionDeposit: BigInt(result.gov_action_deposit),
      priceMem: parseFloat(result.price_mem),
      priceStep: parseFloat(result.price_step),
      maxTxExMem: BigInt(result.max_tx_ex_mem),
      maxTxExSteps: BigInt(result.max_tx_ex_steps),
      coinsPerUtxoByte: BigInt(result.coins_per_utxo_size),
      collateralPercentage: parseInt(result.collateral_percent),
      maxCollateralInputs: parseInt(result.max_collateral_inputs),
      minFeeRefScriptCostPerByte: parseInt(
        result.min_fee_ref_script_cost_per_byte
      ),
      costModels: result.cost_models
    };
  }
  async getUtxos(addressOrCredential) {
    const queryPredicate = (() => {
      if (typeof addressOrCredential === "string") return addressOrCredential;
      const credentialBech32 = addressOrCredential.type === "Key" ? CML.Ed25519KeyHash.from_hex(addressOrCredential.hash).to_bech32(
        "addr_vkh"
      ) : CML.ScriptHash.from_hex(addressOrCredential.hash).to_bech32(
        "addr_vkh"
      );
      return credentialBech32;
    })();
    let result = [];
    let page = 1;
    while (true) {
      const pageResult = await fetch(
        `${this.url}/addresses/${queryPredicate}/utxos?page=${page}`,
        { headers: { project_id: this.projectId, lucid } }
      ).then((res) => res.json());
      if (pageResult.error) {
        if (pageResult.status_code === 404) {
          return [];
        } else {
          throw new Error("Could not fetch UTxOs from Blockfrost. Try again.");
        }
      }
      result = result.concat(pageResult);
      if (pageResult.length <= 0) break;
      page++;
    }
    return this.blockfrostUtxosToUtxos(result);
  }
  async getUtxosWithUnit(addressOrCredential, unit) {
    const queryPredicate = (() => {
      if (typeof addressOrCredential === "string") return addressOrCredential;
      const credentialBech32 = addressOrCredential.type === "Key" ? CML.Ed25519KeyHash.from_hex(addressOrCredential.hash).to_bech32(
        "addr_vkh"
      ) : CML.ScriptHash.from_hex(addressOrCredential.hash).to_bech32(
        "addr_vkh"
      );
      return credentialBech32;
    })();
    let result = [];
    let page = 1;
    while (true) {
      const pageResult = await fetch(
        `${this.url}/addresses/${queryPredicate}/utxos/${unit}?page=${page}`,
        { headers: { project_id: this.projectId, lucid } }
      ).then((res) => res.json());
      if (pageResult.error) {
        if (pageResult.status_code === 404) {
          return [];
        } else {
          throw new Error("Could not fetch UTxOs from Blockfrost. Try again.");
        }
      }
      result = result.concat(pageResult);
      if (pageResult.length <= 0) break;
      page++;
    }
    return this.blockfrostUtxosToUtxos(result);
  }
  async getUtxoByUnit(unit) {
    const addresses = await fetch(
      `${this.url}/assets/${unit}/addresses?count=2`,
      { headers: { project_id: this.projectId, lucid } }
    ).then((res) => res.json());
    if (!addresses || addresses.error) {
      throw new Error("Unit not found.");
    }
    if (addresses.length > 1) {
      throw new Error("Unit needs to be an NFT or only held by one address.");
    }
    const address = addresses[0].address;
    const utxos = await this.getUtxosWithUnit(address, unit);
    if (utxos.length > 1) {
      throw new Error("Unit needs to be an NFT or only held by one address.");
    }
    return utxos[0];
  }
  async getUtxosByOutRef(outRefs) {
    const queryHashes = [...new Set(outRefs.map((outRef) => outRef.txHash))];
    const utxos = await Promise.all(
      queryHashes.map(async (txHash) => {
        const result = await fetch(`${this.url}/txs/${txHash}/utxos`, {
          headers: { project_id: this.projectId, lucid }
        }).then((res) => res.json());
        if (!result || result.error) {
          return [];
        }
        const utxosResult = result.outputs.map(
          (r) => ({
            ...r,
            tx_hash: txHash
          })
        );
        return this.blockfrostUtxosToUtxos(utxosResult);
      })
    );
    return utxos.reduce((acc, utxos2) => acc.concat(utxos2), []).filter(
      (utxo) => outRefs.some(
        (outRef) => utxo.txHash === outRef.txHash && utxo.outputIndex === outRef.outputIndex
      )
    );
  }
  async getDelegation(rewardAddress) {
    const result = await fetch(`${this.url}/accounts/${rewardAddress}`, {
      headers: { project_id: this.projectId, lucid }
    }).then((res) => res.json());
    if (!result || result.error) {
      return { poolId: null, rewards: 0n };
    }
    return {
      poolId: result.pool_id || null,
      rewards: BigInt(result.withdrawable_amount)
    };
  }
  async getDatum(datumHash) {
    const datum = await fetch(`${this.url}/scripts/datum/${datumHash}/cbor`, {
      headers: { project_id: this.projectId, lucid }
    }).then((res) => res.json()).then((res) => res.cbor);
    if (!datum || datum.error) {
      throw new Error(`No datum found for datum hash: ${datumHash}`);
    }
    return datum;
  }
  awaitTx(txHash, checkInterval = 3e3) {
    return new Promise((res) => {
      const confirmation = setInterval(async () => {
        const isConfirmed = await fetch(`${this.url}/txs/${txHash}/cbor`, {
          headers: { project_id: this.projectId, lucid }
        }).then((res2) => res2.json());
        if (isConfirmed && !isConfirmed.error) {
          clearInterval(confirmation);
          await new Promise((res2) => setTimeout(() => res2(1), 1e3));
          return res(true);
        }
      }, checkInterval);
    });
  }
  async submitTx(tx) {
    const result = await fetch(`${this.url}/tx/submit`, {
      method: "POST",
      headers: {
        "Content-Type": "application/cbor",
        project_id: this.projectId,
        lucid
      },
      body: (0, import_core_utils.fromHex)(tx)
    }).then((res) => res.json());
    if (!result || result.error) {
      if (result?.status_code === 400) throw new Error(result.message);
      else throw new Error("Could not submit transaction.");
    }
    return result;
  }
  async blockfrostUtxosToUtxos(result) {
    const utxos = [];
    const batchSize = 10;
    let count = 0;
    for (let i = 0; i < result.length; i += batchSize) {
      const batch = result.slice(i, i + batchSize);
      count += batchSize;
      await handleRateLimit(count);
      const batchResults = await Promise.all(
        batch.map(async (r) => {
          return {
            txHash: r.tx_hash,
            outputIndex: r.output_index,
            assets: Object.fromEntries(
              r.amount.map(({ unit, quantity }) => [unit, BigInt(quantity)])
            ),
            address: r.address,
            datumHash: !r.inline_datum && r.data_hash || void 0,
            datum: r.inline_datum || void 0,
            scriptRef: r.reference_script_hash ? await (async () => {
              const { type } = await fetch(
                `${this.url}/scripts/${r.reference_script_hash}`,
                {
                  headers: { project_id: this.projectId, lucid }
                }
              ).then((res) => res.json());
              const { cbor: script } = await fetch(
                `${this.url}/scripts/${r.reference_script_hash}/cbor`,
                { headers: { project_id: this.projectId, lucid } }
              ).then((res) => res.json());
              switch (type) {
                case "timelock":
                  const { json: native } = await fetch(
                    `${this.url}/scripts/${r.reference_script_hash}/json`,
                    { headers: { project_id: this.projectId, lucid } }
                  ).then((res) => res.json());
                  return (0, import_utils2.scriptFromNative)(native);
                case "plutusV1":
                  return {
                    type: "PlutusV1",
                    script: (0, import_utils2.applyDoubleCborEncoding)(script)
                  };
                case "plutusV2":
                  return {
                    type: "PlutusV2",
                    script: (0, import_utils2.applyDoubleCborEncoding)(script)
                  };
                case "plutusV3":
                  return {
                    type: "PlutusV3",
                    script: (0, import_utils2.applyDoubleCborEncoding)(script)
                  };
              }
            })() : void 0
          };
        })
      );
      utxos.push(...batchResults);
    }
    return utxos;
  }
  async evaluateTx(tx, additionalUTxOs) {
    const payload = {
      cbor: tx,
      additionalUtxoSet: toAditionalUTXOs(additionalUTxOs)
    };
    const res = await fetch(`${this.url}/utils/txs/evaluate/utxos`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        project_id: this.projectId,
        lucid
      },
      body: JSON.stringify(payload)
    }).then((res2) => res2.json());
    if (!res || res.fault) {
      const message = res?.status_code === 400 ? res.message : `Could not evaluate the transaction: ${JSON.stringify(res)}. Transaction: ${tx}`;
      throw new Error(message);
    }
    const blockfrostRedeemer = res;
    if (!("EvaluationResult" in blockfrostRedeemer.result)) {
      throw new Error(
        `EvaluateTransaction fails: ${JSON.stringify(blockfrostRedeemer.result)}`
      );
    }
    const evalRedeemers = [];
    Object.entries(blockfrostRedeemer.result.EvaluationResult).forEach(
      ([redeemerPointer, data]) => {
        const [pTag, pIndex] = redeemerPointer.split(":");
        evalRedeemers.push({
          redeemer_tag: fromLegacyRedeemerTag(
            pTag
          ),
          redeemer_index: Number(pIndex),
          ex_units: { mem: Number(data.memory), steps: Number(data.steps) }
        });
      }
    );
    return evalRedeemers;
  }
};
var handleRateLimit = async (count) => {
  if (count % 100 === 0) {
    await (0, import_core_utils.sleep)(5e3);
  } else if (count % 10 === 0) {
    await (0, import_core_utils.sleep)(500);
  }
};
var lucid = package_default.version;

// src/kupmios.ts
var import_utils4 = require("@lucid-evolution/utils");
var import_effect5 = require("effect");
var import_effect6 = require("effect");

// src/internal/ogmios.ts
var import_effect2 = require("effect");
var import_utils3 = require("@lucid-evolution/utils");
var JSONRPCSchema = (schema) => import_effect2.Schema.Struct({
  jsonrpc: import_effect2.Schema.String,
  method: import_effect2.Schema.optional(import_effect2.Schema.String),
  id: import_effect2.Schema.NullOr(import_effect2.Schema.Number),
  result: schema
}).annotations({ identifier: "JSONRPCSchema" });
var LovelaceAsset = import_effect2.Schema.Struct({
  lovelace: import_effect2.Schema.Number
});
var TupleNumberFromString = import_effect2.Schema.compose(
  import_effect2.Schema.split("/"),
  import_effect2.Schema.Array(import_effect2.Schema.NumberFromString)
);
var ProtocolParametersSchema = import_effect2.Schema.Struct({
  minFeeCoefficient: import_effect2.Schema.Number,
  minFeeReferenceScripts: import_effect2.Schema.Struct({
    base: import_effect2.Schema.Number,
    range: import_effect2.Schema.Number,
    multiplier: import_effect2.Schema.Number
  }),
  maxReferenceScriptsSize: import_effect2.Schema.Struct({
    bytes: import_effect2.Schema.Number
  }),
  stakePoolVotingThresholds: import_effect2.Schema.Struct({
    noConfidence: TupleNumberFromString,
    constitutionalCommittee: import_effect2.Schema.Struct({
      default: TupleNumberFromString,
      stateOfNoConfidence: TupleNumberFromString
    }),
    hardForkInitiation: TupleNumberFromString,
    protocolParametersUpdate: import_effect2.Schema.Struct({
      security: TupleNumberFromString
    })
  }),
  delegateRepresentativeVotingThresholds: import_effect2.Schema.Struct({
    noConfidence: TupleNumberFromString,
    constitutionalCommittee: import_effect2.Schema.Struct({
      default: TupleNumberFromString,
      stateOfNoConfidence: TupleNumberFromString
    }),
    constitution: TupleNumberFromString,
    hardForkInitiation: TupleNumberFromString,
    protocolParametersUpdate: import_effect2.Schema.Struct({
      network: TupleNumberFromString,
      economic: TupleNumberFromString,
      technical: TupleNumberFromString,
      governance: TupleNumberFromString
    }),
    treasuryWithdrawals: TupleNumberFromString
  }),
  constitutionalCommitteeMinSize: import_effect2.Schema.optional(import_effect2.Schema.Number),
  constitutionalCommitteeMaxTermLength: import_effect2.Schema.Number,
  governanceActionLifetime: import_effect2.Schema.Number,
  governanceActionDeposit: import_effect2.Schema.Struct({
    ada: LovelaceAsset
  }),
  delegateRepresentativeDeposit: import_effect2.Schema.Struct({
    ada: LovelaceAsset
  }),
  delegateRepresentativeMaxIdleTime: import_effect2.Schema.Number,
  minFeeConstant: import_effect2.Schema.Struct({ ada: LovelaceAsset }),
  maxBlockBodySize: import_effect2.Schema.Struct({ bytes: import_effect2.Schema.Number }),
  maxBlockHeaderSize: import_effect2.Schema.Struct({ bytes: import_effect2.Schema.Number }),
  maxTransactionSize: import_effect2.Schema.Struct({ bytes: import_effect2.Schema.Number }),
  stakeCredentialDeposit: import_effect2.Schema.Struct({ ada: LovelaceAsset }),
  stakePoolDeposit: import_effect2.Schema.Struct({ ada: LovelaceAsset }),
  stakePoolRetirementEpochBound: import_effect2.Schema.Number,
  desiredNumberOfStakePools: import_effect2.Schema.Number,
  stakePoolPledgeInfluence: TupleNumberFromString,
  monetaryExpansion: TupleNumberFromString,
  treasuryExpansion: TupleNumberFromString,
  minStakePoolCost: import_effect2.Schema.Struct({ ada: LovelaceAsset }),
  minUtxoDepositConstant: import_effect2.Schema.Struct({ ada: LovelaceAsset }),
  minUtxoDepositCoefficient: import_effect2.Schema.Number,
  plutusCostModels: import_effect2.Schema.Struct({
    "plutus:v1": import_effect2.Schema.Array(import_effect2.Schema.Number),
    "plutus:v2": import_effect2.Schema.Array(import_effect2.Schema.Number),
    "plutus:v3": import_effect2.Schema.Array(import_effect2.Schema.Number)
  }),
  scriptExecutionPrices: import_effect2.Schema.Struct({
    memory: TupleNumberFromString,
    cpu: TupleNumberFromString
  }),
  maxExecutionUnitsPerTransaction: import_effect2.Schema.Struct({
    memory: import_effect2.Schema.Number,
    cpu: import_effect2.Schema.Number
  }),
  maxExecutionUnitsPerBlock: import_effect2.Schema.Struct({ memory: import_effect2.Schema.Number, cpu: import_effect2.Schema.Number }),
  maxValueSize: import_effect2.Schema.Struct({ bytes: import_effect2.Schema.Number }),
  collateralPercentage: import_effect2.Schema.Number,
  maxCollateralInputs: import_effect2.Schema.Number,
  version: import_effect2.Schema.Struct({ major: import_effect2.Schema.Number, minor: import_effect2.Schema.Number })
}).annotations({ identifier: "ProtocolParametersSchema" });
var Delegation = import_effect2.Schema.NullOr(
  import_effect2.Schema.Record({
    key: import_effect2.Schema.String,
    value: import_effect2.Schema.Struct({
      delegate: import_effect2.Schema.Struct({ id: import_effect2.Schema.String }),
      rewards: import_effect2.Schema.Struct({ ada: import_effect2.Schema.Struct({ lovelace: import_effect2.Schema.Number }) }),
      deposit: import_effect2.Schema.Struct({ ada: import_effect2.Schema.Struct({ lovelace: import_effect2.Schema.Number }) })
    })
  })
);
var RedeemerSchema = import_effect2.Schema.Struct({
  validator: import_effect2.Schema.Struct({
    purpose: import_effect2.Schema.Literal(
      "spend",
      "mint",
      "publish",
      "withdraw",
      "vote",
      "propose"
    ),
    index: import_effect2.Schema.Int
  }),
  budget: import_effect2.Schema.Struct({
    memory: import_effect2.Schema.Int,
    cpu: import_effect2.Schema.Int
  })
}).annotations({ identifier: "RedeemerSchema" });
var toOgmiosUTxOs = (utxos) => {
  const toOgmiosScript = (scriptRef) => {
    if (scriptRef) {
      switch (scriptRef.type) {
        case "PlutusV1":
          return {
            language: "plutus:v1",
            cbor: (0, import_utils3.applySingleCborEncoding)(scriptRef.script)
          };
        case "PlutusV2":
          return {
            language: "plutus:v2",
            cbor: (0, import_utils3.applySingleCborEncoding)(scriptRef.script)
          };
        case "PlutusV3":
          return {
            language: "plutus:v3",
            cbor: (0, import_utils3.applySingleCborEncoding)(scriptRef.script)
          };
        default:
          return null;
      }
    }
  };
  const toOgmiosAssets = (assets) => {
    const newAssets = {};
    Object.entries(assets).forEach(([unit, amount]) => {
      if (unit == "lovelace") return;
      const { policyId, assetName } = (0, import_utils3.fromUnit)(unit);
      if (!newAssets[policyId]) {
        newAssets[policyId] = {};
      }
      return newAssets[policyId][assetName ? assetName : ""] = Number(amount);
    });
    return newAssets;
  };
  return (utxos || []).map(
    (utxo) => ({
      transaction: {
        id: utxo.txHash
      },
      index: utxo.outputIndex,
      address: utxo.address,
      value: {
        ada: { lovelace: Number(utxo.assets["lovelace"]) },
        ...toOgmiosAssets(utxo.assets)
      },
      datumHash: utxo.datumHash,
      datum: utxo.datum,
      script: toOgmiosScript(utxo.scriptRef)
    })
  );
};

// src/internal/kupo.ts
var import_effect3 = require("effect");
var ValueSchema = import_effect3.Schema.Struct({
  coins: import_effect3.Schema.Number,
  assets: import_effect3.Schema.Record({ key: import_effect3.Schema.String, value: import_effect3.Schema.Number })
});
var UTxOSchema = import_effect3.Schema.Struct({
  transaction_index: import_effect3.Schema.Number,
  transaction_id: import_effect3.Schema.String,
  output_index: import_effect3.Schema.Number,
  address: import_effect3.Schema.String,
  value: ValueSchema,
  datum_hash: import_effect3.Schema.NullOr(import_effect3.Schema.String),
  datum_type: import_effect3.Schema.optional(import_effect3.Schema.Literal("hash", "inline")),
  script_hash: import_effect3.Schema.NullOr(import_effect3.Schema.String),
  created_at: import_effect3.Schema.Struct({
    slot_no: import_effect3.Schema.Number,
    header_hash: import_effect3.Schema.String
  }),
  spent_at: import_effect3.Schema.NullOr(
    import_effect3.Schema.Struct({
      slot_no: import_effect3.Schema.Number,
      header_hash: import_effect3.Schema.String
    })
  )
});
var ScriptSchema = import_effect3.Schema.NullOr(
  import_effect3.Schema.Struct({
    language: import_effect3.Schema.Literal("native", "plutus:v1", "plutus:v2", "plutus:v3"),
    script: import_effect3.Schema.String
  })
);
var DatumSchema = import_effect3.Schema.NullOr(import_effect3.Schema.Struct({ datum: import_effect3.Schema.String }));
var DelegationSchema = import_effect3.Schema.NullOr(
  import_effect3.Schema.Record({
    key: import_effect3.Schema.String,
    value: import_effect3.Schema.Struct({
      delegate: import_effect3.Schema.Struct({ id: import_effect3.Schema.String }),
      rewards: import_effect3.Schema.Struct({ ada: import_effect3.Schema.Struct({ lovelace: import_effect3.Schema.Number }) }),
      deposit: import_effect3.Schema.Struct({ ada: import_effect3.Schema.Struct({ lovelace: import_effect3.Schema.Number }) })
    })
  })
);

// src/internal/HttpUtils.ts
var import_platform = require("@effect/platform");
var import_effect4 = require("effect");
var filterStatusOk = (self) => self.status >= 200 && self.status < 300 ? import_effect4.Effect.succeed(self) : self.text.pipe(
  import_effect4.Effect.flatMap(
    (text) => import_effect4.Effect.fail(
      new import_platform.HttpClientError.ResponseError({
        response: self,
        request: self.request,
        reason: "StatusCode",
        description: `non 2xx status code : ${text}`
      })
    )
  )
);
var makeGet = (url, schema, headers) => (0, import_effect4.pipe)(
  // Initiate a GET request to the specified URL
  import_platform.HttpClientRequest.get(url),
  // Conditional bearer token authentication
  headers ? import_platform.HttpClientRequest.setHeaders(headers) : import_effect4.identity,
  // Execute the HTTP request and retrieve the response
  import_platform.HttpClient.execute,
  // Ensure only 2xx responses are treated as successes.
  import_effect4.Effect.flatMap(filterStatusOk),
  // Parse the response body using the provided JSON schema
  // This validates and transforms the response to the expected type
  import_effect4.Effect.flatMap(import_platform.HttpClientResponse.schemaBodyJson(schema)),
  // Ensure request is aborted if the program is interrupted
  // Prevents resource leaks and ensures clean request termination
  import_effect4.Effect.scoped
);
var makePostAsJson = (url, data, schema, headers) => (0, import_effect4.pipe)(
  // Initiate a POST request to the specified URL
  import_platform.HttpClientRequest.post(url),
  // Conditional headers
  headers ? import_platform.HttpClientRequest.setHeaders(headers) : import_effect4.identity,
  // Set the request body as Json
  import_platform.HttpClientRequest.bodyJson(data),
  // Execute the HTTP request and retrieve the response
  import_effect4.Effect.flatMap(import_platform.HttpClient.execute),
  // Ensure only 2xx responses are treated as successes.
  import_effect4.Effect.flatMap(filterStatusOk),
  // Parse the response body using the provided JSON schema
  // This validates and transforms the response to the expected type
  import_effect4.Effect.flatMap(import_platform.HttpClientResponse.schemaBodyJson(schema)),
  // Ensure request is aborted if the program is interrupted
  // Prevents resource leaks and ensures clean request termination
  import_effect4.Effect.scoped
);
var makePostAsUint8Array = (url, data, schema, headers) => (0, import_effect4.pipe)(
  // Initiate a POST request to the specified URL
  import_platform.HttpClientRequest.post(url),
  // Conditional bearer token authentication
  headers ? import_platform.HttpClientRequest.setHeaders(headers) : import_effect4.identity,
  // Set the request body as a Uint8Array with CBOR content type
  import_platform.HttpClientRequest.bodyUint8Array(data, "application/cbor"),
  // Execute the HTTP request and retrieve the response
  import_platform.HttpClient.execute,
  // Ensure only 2xx responses are treated as successes.
  import_effect4.Effect.flatMap(filterStatusOk),
  // Parse the response body using the provided JSON schema
  // This validates and transforms the response to the expected type
  import_effect4.Effect.flatMap(import_platform.HttpClientResponse.schemaBodyJson(schema)),
  // Ensure request is aborted if the program is interrupted
  // Prevents resource leaks and ensures clean request termination
  import_effect4.Effect.scoped
);

// src/kupmios.ts
var import_platform2 = require("@effect/platform");
var KupmiosError = class extends import_effect6.Data.TaggedError("KupmiosError") {
  get message() {
    return `${this.cause}`;
  }
};
var Kupmios = class {
  kupoUrl;
  ogmiosUrl;
  headers;
  constructor(kupoUrl, ogmiosUrl, headers) {
    this.kupoUrl = kupoUrl;
    this.ogmiosUrl = ogmiosUrl;
    this.headers = headers;
  }
  async getProtocolParameters() {
    const data = {
      jsonrpc: "2.0",
      method: "queryLedgerState/protocolParameters",
      params: {},
      id: null
    };
    const schema = JSONRPCSchema(ProtocolParametersSchema);
    const { result } = await (0, import_effect6.pipe)(
      makePostAsJson(
        this.ogmiosUrl,
        data,
        schema,
        this.headers?.ogmiosHeader
      ),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.runPromise
    );
    return toProtocolParameters(result);
  }
  async getUtxos(addressOrCredential) {
    const isAddress = typeof addressOrCredential === "string";
    const queryPredicate = isAddress ? addressOrCredential : addressOrCredential.hash;
    const pattern = `${this.kupoUrl}/matches/${queryPredicate}${isAddress ? "" : "/*"}?unspent`;
    const schema = import_effect5.Schema.Array(UTxOSchema);
    const utxos = await (0, import_effect6.pipe)(
      makeGet(pattern, schema, this.headers?.kupoHeader),
      import_effect6.Effect.flatMap((u) => kupmiosUtxosToUtxos(this.kupoUrl, u)),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.runPromise
    );
    return utxos;
  }
  async getUtxosWithUnit(addressOrCredential, unit) {
    const isAddress = typeof addressOrCredential === "string";
    const queryPredicate = isAddress ? addressOrCredential : addressOrCredential.hash;
    const { policyId, assetName } = (0, import_utils4.fromUnit)(unit);
    const pattern = `${this.kupoUrl}/matches/${queryPredicate}${isAddress ? "" : "/*"}?unspent&policy_id=${policyId}${assetName ? `&asset_name=${assetName}` : ""}`;
    const schema = import_effect5.Schema.Array(UTxOSchema);
    const utxos = await (0, import_effect6.pipe)(
      makeGet(pattern, schema, this.headers?.kupoHeader),
      import_effect6.Effect.flatMap((u) => kupmiosUtxosToUtxos(this.kupoUrl, u)),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.runPromise
    );
    return utxos;
  }
  async getUtxoByUnit(unit) {
    const { policyId, assetName } = (0, import_utils4.fromUnit)(unit);
    const pattern = `${this.kupoUrl}/matches/${policyId}.${assetName ? `${assetName}` : "*"}?unspent`;
    const schema = import_effect5.Schema.Array(UTxOSchema);
    const utxos = await (0, import_effect6.pipe)(
      makeGet(pattern, schema, this.headers?.kupoHeader),
      import_effect6.Effect.flatMap((u) => kupmiosUtxosToUtxos(this.kupoUrl, u)),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.runPromise
    );
    if (utxos.length > 1) {
      throw new Error("Unit needs to be an NFT or only held by one address.");
    }
    return utxos[0];
  }
  async getUtxosByOutRef(outRefs) {
    const queryHashes = [
      ...new Set(outRefs.map((outRef) => outRef.txHash))
    ];
    const mkPattern = (txHash) => `${this.kupoUrl}/matches/*@${txHash}?unspent`;
    const schema = import_effect5.Schema.Array(UTxOSchema);
    const program = import_effect6.Effect.forEach(
      queryHashes,
      (txHash) => (0, import_effect6.pipe)(
        makeGet(mkPattern(txHash), schema, this.headers?.kupoHeader),
        import_effect6.Effect.flatMap((u) => kupmiosUtxosToUtxos(this.kupoUrl, u)),
        import_effect6.Effect.timeout(1e4),
        import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause }))
      )
    );
    const utxos = await import_effect6.Effect.runPromise(
      (0, import_effect6.pipe)(program, import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer))
    );
    return import_effect6.Array.flatten(utxos).filter(
      (utxo) => outRefs.some(
        (outRef) => utxo.txHash === outRef.txHash && utxo.outputIndex === outRef.outputIndex
      )
    );
  }
  async getDelegation(rewardAddress) {
    const data = {
      jsonrpc: "2.0",
      method: "queryLedgerState/rewardAccountSummaries",
      params: { keys: [rewardAddress] },
      id: null
    };
    const schema = JSONRPCSchema(Delegation);
    const { result } = await (0, import_effect6.pipe)(
      makePostAsJson(
        this.ogmiosUrl,
        data,
        schema,
        this.headers?.ogmiosHeader
      ),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.runPromise
    );
    const delegation = result ? Object.values(result)[0] : null;
    return {
      poolId: delegation?.delegate?.id || null,
      rewards: BigInt(delegation?.rewards?.ada?.lovelace || 0)
    };
  }
  async getDatum(datumHash) {
    const pattern = `${this.kupoUrl}/datums/${datumHash}`;
    const schema = DatumSchema;
    const result = await (0, import_effect6.pipe)(
      makeGet(pattern, schema, this.headers?.kupoHeader),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.flatMap(import_effect6.Effect.fromNullable),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.runPromise
    );
    return result.datum;
  }
  async awaitTx(txHash, checkInterval = 2e4) {
    const pattern = `${this.kupoUrl}/matches/*@${txHash}?unspent`;
    const schema = import_effect5.Schema.Array(UTxOSchema).annotations({
      identifier: "Array<KupmiosSchema.KupoUTxO>"
    });
    const result = await (0, import_effect6.pipe)(
      makeGet(pattern, schema, this.headers?.kupoHeader),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.repeat({
        schedule: import_effect6.Schedule.exponential(checkInterval),
        until: (result2) => result2.length > 0
      }),
      import_effect6.Effect.timeout(16e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.as(true),
      import_effect6.Effect.runPromise
    );
    return result;
  }
  async submitTx(cbor) {
    const data = {
      jsonrpc: "2.0",
      method: "submitTransaction",
      params: {
        transaction: { cbor }
      },
      id: null
    };
    const schema = JSONRPCSchema(
      import_effect5.Schema.Struct({
        transaction: import_effect5.Schema.Struct({
          id: import_effect5.Schema.String
        })
      })
    );
    const { result } = await (0, import_effect6.pipe)(
      makePostAsJson(
        this.ogmiosUrl,
        data,
        schema,
        this.headers?.ogmiosHeader
      ),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.runPromise
    );
    return result.transaction.id;
  }
  async evaluateTx(tx, additionalUTxOs) {
    const data = {
      jsonrpc: "2.0",
      method: "evaluateTransaction",
      params: {
        transaction: { cbor: tx },
        additionalUtxo: toOgmiosUTxOs(additionalUTxOs)
      },
      id: null
    };
    const schema = JSONRPCSchema(import_effect5.Schema.Array(RedeemerSchema));
    const { result } = await (0, import_effect6.pipe)(
      makePostAsJson(
        this.ogmiosUrl,
        data,
        schema,
        this.headers?.ogmiosHeader
      ),
      import_effect6.Effect.provide(import_platform2.FetchHttpClient.layer),
      import_effect6.Effect.timeout(1e4),
      import_effect6.Effect.catchAll((cause) => new KupmiosError({ cause })),
      import_effect6.Effect.runPromise
    );
    const evalRedeemers = result.map((item) => ({
      ex_units: {
        mem: item.budget.memory,
        steps: item.budget.cpu
      },
      redeemer_index: item.validator.index,
      redeemer_tag: item.validator.purpose
    }));
    return evalRedeemers;
  }
};
var getDatumEffect = (kupoUrl, datum_type, datum_hash, kupoHeader) => import_effect6.Effect.gen(function* () {
  if (datum_type === "inline" && datum_hash) {
    const pattern = `${kupoUrl}/datums/${datum_hash}`;
    const schema = DatumSchema;
    return yield* (0, import_effect6.pipe)(
      makeGet(pattern, schema, kupoHeader),
      import_effect6.Effect.flatMap(import_effect6.Effect.fromNullable),
      import_effect6.Effect.map((result) => result.datum),
      import_effect6.Effect.retry(
        import_effect6.Schedule.compose(import_effect6.Schedule.exponential(50), import_effect6.Schedule.recurs(5))
      ),
      import_effect6.Effect.timeout(5e3)
    );
  } else return void 0;
});
var getScriptEffect = (kupoUrl, script_hash, kupoHeader) => import_effect6.Effect.gen(function* () {
  if (script_hash) {
    const pattern = `${kupoUrl}/scripts/${script_hash}`;
    const schema = ScriptSchema;
    return yield* (0, import_effect6.pipe)(
      makeGet(pattern, schema, kupoHeader),
      import_effect6.Effect.flatMap(import_effect6.Effect.fromNullable),
      import_effect6.Effect.retry(
        import_effect6.Schedule.compose(import_effect6.Schedule.exponential(50), import_effect6.Schedule.recurs(5))
      ),
      import_effect6.Effect.timeout(5e3),
      import_effect6.Effect.map(({ language, script }) => {
        switch (language) {
          case "native":
            return {
              type: "Native",
              script
            };
          case "plutus:v1":
            return {
              type: "PlutusV1",
              script: (0, import_utils4.applyDoubleCborEncoding)(script)
            };
          case "plutus:v2":
            return {
              type: "PlutusV2",
              script: (0, import_utils4.applyDoubleCborEncoding)(script)
            };
          case "plutus:v3":
            return {
              type: "PlutusV3",
              script: (0, import_utils4.applyDoubleCborEncoding)(script)
            };
        }
      })
    );
  } else return void 0;
});
var toAssets = (value) => {
  const assets = { lovelace: BigInt(value.coins) };
  for (const unit of Object.keys(value.assets)) {
    assets[unit.replace(".", "")] = BigInt(value.assets[unit]);
  }
  return assets;
};
var toProtocolParameters = (result) => {
  return {
    minFeeA: result.minFeeCoefficient,
    minFeeB: result.minFeeConstant.ada.lovelace,
    maxTxSize: result.maxTransactionSize.bytes,
    maxValSize: result.maxValueSize.bytes,
    keyDeposit: BigInt(result.stakeCredentialDeposit.ada.lovelace),
    poolDeposit: BigInt(result.stakePoolDeposit.ada.lovelace),
    drepDeposit: BigInt(result.delegateRepresentativeDeposit.ada.lovelace),
    govActionDeposit: BigInt(result.governanceActionDeposit.ada.lovelace),
    priceMem: result.scriptExecutionPrices.memory[0] / result.scriptExecutionPrices.memory[1],
    priceStep: result.scriptExecutionPrices.cpu[0] / result.scriptExecutionPrices.cpu[1],
    maxTxExMem: BigInt(result.maxExecutionUnitsPerTransaction.memory),
    maxTxExSteps: BigInt(result.maxExecutionUnitsPerTransaction.cpu),
    // NOTE: coinsPerUtxoByte is now called utxoCostPerByte:
    // https://github.com/IntersectMBO/cardano-node/pull/4141
    // Ogmios v6.x calls it minUtxoDepositCoefficient according to the following
    // documentation from its protocol parameters data model:
    // https://github.com/CardanoSolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#protocol-parameters
    coinsPerUtxoByte: BigInt(result.minUtxoDepositCoefficient),
    collateralPercentage: result.collateralPercentage,
    maxCollateralInputs: result.maxCollateralInputs,
    minFeeRefScriptCostPerByte: result.minFeeReferenceScripts.base,
    costModels: {
      PlutusV1: Object.fromEntries(
        result.plutusCostModels["plutus:v1"].map((value, index) => [
          index.toString(),
          value
        ])
      ),
      PlutusV2: Object.fromEntries(
        result.plutusCostModels["plutus:v2"].map((value, index) => [
          index.toString(),
          value
        ])
      ),
      PlutusV3: Object.fromEntries(
        result.plutusCostModels["plutus:v3"].map((value, index) => [
          index.toString(),
          value
        ])
      )
    }
  };
};
var kupmiosUtxosToUtxos = (kupoURL, utxos, kupoHeader) => import_effect6.Effect.forEach(
  utxos,
  (utxo) => {
    return (0, import_effect6.pipe)(
      import_effect6.Effect.all([
        getDatumEffect(kupoURL, utxo.datum_type, utxo.datum_hash, kupoHeader),
        getScriptEffect(kupoURL, utxo.script_hash, kupoHeader)
      ]),
      import_effect6.Effect.map(
        ([datum, script]) => ({
          txHash: utxo.transaction_id,
          outputIndex: utxo.output_index,
          address: utxo.address,
          assets: toAssets(utxo.value),
          datumHash: utxo.datum_type === "hash" ? utxo.datum_hash : void 0,
          datum,
          scriptRef: script
        })
      )
    );
  },
  { concurrency: "unbounded" }
);

// src/emulator.ts
var import_utils5 = require("@lucid-evolution/utils");
var import_utils6 = require("@lucid-evolution/utils");
var import_core_utils2 = require("@lucid-evolution/core-utils");
var import_wallet = require("@lucid-evolution/wallet");
function generateEmulatorAccountFromPrivateKey(assets) {
  const privateKey = CML.PrivateKey.generate_ed25519().to_bech32();
  const priv = CML.PrivateKey.from_bech32(privateKey);
  const pubKeyHash = priv.to_public().hash();
  const address = CML.EnterpriseAddress.new(
    0,
    CML.Credential.new_pub_key(pubKeyHash)
  ).to_address().to_bech32(void 0);
  return {
    seedPhrase: "",
    address,
    assets,
    privateKey
  };
}
function generateEmulatorAccount(assets) {
  const seedPhrase = (0, import_utils5.generateSeedPhrase)();
  return {
    seedPhrase,
    address: (0, import_wallet.walletFromSeed)(seedPhrase, {
      addressType: "Base",
      accountIndex: 0,
      network: "Custom"
    }).address,
    assets,
    privateKey: ""
  };
}
var Emulator = class {
  ledger;
  mempool = {};
  /**
   * Only stake key registrations/delegations and rewards are tracked.
   * Other certificates are not tracked.
   */
  chain = {};
  blockHeight;
  slot;
  time;
  protocolParameters;
  datumTable = {};
  constructor(accounts, protocolParameters = import_utils5.PROTOCOL_PARAMETERS_DEFAULT) {
    const GENESIS_HASH = "00".repeat(32);
    this.blockHeight = 0;
    this.slot = 0;
    this.time = Date.now();
    this.ledger = {};
    accounts.forEach(({ address, assets, outputData }, index) => {
      if ([outputData?.hash, outputData?.asHash, outputData?.inline].filter(
        (b) => b
      ).length > 1) {
        throw new Error(
          "Not allowed to set hash, asHash and inline at the same time."
        );
      }
      this.ledger[GENESIS_HASH + index] = {
        utxo: {
          txHash: GENESIS_HASH,
          outputIndex: index,
          address,
          assets,
          datumHash: outputData?.asHash ? CML.hash_plutus_data(
            CML.PlutusData.from_cbor_hex(outputData.asHash)
          ).to_hex() : outputData?.hash,
          datum: outputData?.inline,
          scriptRef: outputData?.scriptRef
        },
        spent: false
      };
    });
    this.protocolParameters = protocolParameters;
  }
  now() {
    return this.time;
  }
  awaitSlot(length = 1) {
    this.slot += length;
    this.time += length * 1e3;
    const currentHeight = this.blockHeight;
    this.blockHeight = Math.floor(this.slot / 20);
    if (this.blockHeight > currentHeight) {
      for (const [outRef, { utxo, spent }] of Object.entries(this.mempool)) {
        this.ledger[outRef] = { utxo, spent };
      }
      for (const [outRef, { spent }] of Object.entries(this.ledger)) {
        if (spent) delete this.ledger[outRef];
      }
      this.mempool = {};
    }
  }
  awaitBlock(height = 1) {
    this.blockHeight += height;
    this.slot += height * 20;
    this.time += height * 20 * 1e3;
    for (const [outRef, { utxo, spent }] of Object.entries(this.mempool)) {
      this.ledger[outRef] = { utxo, spent };
    }
    for (const [outRef, { spent }] of Object.entries(this.ledger)) {
      if (spent) delete this.ledger[outRef];
    }
    this.mempool = {};
  }
  getUtxos(addressOrCredential) {
    const utxos = Object.values(this.ledger).flatMap(({ utxo }) => {
      if (typeof addressOrCredential === "string") {
        return addressOrCredential === utxo.address ? utxo : [];
      } else {
        const { paymentCredential } = (0, import_utils6.getAddressDetails)(utxo.address);
        return paymentCredential?.hash === addressOrCredential.hash ? utxo : [];
      }
    });
    return Promise.resolve(utxos);
  }
  getProtocolParameters() {
    return Promise.resolve(this.protocolParameters);
  }
  getDatum(datumHash) {
    return Promise.resolve(this.datumTable[datumHash]);
  }
  getUtxosWithUnit(addressOrCredential, unit) {
    const utxos = Object.values(this.ledger).flatMap(({ utxo }) => {
      if (typeof addressOrCredential === "string") {
        return addressOrCredential === utxo.address && utxo.assets[unit] > 0n ? utxo : [];
      } else {
        const { paymentCredential } = (0, import_utils6.getAddressDetails)(utxo.address);
        return paymentCredential?.hash === addressOrCredential.hash && utxo.assets[unit] > 0n ? utxo : [];
      }
    });
    return Promise.resolve(utxos);
  }
  getUtxosByOutRef(outRefs) {
    return Promise.resolve(
      outRefs.flatMap(
        (outRef) => this.ledger[outRef.txHash + outRef.outputIndex]?.utxo || []
      )
    );
  }
  getUtxoByUnit(unit) {
    const utxos = Object.values(this.ledger).flatMap(
      ({ utxo }) => utxo.assets[unit] > 0n ? utxo : []
    );
    if (utxos.length > 1) {
      throw new Error("Unit needs to be an NFT or only held by one address.");
    }
    return Promise.resolve(utxos[0]);
  }
  getDelegation(rewardAddress) {
    return Promise.resolve({
      poolId: this.chain[rewardAddress]?.delegation?.poolId || null,
      rewards: this.chain[rewardAddress]?.delegation?.rewards || 0n
    });
  }
  awaitTx(txHash) {
    if (this.mempool[txHash + 0]) {
      this.awaitBlock();
      return Promise.resolve(true);
    }
    return Promise.resolve(true);
  }
  /**
   * Emulates the behaviour of the reward distribution at epoch boundaries.
   * Stake keys need to be registered and delegated like on a real chain in order to receive rewards.
   */
  distributeRewards(rewards) {
    for (const [
      rewardAddress,
      { registeredStake, delegation }
    ] of Object.entries(this.chain)) {
      if (registeredStake && delegation.poolId) {
        this.chain[rewardAddress] = {
          registeredStake,
          delegation: {
            poolId: delegation.poolId,
            rewards: delegation.rewards += rewards
          }
        };
      }
    }
    this.awaitBlock();
  }
  submitTx(tx) {
    const desTx = CML.Transaction.from_cbor_hex(tx);
    const body = desTx.body();
    const witnesses = desTx.witness_set();
    const datums = witnesses.plutus_datums();
    const txHash = CML.hash_transaction(body).to_hex();
    const lowerBound = body.validity_interval_start() ? parseInt(body.validity_interval_start().toString()) : null;
    const upperBound = body.ttl() ? parseInt(body.ttl().toString()) : null;
    if (Number.isInteger(lowerBound) && this.slot < lowerBound) {
      throw new Error(
        `Lower bound (${lowerBound}) not in slot range (${this.slot}).`
      );
    }
    if (Number.isInteger(upperBound) && this.slot > upperBound) {
      throw new Error(
        `Upper bound (${upperBound}) not in slot range (${this.slot}).`
      );
    }
    const datumTable = (() => {
      const table = {};
      for (let i = 0; i < (datums?.len() || 0); i++) {
        const datum = datums.get(i);
        const datumHash = CML.hash_plutus_data(datum).to_hex();
        table[datumHash] = datum.to_cbor_hex();
      }
      return table;
    })();
    const consumedHashes = /* @__PURE__ */ new Set();
    const keyHashes = (() => {
      const keyHashes2 = [];
      for (let i = 0; i < (witnesses.vkeywitnesses()?.len() || 0); i++) {
        const witness = witnesses.vkeywitnesses().get(i);
        const publicKey = witness.vkey();
        const keyHash = publicKey.hash().to_hex();
        if (!publicKey.verify((0, import_core_utils2.fromHex)(txHash), witness.ed25519_signature())) {
          throw new Error(`Invalid vkey witness. Key hash: ${keyHash}`);
        }
        keyHashes2.push(keyHash);
      }
      return keyHashes2;
    })();
    const edKeyHashes = CML.Ed25519KeyHashList.new();
    keyHashes.forEach(
      (keyHash) => edKeyHashes.add(CML.Ed25519KeyHash.from_hex(keyHash))
    );
    const nativeHashes = (() => {
      const scriptHashes = [];
      for (let i = 0; i < (witnesses.native_scripts()?.len() || 0); i++) {
        const witness = witnesses.native_scripts().get(i);
        const scriptHash = witness.hash().to_hex();
        if (!witness.verify(
          Number.isInteger(lowerBound) ? CML.BigInteger.from_str(lowerBound.toString()).to_js_value() : void 0,
          Number.isInteger(upperBound) ? CML.BigInteger.from_str(upperBound.toString()).to_js_value() : void 0,
          edKeyHashes
        )) {
          throw new Error(
            `Invalid native script witness. Script hash: ${scriptHash}`
          );
        }
        for (let i2 = 0; i2 < witness.get_required_signers().len(); i2++) {
          const keyHash = witness.get_required_signers().get(i2).to_hex();
          consumedHashes.add(keyHash);
        }
        scriptHashes.push(scriptHash);
      }
      return scriptHashes;
    })();
    const nativeHashesOptional = {};
    const plutusHashesOptional = [];
    const plutusHashes = (() => {
      const scriptHashes = [];
      for (let i = 0; i < (witnesses.plutus_v1_scripts()?.len() || 0); i++) {
        const script = witnesses.plutus_v1_scripts().get(i);
        const scriptHash = script.hash().to_hex();
        scriptHashes.push(scriptHash);
      }
      for (let i = 0; i < (witnesses.plutus_v2_scripts()?.len() || 0); i++) {
        const script = witnesses.plutus_v2_scripts().get(i);
        const scriptHash = script.hash().to_hex();
        scriptHashes.push(scriptHash);
      }
      for (let i = 0; i < (witnesses.plutus_v3_scripts()?.len() || 0); i++) {
        const script = witnesses.plutus_v3_scripts().get(i);
        const scriptHash = script.hash().to_hex();
        scriptHashes.push(scriptHash);
      }
      return scriptHashes;
    })();
    const inputs = body.inputs();
    const resolvedInputs = [];
    for (let i = 0; i < inputs.len(); i++) {
      const input = inputs.get(i);
      const outRef = input.transaction_id().to_hex() + input.index().toString();
      const entryLedger = this.ledger[outRef];
      const { entry, type } = !entryLedger ? { entry: this.mempool[outRef], type: "Mempool" } : { entry: entryLedger, type: "Ledger" };
      if (!entry || entry.spent) {
        throw new Error(
          `Could not spend UTxO: ${JSON.stringify({
            txHash: entry?.utxo.txHash,
            outputIndex: entry?.utxo.outputIndex
          })}
It does not exist or was already spent.`
        );
      }
      const scriptRef = entry.utxo.scriptRef;
      if (scriptRef) {
        switch (scriptRef.type) {
          case "Native": {
            const script = CML.NativeScript.from_cbor_bytes(
              (0, import_core_utils2.fromHex)(scriptRef.script)
            );
            nativeHashesOptional[script.hash().to_hex()] = script;
            break;
          }
          case "PlutusV1": {
            const script = CML.PlutusScript.from_v1(
              CML.PlutusV1Script.from_cbor_bytes((0, import_core_utils2.fromHex)(scriptRef.script))
            );
            plutusHashesOptional.push(script.hash().to_hex());
            break;
          }
          case "PlutusV2": {
            const script = CML.PlutusScript.from_v2(
              CML.PlutusV2Script.from_cbor_bytes((0, import_core_utils2.fromHex)(scriptRef.script))
            );
            plutusHashesOptional.push(script.hash().to_hex());
            break;
          }
          case "PlutusV3": {
            const script = CML.PlutusScript.from_v3(
              CML.PlutusV3Script.from_cbor_bytes((0, import_core_utils2.fromHex)(scriptRef.script))
            );
            plutusHashesOptional.push(script.hash().to_hex());
            break;
          }
        }
      }
      if (entry.utxo.datumHash) consumedHashes.add(entry.utxo.datumHash);
      resolvedInputs.push({ entry, type });
    }
    for (let i = 0; i < (body.reference_inputs()?.len() || 0); i++) {
      const input = body.reference_inputs().get(i);
      const outRef = input.transaction_id().to_hex() + input.index().toString();
      const entry = this.ledger[outRef] || this.mempool[outRef];
      if (!entry || entry.spent) {
        throw new Error(
          `Could not read UTxO: ${JSON.stringify({
            txHash: entry?.utxo.txHash,
            outputIndex: entry?.utxo.outputIndex
          })}
It does not exist or was already spent.`
        );
      }
      const scriptRef = entry.utxo.scriptRef;
      if (scriptRef) {
        switch (scriptRef.type) {
          case "Native": {
            const script = CML.NativeScript.from_cbor_bytes(
              (0, import_core_utils2.fromHex)(scriptRef.script)
            );
            nativeHashesOptional[script.hash().to_hex()] = script;
            break;
          }
          case "PlutusV1": {
            const script = CML.PlutusScript.from_v1(
              CML.PlutusV1Script.from_cbor_bytes((0, import_core_utils2.fromHex)(scriptRef.script))
            );
            plutusHashesOptional.push(script.hash().to_hex());
            break;
          }
          case "PlutusV2": {
            const script = CML.PlutusScript.from_v2(
              CML.PlutusV2Script.from_cbor_bytes((0, import_core_utils2.fromHex)(scriptRef.script))
            );
            plutusHashesOptional.push(script.hash().to_hex());
            break;
          }
          case "PlutusV3": {
            const script = CML.PlutusScript.from_v3(
              CML.PlutusV3Script.from_cbor_bytes((0, import_core_utils2.fromHex)(scriptRef.script))
            );
            plutusHashesOptional.push(script.hash().to_hex());
            break;
          }
        }
      }
      if (entry.utxo.datumHash) consumedHashes.add(entry.utxo.datumHash);
    }
    const redeemers = (() => {
      const tagMap = {
        0: "Spend",
        1: "Mint",
        2: "Cert",
        3: "Reward",
        4: "Proposing",
        5: "Voting"
      };
      const collected = [];
      const redeemers2 = witnesses.redeemers();
      const arrLegacyRedeemer = redeemers2?.as_arr_legacy_redeemer();
      if (arrLegacyRedeemer) {
        for (let i = 0; i < (arrLegacyRedeemer.len() || 0); i++) {
          const redeemer = arrLegacyRedeemer.get(i);
          collected.push({
            tag: tagMap[redeemer.tag()],
            index: Number(redeemer.index())
          });
        }
      }
      const mapRedeemerKeyToRedeemerVal = redeemers2?.as_map_redeemer_key_to_redeemer_val();
      if (mapRedeemerKeyToRedeemerVal) {
        const keys = mapRedeemerKeyToRedeemerVal.keys();
        for (let i = 0; i < (keys.len() || 0); i++) {
          const key = keys.get(i);
          collected.push({
            tag: tagMap[key.tag()],
            index: Number(key.index())
          });
        }
      }
      return collected;
    })();
    function checkAndConsumeHash(credential, tag, index) {
      switch (credential.type) {
        case "Key": {
          if (!keyHashes.includes(credential.hash)) {
            throw new Error(
              `Missing vkey witness. Key hash: ${credential.hash}`
            );
          }
          consumedHashes.add(credential.hash);
          break;
        }
        case "Script": {
          if (nativeHashes.includes(credential.hash)) {
            consumedHashes.add(credential.hash);
            break;
          } else if (nativeHashesOptional[credential.hash]) {
            if (!nativeHashesOptional[credential.hash].verify(
              Number.isInteger(lowerBound) ? CML.BigInteger.from_str(
                lowerBound.toString()
              ).to_js_value() : void 0,
              Number.isInteger(upperBound) ? CML.BigInteger.from_str(
                upperBound.toString()
              ).to_js_value() : void 0,
              edKeyHashes
            )) {
              throw new Error(
                `Invalid native script witness. Script hash: ${credential.hash}`
              );
            }
            break;
          } else if (plutusHashes.includes(credential.hash) || plutusHashesOptional.includes(credential.hash)) {
            if (redeemers.find(
              (redeemer) => redeemer.tag === tag && redeemer.index === index
            )) {
              consumedHashes.add(credential.hash);
              break;
            }
          }
          throw new Error(
            `Missing script witness. Script hash: ${credential.hash}`
          );
        }
      }
    }
    for (let i = 0; i < (body.collateral_inputs()?.len() || 0); i++) {
      const input = body.collateral_inputs().get(i);
      const outRef = input.transaction_id().to_hex() + input.index().toString();
      const entry = this.ledger[outRef] || this.mempool[outRef];
      if (!entry || entry.spent) {
        throw new Error(
          `Could not read UTxO: ${JSON.stringify({
            txHash: entry?.utxo.txHash,
            outputIndex: entry?.utxo.outputIndex
          })}
It does not exist or was already spent.`
        );
      }
      const { paymentCredential } = (0, import_utils6.getAddressDetails)(entry.utxo.address);
      if (paymentCredential?.type === "Script") {
        throw new Error("Collateral inputs can only contain vkeys.");
      }
      checkAndConsumeHash(paymentCredential, null, null);
    }
    for (let i = 0; i < (body.required_signers()?.len() || 0); i++) {
      const signer = body.required_signers().get(i);
      checkAndConsumeHash({ type: "Key", hash: signer.to_hex() }, null, null);
    }
    for (let index = 0; index < (body.mint()?.keys().len() || 0); index++) {
      const policyId = body.mint().keys().get(index).to_hex();
      checkAndConsumeHash({ type: "Script", hash: policyId }, "Mint", index);
    }
    const withdrawalRequests = [];
    for (let index = 0; index < (body.withdrawals()?.keys().len() || 0); index++) {
      const rawAddress = body.withdrawals().keys().get(index);
      const withdrawal = BigInt(
        body.withdrawals().get(rawAddress).toString()
      );
      const rewardAddress = rawAddress.to_address().to_bech32(void 0);
      const { stakeCredential } = (0, import_utils6.getAddressDetails)(rewardAddress);
      checkAndConsumeHash(stakeCredential, "Reward", index);
      if (this.chain[rewardAddress]?.delegation.rewards !== withdrawal) {
        throw new Error(
          "Withdrawal amount doesn't match actual reward balance."
        );
      }
      withdrawalRequests.push({ rewardAddress, withdrawal });
    }
    const certRequests = [];
    for (let index = 0; index < (body.certs()?.len() || 0); index++) {
      const cert = body.certs().get(index);
      switch (cert.kind()) {
        case 0: {
          const registration = cert.as_stake_registration();
          const rewardAddress = CML.RewardAddress.new(
            CML.NetworkInfo.testnet().network_id(),
            registration.stake_credential()
          ).to_address().to_bech32(void 0);
          if (this.chain[rewardAddress]?.registeredStake) {
            throw new Error(
              `Stake key is already registered. Reward address: ${rewardAddress}`
            );
          }
          certRequests.push({ type: "Registration", rewardAddress });
          break;
        }
        case 1: {
          const deregistration = cert.as_stake_deregistration();
          const rewardAddress = CML.RewardAddress.new(
            CML.NetworkInfo.testnet().network_id(),
            deregistration.stake_credential()
          ).to_address().to_bech32(void 0);
          const { stakeCredential } = (0, import_utils6.getAddressDetails)(rewardAddress);
          checkAndConsumeHash(stakeCredential, "Cert", index);
          if (!this.chain[rewardAddress]?.registeredStake) {
            throw new Error(
              `Stake key is already deregistered. Reward address: ${rewardAddress}`
            );
          }
          certRequests.push({ type: "Deregistration", rewardAddress });
          break;
        }
        case 2: {
          const delegation = cert.as_stake_delegation();
          const rewardAddress = CML.RewardAddress.new(
            CML.NetworkInfo.testnet().network_id(),
            delegation.stake_credential()
          ).to_address().to_bech32(void 0);
          const poolId = delegation.pool().to_bech32("pool");
          const { stakeCredential } = (0, import_utils6.getAddressDetails)(rewardAddress);
          checkAndConsumeHash(stakeCredential, "Cert", index);
          if (!this.chain[rewardAddress]?.registeredStake && !certRequests.find(
            (request) => request.type === "Registration" && request.rewardAddress === rewardAddress
          )) {
            throw new Error(
              `Stake key is not registered. Reward address: ${rewardAddress}`
            );
          }
          certRequests.push({ type: "Delegation", rewardAddress, poolId });
          break;
        }
      }
    }
    resolvedInputs.forEach(({ entry: { utxo } }, index) => {
      const { paymentCredential } = (0, import_utils6.getAddressDetails)(utxo.address);
      checkAndConsumeHash(paymentCredential, "Spend", index);
    });
    const outputs = (() => {
      const collected = [];
      for (let i = 0; i < body.outputs().len(); i++) {
        const output = body.outputs().get(i);
        const unspentOutput = CML.TransactionUnspentOutput.new(
          CML.TransactionInput.new(
            CML.TransactionHash.from_hex(txHash),
            CML.BigInteger.from_str(i.toString()).to_js_value()
          ),
          output
        );
        const utxo = (0, import_utils6.coreToUtxo)(unspentOutput);
        if (utxo.datumHash) consumedHashes.add(utxo.datumHash);
        collected.push({
          utxo,
          spent: false
        });
      }
      return collected;
    })();
    const [extraKeyHash] = keyHashes.filter(
      (keyHash) => !consumedHashes.has(keyHash)
    );
    if (extraKeyHash) {
      throw new Error(`Extraneous vkey witness. Key hash: ${extraKeyHash}`);
    }
    const [extraNativeHash] = nativeHashes.filter(
      (scriptHash) => !consumedHashes.has(scriptHash)
    );
    if (extraNativeHash) {
      throw new Error(
        `Extraneous native script. Script hash: ${extraNativeHash}`
      );
    }
    const [extraPlutusHash] = plutusHashes.filter(
      (scriptHash) => !consumedHashes.has(scriptHash)
    );
    if (extraPlutusHash) {
      throw new Error(
        `Extraneous plutus script. Script hash: ${extraPlutusHash}`
      );
    }
    const [extraDatumHash] = Object.keys(datumTable).filter(
      (datumHash) => !consumedHashes.has(datumHash)
    );
    if (extraDatumHash) {
      throw new Error(`Extraneous plutus data. Datum hash: ${extraDatumHash}`);
    }
    resolvedInputs.forEach(({ entry, type }) => {
      const outRef = entry.utxo.txHash + entry.utxo.outputIndex;
      entry.spent = true;
      if (type === "Ledger") this.ledger[outRef] = entry;
      else if (type === "Mempool") this.mempool[outRef] = entry;
    });
    withdrawalRequests.forEach(({ rewardAddress, withdrawal }) => {
      this.chain[rewardAddress].delegation.rewards -= withdrawal;
    });
    certRequests.forEach(({ type, rewardAddress, poolId }) => {
      switch (type) {
        case "Registration": {
          if (this.chain[rewardAddress]) {
            this.chain[rewardAddress].registeredStake = true;
          } else {
            this.chain[rewardAddress] = {
              registeredStake: true,
              delegation: { poolId: null, rewards: 0n }
            };
          }
          break;
        }
        case "Deregistration": {
          this.chain[rewardAddress].registeredStake = false;
          this.chain[rewardAddress].delegation.poolId = null;
          break;
        }
        case "Delegation": {
          this.chain[rewardAddress].delegation.poolId = poolId;
        }
      }
    });
    outputs.forEach(({ utxo, spent }) => {
      this.mempool[utxo.txHash + utxo.outputIndex] = {
        utxo,
        spent
      };
    });
    for (const [datumHash, datum] of Object.entries(datumTable)) {
      this.datumTable[datumHash] = datum;
    }
    return Promise.resolve(txHash);
  }
  async evaluateTx(tx, additionalUTxOs) {
    const desTx = CML.Transaction.from_cbor_hex(tx);
    const redeemers = desTx.witness_set().redeemers();
    if (!redeemers) {
      return [];
    }
    let evalRedeemers = [];
    const arrLegacyRedeemer = redeemers.as_arr_legacy_redeemer();
    if (arrLegacyRedeemer) {
      for (let i = 0; i < arrLegacyRedeemer.len(); i++) {
        const legacyRedeemer = arrLegacyRedeemer.get(i);
        evalRedeemers.push({
          ex_units: {
            mem: Number(legacyRedeemer.ex_units().mem()),
            steps: Number(legacyRedeemer.ex_units().steps())
          },
          redeemer_index: Number(legacyRedeemer.index()),
          redeemer_tag: (0, import_utils5.fromCMLRedeemerTag)(legacyRedeemer.tag())
        });
      }
      return evalRedeemers;
    }
    const mapRedeemerKeyToRedeemerVal = redeemers.as_map_redeemer_key_to_redeemer_val();
    if (mapRedeemerKeyToRedeemerVal) {
      const keys = mapRedeemerKeyToRedeemerVal.keys();
      for (let i = 0; i < keys.len(); i++) {
        const key = keys.get(i);
        const redeemerVal = mapRedeemerKeyToRedeemerVal.get(key);
        if (redeemerVal) {
          evalRedeemers.push({
            ex_units: {
              mem: Number(redeemerVal.ex_units().mem()),
              steps: Number(redeemerVal.ex_units().steps())
            },
            redeemer_index: Number(key.index),
            redeemer_tag: (0, import_utils5.fromCMLRedeemerTag)(key.tag())
          });
        }
      }
      return evalRedeemers;
    }
    return evalRedeemers;
  }
  log() {
    function getRandomColor(unit) {
      const seed = unit === "lovelace" ? "1" : unit;
      let num = 0;
      for (let i = 0; i < seed.length; i++) {
        num += seed.charCodeAt(i);
      }
      const r = num * 123 % 256;
      const g = num * 321 % 256;
      const b = num * 213 % 256;
      return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }
    const totalBalances = {};
    const balances = {};
    for (const { utxo } of Object.values(this.ledger)) {
      for (const [unit, quantity] of Object.entries(utxo.assets)) {
        if (!balances[utxo.address]) {
          balances[utxo.address] = { [unit]: quantity };
        } else if (!balances[utxo.address]?.[unit]) {
          balances[utxo.address][unit] = quantity;
        } else {
          balances[utxo.address][unit] += quantity;
        }
        if (!totalBalances[unit]) {
          totalBalances[unit] = quantity;
        } else {
          totalBalances[unit] += quantity;
        }
      }
    }
    console.log("\n%cBlockchain state", "color:purple");
    console.log(
      `
    Block height:   %c${this.blockHeight}%c
    Slot:           %c${this.slot}%c
    Unix time:      %c${this.time}
  `,
      "color:yellow",
      "color:white",
      "color:yellow",
      "color:white",
      "color:yellow"
    );
    console.log("\n");
    for (const [address, assets] of Object.entries(balances)) {
      console.log(`Address: %c${address}`, "color:blue", "\n");
      for (const [unit, quantity] of Object.entries(assets)) {
        const barLength = Math.max(
          Math.floor(60 * (Number(quantity) / Number(totalBalances[unit]))),
          1
        );
        console.log(
          `%c${"\u2586".repeat(barLength) + " ".repeat(60 - barLength)}`,
          `color: ${getRandomColor(unit)}`,
          "",
          `${unit}:`,
          quantity,
          ""
        );
      }
      console.log(`
${"\u2581".repeat(60)}
`);
    }
  }
};

// src/maestro.ts
var import_utils7 = require("@lucid-evolution/utils");
var import_core_utils3 = require("@lucid-evolution/core-utils");
var Maestro = class {
  url;
  apiKey;
  turboSubmit;
  constructor({ network, apiKey, turboSubmit = false }) {
    this.url = `https://${network}.gomaestro-api.org/v1`;
    this.apiKey = apiKey;
    this.turboSubmit = turboSubmit;
  }
  async getProtocolParameters() {
    const timestampedResult = await fetch(`${this.url}/protocol-parameters`, {
      headers: this.commonHeaders()
    }).then((res) => res.json());
    const result = timestampedResult.data;
    const decimalFromRationalString = (str) => {
      const forwardSlashIndex = str.indexOf("/");
      return parseInt(str.slice(0, forwardSlashIndex)) / parseInt(str.slice(forwardSlashIndex + 1));
    };
    return {
      minFeeA: parseInt(result.min_fee_coefficient),
      minFeeB: parseInt(result.min_fee_constant.ada.lovelace),
      maxTxSize: parseInt(result.max_transaction_size.bytes),
      maxValSize: parseInt(result.max_value_size.bytes),
      keyDeposit: BigInt(result.stake_credential_deposit.ada.lovelace),
      poolDeposit: BigInt(result.stake_pool_deposit.ada.lovelace),
      drepDeposit: BigInt(result.delegate_representative_deposit.ada.lovelace),
      govActionDeposit: BigInt(result.governance_action_deposit.ada.lovelace),
      priceMem: decimalFromRationalString(
        result.script_execution_prices.memory
      ),
      priceStep: decimalFromRationalString(result.script_execution_prices.cpu),
      maxTxExMem: BigInt(result.max_execution_units_per_transaction.memory),
      maxTxExSteps: BigInt(result.max_execution_units_per_transaction.cpu),
      coinsPerUtxoByte: BigInt(result.min_utxo_deposit_coefficient),
      collateralPercentage: parseInt(result.collateral_percentage),
      maxCollateralInputs: parseInt(result.max_collateral_inputs),
      minFeeRefScriptCostPerByte: parseInt(
        result.min_fee_reference_scripts.base
      ),
      costModels: {
        PlutusV1: Object.fromEntries(
          result.plutus_cost_models.plutus_v1.map(
            (value, index) => [index.toString(), value]
          )
        ),
        PlutusV2: Object.fromEntries(
          result.plutus_cost_models.plutus_v2.map(
            (value, index) => [index.toString(), value]
          )
        ),
        PlutusV3: Object.fromEntries(
          result.plutus_cost_models.plutus_v3.map(
            (value, index) => [index.toString(), value]
          )
        )
      }
    };
  }
  async getUtxosInternal(addressOrCredential, unit) {
    const queryPredicate = (() => {
      if (typeof addressOrCredential === "string") {
        return "/addresses/" + addressOrCredential;
      }
      let credentialBech32Query = "/addresses/cred/";
      credentialBech32Query += addressOrCredential.type === "Key" ? CML.Ed25519KeyHash.from_hex(addressOrCredential.hash).to_bech32(
        "addr_vkh"
      ) : CML.ScriptHash.from_hex(addressOrCredential.hash).to_bech32(
        "addr_shared_vkh"
      );
      return credentialBech32Query;
    })();
    const qparams = new URLSearchParams({
      count: "100",
      ...unit && { asset: unit }
    });
    const result = await this.getAllPagesData(
      async (qry) => await fetch(qry, {
        headers: this.requireAmountsAsStrings(this.commonHeaders())
      }),
      `${this.url}${queryPredicate}/utxos`,
      qparams,
      "Location: getUtxosInternal. Error: Could not fetch UTxOs from Maestro"
    );
    return result.map(this.maestroUtxoToUtxo);
  }
  getUtxos(addressOrCredential) {
    return this.getUtxosInternal(addressOrCredential);
  }
  getUtxosWithUnit(addressOrCredential, unit) {
    return this.getUtxosInternal(addressOrCredential, unit);
  }
  async getUtxoByUnit(unit) {
    const timestampedAddressesResponse = await fetch(
      `${this.url}/assets/${unit}/addresses?count=2`,
      { headers: this.commonHeaders() }
    );
    const timestampedAddresses = await timestampedAddressesResponse.json();
    if (!timestampedAddressesResponse.ok) {
      if (timestampedAddresses.message) {
        throw new Error(timestampedAddresses.message);
      }
      throw new Error(
        "Location: getUtxoByUnit. Error: Couldn't perform query. Received status code: " + timestampedAddressesResponse.status
      );
    }
    const addressesWithAmount = timestampedAddresses.data;
    if (addressesWithAmount.length === 0) {
      throw new Error("Location: getUtxoByUnit. Error: Unit not found.");
    }
    if (addressesWithAmount.length > 1) {
      throw new Error(
        "Location: getUtxoByUnit. Error: Unit needs to be an NFT or only held by one address."
      );
    }
    const address = addressesWithAmount[0].address;
    const utxos = await this.getUtxosWithUnit(address, unit);
    if (utxos.length > 1) {
      throw new Error(
        "Location: getUtxoByUnit. Error: Unit needs to be an NFT or only held by one address."
      );
    }
    return utxos[0];
  }
  async getUtxosByOutRef(outRefs) {
    const qry = `${this.url}/transactions/outputs`;
    const body = JSON.stringify(
      outRefs.map(({ txHash, outputIndex }) => `${txHash}#${outputIndex}`)
    );
    const utxos = await this.getAllPagesData(
      async (qry2) => await fetch(qry2, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...this.requireAmountsAsStrings(this.commonHeaders())
        },
        body
      }),
      qry,
      new URLSearchParams({}),
      "Location: getUtxosByOutRef. Error: Could not fetch UTxOs by references from Maestro"
    );
    return utxos.map(this.maestroUtxoToUtxo);
  }
  async getDelegation(rewardAddress) {
    const timestampedResultResponse = await fetch(
      `${this.url}/accounts/${rewardAddress}`,
      { headers: this.commonHeaders() }
    );
    if (!timestampedResultResponse.ok) {
      return { poolId: null, rewards: 0n };
    }
    const timestampedResult = await timestampedResultResponse.json();
    const result = timestampedResult.data;
    return {
      poolId: result.delegated_pool || null,
      rewards: BigInt(result.rewards_available)
    };
  }
  async getDatum(datumHash) {
    const timestampedResultResponse = await fetch(
      `${this.url}/datums/${datumHash}`,
      {
        headers: this.commonHeaders()
      }
    );
    if (!timestampedResultResponse.ok) {
      if (timestampedResultResponse.status === 404) {
        throw new Error(`No datum found for datum hash: ${datumHash}`);
      } else {
        throw new Error(
          "Location: getDatum. Error: Couldn't successfully perform query. Received status code: " + timestampedResultResponse.status
        );
      }
    }
    const timestampedResult = await timestampedResultResponse.json();
    return timestampedResult.data.bytes;
  }
  awaitTx(txHash, checkInterval = 3e3) {
    return new Promise((res) => {
      const confirmation = setInterval(async () => {
        const isConfirmedResponse = await fetch(
          `${this.url}/transactions/${txHash}/cbor`,
          {
            headers: this.commonHeaders()
          }
        );
        if (isConfirmedResponse.ok) {
          await isConfirmedResponse.json();
          clearInterval(confirmation);
          await new Promise((res2) => setTimeout(() => res2(1), 1e3));
          return res(true);
        }
      }, checkInterval);
    });
  }
  async submitTx(tx) {
    let queryUrl = `${this.url}/txmanager`;
    queryUrl += this.turboSubmit ? "/turbosubmit" : "";
    const response = await fetch(queryUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/cbor",
        Accept: "text/plain",
        ...this.commonHeaders()
      },
      body: (0, import_core_utils3.fromHex)(tx)
    });
    const result = await response.text();
    if (!response.ok) {
      if (response.status === 400) throw new Error(result);
      else {
        throw new Error(
          "Could not submit transaction. Received status code: " + response.status
        );
      }
    }
    return result;
  }
  commonHeaders() {
    return { "api-key": this.apiKey, lucid: lucid2 };
  }
  requireAmountsAsStrings(obj) {
    return { ...obj, "amounts-as-strings": "true" };
  }
  maestroUtxoToUtxo(result) {
    return {
      txHash: result.tx_hash,
      outputIndex: result.index,
      assets: (() => {
        const a = {};
        result.assets.forEach((am) => {
          a[am.unit] = BigInt(am.amount);
        });
        return a;
      })(),
      address: result.address,
      datumHash: result.datum ? result.datum.type == "inline" ? void 0 : result.datum.hash : void 0,
      datum: result.datum?.bytes,
      scriptRef: toScriptRef(result.reference_script)
    };
  }
  async getAllPagesData(getResponse, qry, paramsGiven, errorMsg) {
    let nextCursor = null;
    let result = [];
    while (true) {
      if (nextCursor !== null) {
        paramsGiven.set("cursor", nextCursor);
      }
      const response = await getResponse(`${qry}?` + paramsGiven);
      const pageResult = await response.json();
      if (!response.ok) {
        throw new Error(
          `${errorMsg}. Received status code: ${response.status}`
        );
      }
      nextCursor = pageResult.next_cursor;
      result = result.concat(pageResult.data);
      if (nextCursor == null) break;
    }
    return result;
  }
  async evaluateTx(tx, additionalUTxOs) {
    const additionalMaestroUTxOs = (additionalUTxOs || []).map((utxo) => ({
      tx_hash: utxo.txHash,
      index: utxo.outputIndex,
      txout_cbor: (0, import_utils7.utxoToCore)(utxo).output().to_cbor_hex()
    }));
    const payload = {
      cbor: tx,
      additional_utxos: additionalMaestroUTxOs
    };
    const res = await fetch(`${this.url}/transactions/evaluate`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        "api-key": this.apiKey
      },
      body: JSON.stringify(payload)
    });
    if (!res.ok) {
      const body = await res.text();
      console.error("Response error:", JSON.stringify(res));
      throw new Error(`Evaluate transaction failed: ${body}`);
    }
    const result = await res.json();
    return result;
  }
};
var toScriptRef = (reference_script) => {
  if (reference_script && reference_script.bytes) {
    switch (reference_script.type) {
      case "native":
        return (0, import_utils7.scriptFromNative)(reference_script.json);
      case "plutusv1":
        return {
          type: "PlutusV1",
          script: (0, import_utils7.applyDoubleCborEncoding)(reference_script.bytes)
        };
      case "plutusv2":
        return {
          type: "PlutusV2",
          script: (0, import_utils7.applyDoubleCborEncoding)(reference_script.bytes)
        };
      case "plutusv3":
        return {
          type: "PlutusV3",
          script: (0, import_utils7.applyDoubleCborEncoding)(reference_script.bytes)
        };
      default:
        return void 0;
    }
  }
};
var lucid2 = package_default.version;

// src/koios.ts
var import_core_utils4 = require("@lucid-evolution/core-utils");
var import_utils9 = require("@lucid-evolution/utils");

// src/internal/koios.ts
var import_platform3 = require("@effect/platform");
var import_effect7 = require("effect");
var import_utils8 = require("@lucid-evolution/utils");
var ProtocolParametersSchema2 = import_effect7.Schema.Struct({
  pvt_motion_no_confidence: import_effect7.Schema.Number,
  pvt_committee_normal: import_effect7.Schema.Number,
  pvt_committee_no_confidence: import_effect7.Schema.Number,
  pvt_hard_fork_initiation: import_effect7.Schema.Number,
  pvtpp_security_group: import_effect7.Schema.Number,
  dvt_motion_no_confidence: import_effect7.Schema.Number,
  dvt_committee_normal: import_effect7.Schema.Number,
  dvt_committee_no_confidence: import_effect7.Schema.Number,
  dvt_update_to_constitution: import_effect7.Schema.Number,
  dvt_hard_fork_initiation: import_effect7.Schema.Number,
  dvt_p_p_network_group: import_effect7.Schema.Number,
  dvt_p_p_economic_group: import_effect7.Schema.Number,
  dvt_p_p_technical_group: import_effect7.Schema.Number,
  dvt_p_p_gov_group: import_effect7.Schema.Number,
  dvt_treasury_withdrawal: import_effect7.Schema.Number,
  committee_min_size: import_effect7.Schema.Number,
  committee_max_term_length: import_effect7.Schema.Number,
  gov_action_lifetime: import_effect7.Schema.Number,
  gov_action_deposit: import_effect7.Schema.NumberFromString,
  drep_deposit: import_effect7.Schema.NumberFromString,
  drep_activity: import_effect7.Schema.Number,
  min_fee_ref_script_cost_per_byte: import_effect7.Schema.Number,
  epoch_no: import_effect7.Schema.Number,
  min_fee_a: import_effect7.Schema.Number,
  min_fee_b: import_effect7.Schema.Number,
  max_block_size: import_effect7.Schema.Number,
  max_tx_size: import_effect7.Schema.Number,
  max_bh_size: import_effect7.Schema.Number,
  key_deposit: import_effect7.Schema.BigInt,
  pool_deposit: import_effect7.Schema.BigInt,
  max_epoch: import_effect7.Schema.Number,
  optimal_pool_count: import_effect7.Schema.Number,
  influence: import_effect7.Schema.Number,
  monetary_expand_rate: import_effect7.Schema.Number,
  treasury_growth_rate: import_effect7.Schema.Number,
  decentralisation: import_effect7.Schema.Number,
  extra_entropy: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  protocol_major: import_effect7.Schema.Number,
  protocol_minor: import_effect7.Schema.Number,
  min_utxo_value: import_effect7.Schema.String,
  min_pool_cost: import_effect7.Schema.String,
  nonce: import_effect7.Schema.String,
  block_hash: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  cost_models: import_effect7.Schema.Struct({
    PlutusV1: import_effect7.Schema.Array(import_effect7.Schema.Number),
    PlutusV2: import_effect7.Schema.Array(import_effect7.Schema.Number),
    PlutusV3: import_effect7.Schema.Array(import_effect7.Schema.Number)
  }),
  price_mem: import_effect7.Schema.Number,
  price_step: import_effect7.Schema.Number,
  max_tx_ex_mem: import_effect7.Schema.BigIntFromNumber,
  max_tx_ex_steps: import_effect7.Schema.BigIntFromNumber,
  max_block_ex_mem: import_effect7.Schema.Number,
  max_block_ex_steps: import_effect7.Schema.Number,
  max_val_size: import_effect7.Schema.Number,
  collateral_percent: import_effect7.Schema.Number,
  max_collateral_inputs: import_effect7.Schema.Number,
  coins_per_utxo_size: import_effect7.Schema.BigInt
});
var AssetSchema = import_effect7.Schema.Struct({
  policy_id: import_effect7.Schema.String,
  asset_name: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  fingerprint: import_effect7.Schema.String,
  decimals: import_effect7.Schema.Number,
  quantity: import_effect7.Schema.String
});
var ReferenceScriptSchema = import_effect7.Schema.Struct({
  hash: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  size: import_effect7.Schema.NullOr(import_effect7.Schema.Number),
  type: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  bytes: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  value: import_effect7.Schema.NullOr(import_effect7.Schema.Object)
});
var UTxOSchema2 = import_effect7.Schema.Struct({
  tx_hash: import_effect7.Schema.String,
  tx_index: import_effect7.Schema.Number,
  block_time: import_effect7.Schema.Number,
  block_height: import_effect7.Schema.NullOr(import_effect7.Schema.Number),
  value: import_effect7.Schema.String,
  datum_hash: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  inline_datum: import_effect7.Schema.NullOr(
    import_effect7.Schema.Struct({
      bytes: import_effect7.Schema.String,
      value: import_effect7.Schema.Object
    })
  ),
  reference_script: import_effect7.Schema.NullOr(ReferenceScriptSchema),
  asset_list: import_effect7.Schema.NullOr(import_effect7.Schema.Array(AssetSchema))
});
var AddressInfoSchema = import_effect7.Schema.Array(
  import_effect7.Schema.NullishOr(
    import_effect7.Schema.Struct({
      address: import_effect7.Schema.String,
      balance: import_effect7.Schema.String,
      stake_address: import_effect7.Schema.NullOr(import_effect7.Schema.String),
      script_address: import_effect7.Schema.Boolean,
      utxo_set: import_effect7.Schema.Array(UTxOSchema2)
    })
  )
);
var InputOutputSchema = import_effect7.Schema.Struct({
  payment_addr: import_effect7.Schema.Struct({
    bech32: import_effect7.Schema.String,
    cred: import_effect7.Schema.String
  }),
  stake_addr: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  tx_hash: import_effect7.Schema.String,
  tx_index: import_effect7.Schema.Number,
  value: import_effect7.Schema.String,
  datum_hash: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  inline_datum: import_effect7.Schema.NullOr(
    import_effect7.Schema.Struct({
      bytes: import_effect7.Schema.String,
      value: import_effect7.Schema.Object
    })
  ),
  reference_script: import_effect7.Schema.NullOr(ReferenceScriptSchema),
  asset_list: import_effect7.Schema.Array(AssetSchema)
});
var TxInfoSchema = import_effect7.Schema.Struct({
  tx_hash: import_effect7.Schema.String,
  block_hash: import_effect7.Schema.String,
  block_height: import_effect7.Schema.Number,
  epoch_no: import_effect7.Schema.Number,
  epoch_slot: import_effect7.Schema.Number,
  absolute_slot: import_effect7.Schema.Number,
  tx_timestamp: import_effect7.Schema.Number,
  tx_block_index: import_effect7.Schema.Number,
  tx_size: import_effect7.Schema.Number,
  total_output: import_effect7.Schema.String,
  fee: import_effect7.Schema.String,
  treasury_donation: import_effect7.Schema.String,
  deposit: import_effect7.Schema.String,
  invalid_before: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  invalid_after: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  collateral_inputs: import_effect7.Schema.NullOr(import_effect7.Schema.Array(InputOutputSchema)),
  collateral_output: import_effect7.Schema.NullOr(InputOutputSchema),
  reference_inputs: import_effect7.Schema.NullOr(import_effect7.Schema.Array(InputOutputSchema)),
  inputs: import_effect7.Schema.Array(InputOutputSchema),
  outputs: import_effect7.Schema.Array(InputOutputSchema),
  withdrawals: import_effect7.Schema.NullOr(
    import_effect7.Schema.Array(
      import_effect7.Schema.Struct({
        amount: import_effect7.Schema.String,
        stake_addr: import_effect7.Schema.String
      })
    )
  ),
  assets_minted: import_effect7.Schema.NullOr(import_effect7.Schema.Array(AssetSchema)),
  metadata: import_effect7.Schema.NullOr(import_effect7.Schema.Object),
  certificates: import_effect7.Schema.NullOr(
    import_effect7.Schema.Array(
      import_effect7.Schema.Struct({
        index: import_effect7.Schema.Number,
        type: import_effect7.Schema.String,
        info: import_effect7.Schema.NullOr(import_effect7.Schema.Object)
      })
    )
  ),
  native_scripts: import_effect7.Schema.NullOr(
    import_effect7.Schema.Array(
      import_effect7.Schema.Struct({
        script_hash: import_effect7.Schema.String,
        script_json: import_effect7.Schema.Object
      })
    )
  ),
  plutus_contracts: import_effect7.Schema.NullOr(
    import_effect7.Schema.Array(
      import_effect7.Schema.Struct({
        address: import_effect7.Schema.String,
        spends_input: import_effect7.Schema.NullOr(
          import_effect7.Schema.Struct({
            tx_hash: import_effect7.Schema.String,
            tx_index: import_effect7.Schema.Number
          })
        ),
        script_hash: import_effect7.Schema.String,
        bytecode: import_effect7.Schema.String,
        size: import_effect7.Schema.Number,
        valid_contract: import_effect7.Schema.Boolean,
        input: import_effect7.Schema.Struct({
          redeemer: import_effect7.Schema.Struct({
            purpose: import_effect7.Schema.Literal("spend", "mint", "cert", "reward"),
            fee: import_effect7.Schema.String,
            unit: import_effect7.Schema.Struct({
              steps: import_effect7.Schema.String,
              mem: import_effect7.Schema.String
            }),
            datum: import_effect7.Schema.Struct({
              hash: import_effect7.Schema.NullOr(import_effect7.Schema.String),
              value: import_effect7.Schema.NullOr(import_effect7.Schema.Object)
            })
          }),
          datum: import_effect7.Schema.Struct({
            hash: import_effect7.Schema.NullOr(import_effect7.Schema.String),
            value: import_effect7.Schema.NullOr(import_effect7.Schema.Object)
          })
        })
      })
    )
  ),
  //TODO: add S.Struct
  // https://preprod.koios.rest/#post-/tx_info
  voting_procedures: import_effect7.Schema.Array(import_effect7.Schema.Object),
  //TODO: add S.Struct
  // https://preprod.koios.rest/#post-/tx_info
  proposal_procedures: import_effect7.Schema.Object
});
var TxHashSchema = import_effect7.Schema.String;
var AssetAddressSchema = import_effect7.Schema.Struct({
  payment_address: import_effect7.Schema.String,
  stake_address: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  quantity: import_effect7.Schema.String
});
var AccountInfoSchema = import_effect7.Schema.Struct({
  delegated_pool: import_effect7.Schema.NullOr(import_effect7.Schema.String),
  rewards_available: import_effect7.Schema.NumberFromString
});
var DatumInfo = import_effect7.Schema.Struct({
  bytes: import_effect7.Schema.String
});
var toUTxO = (koiosUTxO, address) => ({
  txHash: koiosUTxO.tx_hash,
  outputIndex: koiosUTxO.tx_index,
  assets: (() => {
    const a = {};
    if (koiosUTxO.asset_list) {
      koiosUTxO.asset_list.forEach((am) => {
        a[am.policy_id + am.asset_name] = BigInt(am.quantity);
      });
    }
    a["lovelace"] = BigInt(koiosUTxO.value);
    return a;
  })(),
  address,
  datumHash: koiosUTxO.inline_datum ? void 0 : koiosUTxO.datum_hash || void 0,
  datum: koiosUTxO.inline_datum ? koiosUTxO.inline_datum.bytes : void 0,
  scriptRef: toScriptRef2(koiosUTxO.reference_script)
});
var toScriptRef2 = (reference_script) => {
  if (reference_script && reference_script.bytes && reference_script.type) {
    switch (reference_script.type) {
      case "plutusV1":
        return {
          type: "PlutusV1",
          script: (0, import_utils8.applyDoubleCborEncoding)(reference_script.bytes)
        };
      case "plutusV2":
        return {
          type: "PlutusV2",
          script: (0, import_utils8.applyDoubleCborEncoding)(reference_script.bytes)
        };
      case "plutusV3":
        return {
          type: "PlutusV3",
          script: (0, import_utils8.applyDoubleCborEncoding)(reference_script.bytes)
        };
      default:
        return void 0;
    }
  }
};
var getUtxosEffect = (baseUrl, addressOrCredential, headers) => {
  const url = `${baseUrl}/address_info`;
  const body = {
    _addresses: [addressOrCredential]
  };
  const schema = AddressInfoSchema;
  const result = (0, import_effect7.pipe)(
    import_effect7.Effect.if(typeof addressOrCredential === "string", {
      onFalse: () => import_effect7.Effect.fail("Credential Type is not supported in Koios yet."),
      onTrue: () => makePostAsJson(url, body, schema, headers)
    }),
    import_effect7.Effect.map(
      ([result2]) => result2 ? result2.utxo_set.map((koiosUtxo) => toUTxO(koiosUtxo, result2.address)) : []
    ),
    import_effect7.Effect.provide(import_platform3.FetchHttpClient.layer)
  );
  return result;
};

// src/koios.ts
var import_effect8 = require("effect");
var import_platform4 = require("@effect/platform");
var KoiosError = class extends import_effect8.Data.TaggedError("KoiosError") {
  get message() {
    return `${this.cause}`;
  }
};
var Koios = class {
  baseUrl;
  token;
  constructor(baseUrl, token) {
    this.baseUrl = baseUrl;
    this.token = token;
  }
  async getProtocolParameters() {
    const url = `${this.baseUrl}/epoch_params?limit=1`;
    const schema = import_effect8.Schema.Array(ProtocolParametersSchema2);
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const [result] = await (0, import_effect8.pipe)(
      makeGet(url, schema, bearerToken),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    return {
      minFeeA: result.min_fee_a,
      minFeeB: result.min_fee_b,
      maxTxSize: result.max_tx_size,
      maxValSize: result.max_val_size,
      keyDeposit: result.key_deposit,
      poolDeposit: result.pool_deposit,
      drepDeposit: BigInt(result.drep_deposit),
      govActionDeposit: BigInt(result.gov_action_deposit),
      priceMem: result.price_mem,
      priceStep: result.price_step,
      maxTxExMem: result.max_tx_ex_mem,
      maxTxExSteps: result.max_tx_ex_steps,
      coinsPerUtxoByte: result.coins_per_utxo_size,
      collateralPercentage: result.collateral_percent,
      maxCollateralInputs: result.max_collateral_inputs,
      minFeeRefScriptCostPerByte: result.min_fee_ref_script_cost_per_byte,
      costModels: {
        PlutusV1: Object.fromEntries(
          result.cost_models.PlutusV1.map((value, index) => [
            index.toString(),
            value
          ])
        ),
        PlutusV2: Object.fromEntries(
          result.cost_models.PlutusV2.map((value, index) => [
            index.toString(),
            value
          ])
        ),
        PlutusV3: Object.fromEntries(
          result.cost_models.PlutusV3.map((value, index) => [
            index.toString(),
            value
          ])
        )
      }
    };
  }
  async getUtxos(addressOrCredential) {
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const result = await (0, import_effect8.pipe)(
      getUtxosEffect(this.baseUrl, addressOrCredential, bearerToken),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    return result;
  }
  async getUtxosWithUnit(addressOrCredential, unit) {
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const result = await (0, import_effect8.pipe)(
      getUtxosEffect(this.baseUrl, addressOrCredential, bearerToken),
      import_effect8.Effect.map(
        (utxos) => utxos.filter((utxo) => {
          const keys = Object.keys(utxo.assets);
          return keys.length > 0 && keys.includes(unit);
        })
      ),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    return result;
  }
  async getUtxoByUnit(unit) {
    let { policyId, assetName } = (0, import_utils9.fromUnit)(unit);
    const url = `${this.baseUrl}/asset_addresses?_asset_policy=${policyId}&_asset_name=${assetName}`;
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const result = await (0, import_effect8.pipe)(
      makeGet(url, import_effect8.Schema.Array(AssetAddressSchema), bearerToken),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.flatMap(
        (adresses) => adresses.length === 0 ? import_effect8.Effect.fail("Unit not found") : import_effect8.Effect.succeed(adresses)
      ),
      import_effect8.Effect.flatMap(
        (adresses) => adresses.length > 1 ? import_effect8.Effect.fail("Unit needs to be an NFT or only held by one address.") : import_effect8.Effect.succeed(adresses[0])
      ),
      import_effect8.Effect.flatMap(
        (address) => getUtxosEffect(
          this.baseUrl,
          address.payment_address,
          bearerToken
        )
      ),
      import_effect8.Effect.map(
        (utxos) => utxos.filter((utxo) => {
          const keys = Object.keys(utxo.assets);
          return keys.length > 0 && keys.includes(unit);
        })
      ),
      import_effect8.Effect.flatMap(
        (utxos) => utxos.length > 1 ? import_effect8.Effect.fail("Unit needs to be an NFT or only held by one address.") : import_effect8.Effect.succeed(utxos[0])
      ),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    return result;
  }
  async getUtxosByOutRef(outRefs) {
    const url = `${this.baseUrl}/tx_info`;
    const body = {
      _tx_hashes: [...new Set(outRefs.map((outRef) => outRef.txHash))],
      _assets: true,
      _scripts: true
    };
    const schema = import_effect8.Schema.Array(TxInfoSchema);
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const [result] = await (0, import_effect8.pipe)(
      makePostAsJson(url, body, schema, bearerToken),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    if (result) {
      const utxos = result.outputs.map(
        (koiosInputOutput) => toUTxO(
          {
            tx_hash: koiosInputOutput.tx_hash,
            tx_index: koiosInputOutput.tx_index,
            block_time: 0,
            block_height: result.block_height,
            value: koiosInputOutput.value,
            datum_hash: koiosInputOutput.datum_hash,
            inline_datum: koiosInputOutput.inline_datum,
            reference_script: koiosInputOutput.reference_script,
            asset_list: koiosInputOutput.asset_list
          },
          koiosInputOutput.payment_addr.bech32
        )
      );
      return utxos.filter(
        (utxo) => outRefs.some(
          (outRef) => utxo.txHash === outRef.txHash && utxo.outputIndex === outRef.outputIndex
        )
      );
    } else {
      return [];
    }
  }
  async getDelegation(rewardAddress) {
    const body = {
      _stake_addresses: [rewardAddress]
    };
    const url = `${this.baseUrl}/account_info`;
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const result = await (0, import_effect8.pipe)(
      makePostAsJson(
        url,
        body,
        import_effect8.Schema.Array(AccountInfoSchema),
        bearerToken
      ),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.flatMap(
        (result2) => result2.length === 0 ? import_effect8.Effect.fail("No Delegation Found by Reward Address") : import_effect8.Effect.succeed(result2[0])
      ),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    return {
      poolId: result.delegated_pool || null,
      rewards: BigInt(result.rewards_available)
    };
  }
  async getDatum(datumHash) {
    const url = `${this.baseUrl}/datum_info`;
    const body = {
      _datum_hashes: [datumHash]
    };
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const result = await (0, import_effect8.pipe)(
      makePostAsJson(
        url,
        body,
        import_effect8.Schema.Array(DatumInfo),
        bearerToken
      ),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.flatMap(
        (result2) => result2.length === 0 ? import_effect8.Effect.fail("No Datum Found by Datum Hash") : import_effect8.Effect.succeed(result2[0])
      ),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    return result.bytes;
  }
  async awaitTx(txHash, checkInterval = 2e4) {
    const url = `${this.baseUrl}/tx_info`;
    const body = {
      _tx_hashes: [txHash]
    };
    const schema = import_effect8.Schema.Array(TxInfoSchema);
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const result = await (0, import_effect8.pipe)(
      makePostAsJson(url, body, schema, bearerToken),
      import_effect8.Effect.repeat({
        schedule: import_effect8.Schedule.exponential(checkInterval),
        until: (result2) => result2.length > 0
      }),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.timeout(16e4),
      import_effect8.Effect.orDie,
      import_effect8.Effect.as(true),
      import_effect8.Effect.runPromise
    );
    return result;
  }
  async submitTx(tx) {
    const url = `${this.baseUrl}/submittx`;
    const body = (0, import_core_utils4.fromHex)(tx);
    const schema = TxHashSchema;
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const result = await (0, import_effect8.pipe)(
      makePostAsUint8Array(url, body, schema, bearerToken),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    return result;
  }
  async evaluateTx(tx, additionalUTxOs) {
    const url = `${this.baseUrl}/ogmios`;
    const body = {
      jsonrpc: "2.0",
      method: "evaluateTransaction",
      params: {
        transaction: { cbor: tx },
        additionalUtxo: toOgmiosUTxOs(additionalUTxOs)
      },
      id: null
    };
    const schema = JSONRPCSchema(import_effect8.Schema.Array(RedeemerSchema));
    const bearerToken = this.token ? { Authorization: `Bearer ${this.token}` } : void 0;
    const { result } = await (0, import_effect8.pipe)(
      makePostAsJson(url, body, schema, bearerToken),
      // Allows for dependency injection and easier testing
      import_effect8.Effect.provide(import_platform4.FetchHttpClient.layer),
      import_effect8.Effect.timeout(1e4),
      import_effect8.Effect.catchAllCause((cause) => new KoiosError({ cause })),
      import_effect8.Effect.runPromise
    );
    const evalRedeemers = result.map((item) => ({
      ex_units: {
        mem: item.budget.memory,
        steps: item.budget.cpu
      },
      redeemer_index: item.validator.index,
      redeemer_tag: item.validator.purpose
    }));
    return evalRedeemers;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Blockfrost,
  Emulator,
  Koios,
  KoiosError,
  Kupmios,
  KupmiosError,
  Maestro,
  generateEmulatorAccount,
  generateEmulatorAccountFromPrivateKey
});
